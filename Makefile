# Makefile.in generated by automake 1.9.6 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = .

pkgdatadir = $(datadir)/glpro
pkglibdir = $(libdir)/glpro
pkgincludedir = $(includedir)/glpro
top_builddir = .
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = glquake_glx$(EXEEXT) quake_x11$(EXEEXT) \
	unixded$(EXEEXT)
subdir = .
DIST_COMMON = README $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(top_srcdir)/configure AUTHORS COPYING \
	ChangeLog INSTALL NEWS compile depcomp install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno configure.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_glquake_glx_OBJECTS = glquake_glx-cl_demo.$(OBJEXT) \
	glquake_glx-cl_input.$(OBJEXT) glquake_glx-cl_main.$(OBJEXT) \
	glquake_glx-cl_parse.$(OBJEXT) glquake_glx-cl_tent.$(OBJEXT) \
	glquake_glx-chase.$(OBJEXT) glquake_glx-cmd.$(OBJEXT) \
	glquake_glx-common.$(OBJEXT) glquake_glx-console.$(OBJEXT) \
	glquake_glx-crc.$(OBJEXT) glquake_glx-cvar.$(OBJEXT) \
	glquake_glx-gl_draw.$(OBJEXT) glquake_glx-gl_mesh.$(OBJEXT) \
	glquake_glx-gl_model.$(OBJEXT) glquake_glx-gl_refrag.$(OBJEXT) \
	glquake_glx-gl_rlight.$(OBJEXT) glquake_glx-gl_rmain.$(OBJEXT) \
	glquake_glx-gl_rmisc.$(OBJEXT) glquake_glx-gl_rsurf.$(OBJEXT) \
	glquake_glx-gl_screen.$(OBJEXT) glquake_glx-gl_test.$(OBJEXT) \
	glquake_glx-gl_warp.$(OBJEXT) \
	glquake_glx-gl_vidlinuxglx.$(OBJEXT) \
	glquake_glx-host.$(OBJEXT) glquake_glx-host_cmd.$(OBJEXT) \
	glquake_glx-iplog.$(OBJEXT) glquake_glx-keys.$(OBJEXT) \
	glquake_glx-location.$(OBJEXT) glquake_glx-matrix.$(OBJEXT) \
	glquake_glx-menu.$(OBJEXT) glquake_glx-mathlib.$(OBJEXT) \
	glquake_glx-net_dgrm.$(OBJEXT) glquake_glx-net_main.$(OBJEXT) \
	glquake_glx-net_loop.$(OBJEXT) glquake_glx-net_vcr.$(OBJEXT) \
	glquake_glx-net_udp.$(OBJEXT) glquake_glx-net_bsd.$(OBJEXT) \
	glquake_glx-pr_cmds.$(OBJEXT) glquake_glx-pr_edict.$(OBJEXT) \
	glquake_glx-pr_exec.$(OBJEXT) glquake_glx-r_part.$(OBJEXT) \
	glquake_glx-sbar.$(OBJEXT) glquake_glx-security.$(OBJEXT) \
	glquake_glx-sv_main.$(OBJEXT) glquake_glx-sv_phys.$(OBJEXT) \
	glquake_glx-sv_move.$(OBJEXT) glquake_glx-sv_user.$(OBJEXT) \
	glquake_glx-zone.$(OBJEXT) glquake_glx-view.$(OBJEXT) \
	glquake_glx-wad.$(OBJEXT) glquake_glx-world.$(OBJEXT) \
	glquake_glx-cd_linux.$(OBJEXT) glquake_glx-sys_linux.$(OBJEXT) \
	glquake_glx-snd_dma.$(OBJEXT) glquake_glx-snd_mem.$(OBJEXT) \
	glquake_glx-snd_mix.$(OBJEXT) glquake_glx-snd_linux.$(OBJEXT) \
	glquake_glx-math.$(OBJEXT) glquake_glx-worlda.$(OBJEXT) \
	glquake_glx-snd_mixa.$(OBJEXT) glquake_glx-sys_dosa.$(OBJEXT)
glquake_glx_OBJECTS = $(am_glquake_glx_OBJECTS)
glquake_glx_DEPENDENCIES =
am_quake_x11_OBJECTS = quake_x11-cl_demo.$(OBJEXT) \
	quake_x11-cl_input.$(OBJEXT) quake_x11-cl_main.$(OBJEXT) \
	quake_x11-cl_parse.$(OBJEXT) quake_x11-cl_tent.$(OBJEXT) \
	quake_x11-chase.$(OBJEXT) quake_x11-cmd.$(OBJEXT) \
	quake_x11-common.$(OBJEXT) quake_x11-console.$(OBJEXT) \
	quake_x11-crc.$(OBJEXT) quake_x11-cvar.$(OBJEXT) \
	quake_x11-draw.$(OBJEXT) quake_x11-d_edge.$(OBJEXT) \
	quake_x11-d_fill.$(OBJEXT) quake_x11-d_init.$(OBJEXT) \
	quake_x11-d_modech.$(OBJEXT) quake_x11-d_part.$(OBJEXT) \
	quake_x11-d_polyse.$(OBJEXT) quake_x11-d_scan.$(OBJEXT) \
	quake_x11-d_sky.$(OBJEXT) quake_x11-d_sprite.$(OBJEXT) \
	quake_x11-d_surf.$(OBJEXT) quake_x11-d_vars.$(OBJEXT) \
	quake_x11-d_zpoint.$(OBJEXT) quake_x11-host.$(OBJEXT) \
	quake_x11-host_cmd.$(OBJEXT) quake_x11-iplog.$(OBJEXT) \
	quake_x11-keys.$(OBJEXT) quake_x11-location.$(OBJEXT) \
	quake_x11-matrix.$(OBJEXT) quake_x11-menu.$(OBJEXT) \
	quake_x11-mathlib.$(OBJEXT) quake_x11-model.$(OBJEXT) \
	quake_x11-net_dgrm.$(OBJEXT) quake_x11-net_loop.$(OBJEXT) \
	quake_x11-net_main.$(OBJEXT) quake_x11-net_vcr.$(OBJEXT) \
	quake_x11-net_udp.$(OBJEXT) quake_x11-net_bsd.$(OBJEXT) \
	quake_x11-nonintel.$(OBJEXT) quake_x11-pr_cmds.$(OBJEXT) \
	quake_x11-pr_edict.$(OBJEXT) quake_x11-pr_exec.$(OBJEXT) \
	quake_x11-r_aclip.$(OBJEXT) quake_x11-r_alias.$(OBJEXT) \
	quake_x11-r_bsp.$(OBJEXT) quake_x11-r_light.$(OBJEXT) \
	quake_x11-r_draw.$(OBJEXT) quake_x11-r_efrag.$(OBJEXT) \
	quake_x11-r_edge.$(OBJEXT) quake_x11-r_misc.$(OBJEXT) \
	quake_x11-r_main.$(OBJEXT) quake_x11-r_sky.$(OBJEXT) \
	quake_x11-r_sprite.$(OBJEXT) quake_x11-r_surf.$(OBJEXT) \
	quake_x11-r_part.$(OBJEXT) quake_x11-r_vars.$(OBJEXT) \
	quake_x11-screen.$(OBJEXT) quake_x11-sbar.$(OBJEXT) \
	quake_x11-security.$(OBJEXT) quake_x11-sv_main.$(OBJEXT) \
	quake_x11-sv_phys.$(OBJEXT) quake_x11-sv_move.$(OBJEXT) \
	quake_x11-sv_user.$(OBJEXT) quake_x11-zone.$(OBJEXT) \
	quake_x11-view.$(OBJEXT) quake_x11-wad.$(OBJEXT) \
	quake_x11-world.$(OBJEXT) quake_x11-cd_linux.$(OBJEXT) \
	quake_x11-sys_linux.$(OBJEXT) quake_x11-vid_x.$(OBJEXT) \
	quake_x11-snd_dma.$(OBJEXT) quake_x11-snd_mem.$(OBJEXT) \
	quake_x11-snd_mix.$(OBJEXT) quake_x11-snd_linux.$(OBJEXT) \
	quake_x11-d_draw.$(OBJEXT) quake_x11-d_draw16.$(OBJEXT) \
	quake_x11-d_parta.$(OBJEXT) quake_x11-d_polysa.$(OBJEXT) \
	quake_x11-d_scana.$(OBJEXT) quake_x11-d_spr8.$(OBJEXT) \
	quake_x11-d_varsa.$(OBJEXT) quake_x11-math.$(OBJEXT) \
	quake_x11-r_aliasa.$(OBJEXT) quake_x11-r_drawa.$(OBJEXT) \
	quake_x11-r_edgea.$(OBJEXT) quake_x11-r_varsa.$(OBJEXT) \
	quake_x11-surf16.$(OBJEXT) quake_x11-surf8.$(OBJEXT) \
	quake_x11-worlda.$(OBJEXT) quake_x11-r_aclipa.$(OBJEXT) \
	quake_x11-snd_mixa.$(OBJEXT) quake_x11-sys_dosa.$(OBJEXT)
quake_x11_OBJECTS = $(am_quake_x11_OBJECTS)
quake_x11_DEPENDENCIES =
am_unixded_OBJECTS = unixded-cl_demo.$(OBJEXT) \
	unixded-cl_input.$(OBJEXT) unixded-cl_main.$(OBJEXT) \
	unixded-cl_parse.$(OBJEXT) unixded-cl_tent.$(OBJEXT) \
	unixded-chase.$(OBJEXT) unixded-cmd.$(OBJEXT) \
	unixded-common.$(OBJEXT) unixded-console.$(OBJEXT) \
	unixded-crc.$(OBJEXT) unixded-cvar.$(OBJEXT) \
	unixded-draw.$(OBJEXT) unixded-d_edge.$(OBJEXT) \
	unixded-d_fill.$(OBJEXT) unixded-d_init.$(OBJEXT) \
	unixded-d_modech.$(OBJEXT) unixded-d_part.$(OBJEXT) \
	unixded-d_polyse.$(OBJEXT) unixded-d_scan.$(OBJEXT) \
	unixded-d_sky.$(OBJEXT) unixded-d_sprite.$(OBJEXT) \
	unixded-d_surf.$(OBJEXT) unixded-d_vars.$(OBJEXT) \
	unixded-d_zpoint.$(OBJEXT) unixded-host.$(OBJEXT) \
	unixded-host_cmd.$(OBJEXT) unixded-iplog.$(OBJEXT) \
	unixded-keys.$(OBJEXT) unixded-location.$(OBJEXT) \
	unixded-matrix.$(OBJEXT) unixded-mathlib.$(OBJEXT) \
	unixded-menu.$(OBJEXT) unixded-model.$(OBJEXT) \
	unixded-net_bsd.$(OBJEXT) unixded-net_dgrm.$(OBJEXT) \
	unixded-net_loop.$(OBJEXT) unixded-net_main.$(OBJEXT) \
	unixded-net_udp.$(OBJEXT) unixded-net_vcr.$(OBJEXT) \
	unixded-nonintel.$(OBJEXT) unixded-pr_cmds.$(OBJEXT) \
	unixded-pr_edict.$(OBJEXT) unixded-pr_exec.$(OBJEXT) \
	unixded-r_aclip.$(OBJEXT) unixded-r_alias.$(OBJEXT) \
	unixded-r_bsp.$(OBJEXT) unixded-r_light.$(OBJEXT) \
	unixded-r_draw.$(OBJEXT) unixded-r_efrag.$(OBJEXT) \
	unixded-r_edge.$(OBJEXT) unixded-r_misc.$(OBJEXT) \
	unixded-r_main.$(OBJEXT) unixded-r_sky.$(OBJEXT) \
	unixded-r_sprite.$(OBJEXT) unixded-r_surf.$(OBJEXT) \
	unixded-r_part.$(OBJEXT) unixded-r_vars.$(OBJEXT) \
	unixded-sbar.$(OBJEXT) unixded-screen.$(OBJEXT) \
	unixded-security.$(OBJEXT) unixded-sv_main.$(OBJEXT) \
	unixded-sv_phys.$(OBJEXT) unixded-sv_move.$(OBJEXT) \
	unixded-sv_user.$(OBJEXT) unixded-sys_unixd.$(OBJEXT) \
	unixded-view.$(OBJEXT) unixded-wad.$(OBJEXT) \
	unixded-world.$(OBJEXT) unixded-cd_null.$(OBJEXT) \
	unixded-vid_null.$(OBJEXT) unixded-snd_null.$(OBJEXT) \
	unixded-in_null.$(OBJEXT) unixded-zone.$(OBJEXT)
unixded_OBJECTS = $(am_unixded_OBJECTS)
unixded_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)
SOURCES = $(glquake_glx_SOURCES) $(quake_x11_SOURCES) \
	$(unixded_SOURCES)
DIST_SOURCES = $(glquake_glx_SOURCES) $(quake_x11_SOURCES) \
	$(unixded_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d $(distdir) \
    || { find $(distdir) -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr $(distdir); }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run tar
AUTOCONF = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run autoconf
AUTOHEADER = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run autoheader
AUTOMAKE = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run automake-1.9
AWK = mawk
CC = gcc
CCAS = gcc
CCASFLAGS = -g -O2
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CYGPATH_W = echo
DEFS = 
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /home/baker/Desktop/pqlinuxserver/missing --run makeinfo
OBJEXT = o
PACKAGE = glpro
PACKAGE_BUGREPORT = 
PACKAGE_NAME = glpro
PACKAGE_STRING = glpro 3.50
PACKAGE_TARNAME = glpro
PACKAGE_VERSION = 3.50
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
VERSION = 3.50
ac_ct_CC = gcc
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/baker/Desktop/pqlinuxserver/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
#bin_PROGRAMS = quake_x11
glquake_glx_SOURCES = \
  cl_demo.c            \
  cl_input.c           \
  cl_main.c            \
  cl_parse.c           \
  cl_tent.c            \
  chase.c              \
	cmd.c                \
	common.c             \
	console.c            \
	crc.c                \
	cvar.c               \
	gl_draw.c            \
	gl_mesh.c            \
	gl_model.c           \
	gl_refrag.c          \
	gl_rlight.c          \
	gl_rmain.c           \
	gl_rmisc.c           \
	gl_rsurf.c           \
	gl_screen.c          \
	gl_test.c            \
	gl_warp.c            \
	gl_vidlinuxglx.c     \
	host.c               \
	host_cmd.c           \
	iplog.c              \
	keys.c               \
	location.c           \
	matrix.c             \
	menu.c               \
	mathlib.c            \
	net_dgrm.c           \
	net_main.c           \
	net_loop.c           \
	net_vcr.c            \
	net_udp.c            \
	net_bsd.c            \
	pr_cmds.c            \
	pr_edict.c           \
	pr_exec.c            \
	r_part.c             \
	sbar.c               \
	security.c           \
	sv_main.c            \
	sv_phys.c            \
	sv_move.c            \
	sv_user.c            \
	zone.c               \
	view.c               \
	wad.c                \
	world.c              \
	cd_linux.c           \
	sys_linux.c          \
	snd_dma.c            \
	snd_mem.c            \
	snd_mix.c            \
	snd_linux.c          \
	math.s               \
	worlda.s             \
	snd_mixa.s           \
	sys_dosa.s

quake_x11_SOURCES = \
	cl_demo.c            \
	cl_input.c           \
	cl_main.c            \
	cl_parse.c           \
	cl_tent.c            \
	chase.c              \
	cmd.c                \
	common.c             \
	console.c            \
	crc.c                \
	cvar.c               \
	draw.c               \
	d_edge.c             \
	d_fill.c             \
	d_init.c             \
	d_modech.c           \
	d_part.c             \
	d_polyse.c           \
	d_scan.c             \
	d_sky.c              \
	d_sprite.c           \
	d_surf.c             \
	d_vars.c             \
	d_zpoint.c           \
	host.c               \
	host_cmd.c           \
	iplog.c              \
	keys.c               \
	location.c           \
	matrix.c             \
	menu.c               \
	mathlib.c            \
	model.c              \
	net_dgrm.c           \
	net_loop.c           \
	net_main.c           \
	net_vcr.c            \
	net_udp.c            \
	net_bsd.c            \
	nonintel.c           \
	pr_cmds.c            \
	pr_edict.c           \
	pr_exec.c            \
	r_aclip.c            \
	r_alias.c            \
	r_bsp.c              \
	r_light.c            \
	r_draw.c             \
	r_efrag.c            \
	r_edge.c             \
	r_misc.c             \
	r_main.c             \
	r_sky.c              \
	r_sprite.c           \
	r_surf.c             \
	r_part.c             \
	r_vars.c             \
	screen.c             \
	sbar.c               \
	security.c           \
	sv_main.c            \
	sv_phys.c            \
	sv_move.c            \
	sv_user.c            \
	zone.c	             \
	view.c	             \
	wad.c                \
	world.c              \
	cd_linux.c           \
	sys_linux.c          \
	vid_x.c              \
	snd_dma.c            \
	snd_mem.c            \
	snd_mix.c            \
	snd_linux.c          \
	d_draw.s             \
	d_draw16.s           \
	d_parta.s            \
	d_polysa.s           \
	d_scana.s            \
	d_spr8.s             \
	d_varsa.s            \
	math.s               \
	r_aliasa.s           \
	r_drawa.s            \
	r_edgea.s            \
	r_varsa.s            \
	surf16.s             \
	surf8.s              \
	worlda.s             \
	r_aclipa.s           \
	snd_mixa.s           \
	sys_dosa.s

unixded_SOURCES = \
  cl_demo.c            \
	cl_input.c           \
  cl_main.c            \
	cl_parse.c           \
	cl_tent.c            \
	chase.c              \
  cmd.c                \
  common.c             \
	console.c            \
	crc.c                \
	cvar.c               \
	draw.c               \
	d_edge.c             \
	d_fill.c             \
	d_init.c             \
	d_modech.c           \
	d_part.c             \
	d_polyse.c           \
	d_scan.c             \
	d_sky.c              \
	d_sprite.c           \
	d_surf.c             \
	d_vars.c             \
	d_zpoint.c           \
	host.c               \
	host_cmd.c           \
	iplog.c              \
	keys.c               \
	location.c           \
	matrix.c             \
	mathlib.c            \
	menu.c               \
	model.c              \
	net_bsd.c            \
	net_dgrm.c           \
	net_loop.c           \
	net_main.c           \
	net_udp.c            \
	net_vcr.c            \
	nonintel.c           \
	pr_cmds.c            \
	pr_edict.c           \
	pr_exec.c            \
	r_aclip.c            \
	r_alias.c            \
	r_bsp.c              \
	r_light.c            \
	r_draw.c             \
	r_efrag.c            \
	r_edge.c             \
	r_misc.c             \
	r_main.c             \
	r_sky.c              \
	r_sprite.c           \
	r_surf.c             \
	r_part.c             \
	r_vars.c             \
	sbar.c               \
	screen.c             \
	security.c           \
	sv_main.c            \
	sv_phys.c            \
	sv_move.c            \
	sv_user.c            \
  sys_unixd.c          \
	view.c               \
	wad.c                \
	world.c              \
	cd_null.c            \
	vid_null.c           \
	snd_null.c           \
	in_null.c            \
  zone.c

glquake_glx_CFLAGS = -DPQLINUX -DGLQUAKE -Dstricmp=strcasecmp -D_stricmp=strcasecmp
glquake_glx_CCASFLAGS = -DELF -x assembler-with-cpp
glquake_glx_LDADD = -L/usr/X11/lib -L/usr/local/lib -lGL -lX11 -lXext -ldl -lXxf86dga -lXxf86vm -lm
quake_x11_CFLAGS = -DX11
quake_x11_CCASFLAGS = -DELF -x assembler-with-cpp
quake_x11_LDADD = -L/usr/X11R6/lib -lX11 -lXext -lXxf86dga -lm
unixded_CFLAGS = -DPQLINUX -Did386=0 -Dstricmp=strcasecmp -D_stricmp=strcasecmp -DDEBUG=1
unixded_CCASFLAGS = -DELF -x assembler-with-cpp
unixded_LDADD = -lm -ldl
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj .s
am--refresh:
	@:
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --gnu '; \
	      cd $(srcdir) && $(AUTOMAKE) --gnu  \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
glquake_glx$(EXEEXT): $(glquake_glx_OBJECTS) $(glquake_glx_DEPENDENCIES) 
	@rm -f glquake_glx$(EXEEXT)
	$(LINK) $(glquake_glx_LDFLAGS) $(glquake_glx_OBJECTS) $(glquake_glx_LDADD) $(LIBS)
quake_x11$(EXEEXT): $(quake_x11_OBJECTS) $(quake_x11_DEPENDENCIES) 
	@rm -f quake_x11$(EXEEXT)
	$(LINK) $(quake_x11_LDFLAGS) $(quake_x11_OBJECTS) $(quake_x11_LDADD) $(LIBS)
unixded$(EXEEXT): $(unixded_OBJECTS) $(unixded_DEPENDENCIES) 
	@rm -f unixded$(EXEEXT)
	$(LINK) $(unixded_LDFLAGS) $(unixded_OBJECTS) $(unixded_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/glquake_glx-cd_linux.Po
include ./$(DEPDIR)/glquake_glx-chase.Po
include ./$(DEPDIR)/glquake_glx-cl_demo.Po
include ./$(DEPDIR)/glquake_glx-cl_input.Po
include ./$(DEPDIR)/glquake_glx-cl_main.Po
include ./$(DEPDIR)/glquake_glx-cl_parse.Po
include ./$(DEPDIR)/glquake_glx-cl_tent.Po
include ./$(DEPDIR)/glquake_glx-cmd.Po
include ./$(DEPDIR)/glquake_glx-common.Po
include ./$(DEPDIR)/glquake_glx-console.Po
include ./$(DEPDIR)/glquake_glx-crc.Po
include ./$(DEPDIR)/glquake_glx-cvar.Po
include ./$(DEPDIR)/glquake_glx-gl_draw.Po
include ./$(DEPDIR)/glquake_glx-gl_mesh.Po
include ./$(DEPDIR)/glquake_glx-gl_model.Po
include ./$(DEPDIR)/glquake_glx-gl_refrag.Po
include ./$(DEPDIR)/glquake_glx-gl_rlight.Po
include ./$(DEPDIR)/glquake_glx-gl_rmain.Po
include ./$(DEPDIR)/glquake_glx-gl_rmisc.Po
include ./$(DEPDIR)/glquake_glx-gl_rsurf.Po
include ./$(DEPDIR)/glquake_glx-gl_screen.Po
include ./$(DEPDIR)/glquake_glx-gl_test.Po
include ./$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Po
include ./$(DEPDIR)/glquake_glx-gl_warp.Po
include ./$(DEPDIR)/glquake_glx-host.Po
include ./$(DEPDIR)/glquake_glx-host_cmd.Po
include ./$(DEPDIR)/glquake_glx-iplog.Po
include ./$(DEPDIR)/glquake_glx-keys.Po
include ./$(DEPDIR)/glquake_glx-location.Po
include ./$(DEPDIR)/glquake_glx-mathlib.Po
include ./$(DEPDIR)/glquake_glx-matrix.Po
include ./$(DEPDIR)/glquake_glx-menu.Po
include ./$(DEPDIR)/glquake_glx-net_bsd.Po
include ./$(DEPDIR)/glquake_glx-net_dgrm.Po
include ./$(DEPDIR)/glquake_glx-net_loop.Po
include ./$(DEPDIR)/glquake_glx-net_main.Po
include ./$(DEPDIR)/glquake_glx-net_udp.Po
include ./$(DEPDIR)/glquake_glx-net_vcr.Po
include ./$(DEPDIR)/glquake_glx-pr_cmds.Po
include ./$(DEPDIR)/glquake_glx-pr_edict.Po
include ./$(DEPDIR)/glquake_glx-pr_exec.Po
include ./$(DEPDIR)/glquake_glx-r_part.Po
include ./$(DEPDIR)/glquake_glx-sbar.Po
include ./$(DEPDIR)/glquake_glx-security.Po
include ./$(DEPDIR)/glquake_glx-snd_dma.Po
include ./$(DEPDIR)/glquake_glx-snd_linux.Po
include ./$(DEPDIR)/glquake_glx-snd_mem.Po
include ./$(DEPDIR)/glquake_glx-snd_mix.Po
include ./$(DEPDIR)/glquake_glx-sv_main.Po
include ./$(DEPDIR)/glquake_glx-sv_move.Po
include ./$(DEPDIR)/glquake_glx-sv_phys.Po
include ./$(DEPDIR)/glquake_glx-sv_user.Po
include ./$(DEPDIR)/glquake_glx-sys_linux.Po
include ./$(DEPDIR)/glquake_glx-view.Po
include ./$(DEPDIR)/glquake_glx-wad.Po
include ./$(DEPDIR)/glquake_glx-world.Po
include ./$(DEPDIR)/glquake_glx-zone.Po
include ./$(DEPDIR)/quake_x11-cd_linux.Po
include ./$(DEPDIR)/quake_x11-chase.Po
include ./$(DEPDIR)/quake_x11-cl_demo.Po
include ./$(DEPDIR)/quake_x11-cl_input.Po
include ./$(DEPDIR)/quake_x11-cl_main.Po
include ./$(DEPDIR)/quake_x11-cl_parse.Po
include ./$(DEPDIR)/quake_x11-cl_tent.Po
include ./$(DEPDIR)/quake_x11-cmd.Po
include ./$(DEPDIR)/quake_x11-common.Po
include ./$(DEPDIR)/quake_x11-console.Po
include ./$(DEPDIR)/quake_x11-crc.Po
include ./$(DEPDIR)/quake_x11-cvar.Po
include ./$(DEPDIR)/quake_x11-d_edge.Po
include ./$(DEPDIR)/quake_x11-d_fill.Po
include ./$(DEPDIR)/quake_x11-d_init.Po
include ./$(DEPDIR)/quake_x11-d_modech.Po
include ./$(DEPDIR)/quake_x11-d_part.Po
include ./$(DEPDIR)/quake_x11-d_polyse.Po
include ./$(DEPDIR)/quake_x11-d_scan.Po
include ./$(DEPDIR)/quake_x11-d_sky.Po
include ./$(DEPDIR)/quake_x11-d_sprite.Po
include ./$(DEPDIR)/quake_x11-d_surf.Po
include ./$(DEPDIR)/quake_x11-d_vars.Po
include ./$(DEPDIR)/quake_x11-d_zpoint.Po
include ./$(DEPDIR)/quake_x11-draw.Po
include ./$(DEPDIR)/quake_x11-host.Po
include ./$(DEPDIR)/quake_x11-host_cmd.Po
include ./$(DEPDIR)/quake_x11-iplog.Po
include ./$(DEPDIR)/quake_x11-keys.Po
include ./$(DEPDIR)/quake_x11-location.Po
include ./$(DEPDIR)/quake_x11-mathlib.Po
include ./$(DEPDIR)/quake_x11-matrix.Po
include ./$(DEPDIR)/quake_x11-menu.Po
include ./$(DEPDIR)/quake_x11-model.Po
include ./$(DEPDIR)/quake_x11-net_bsd.Po
include ./$(DEPDIR)/quake_x11-net_dgrm.Po
include ./$(DEPDIR)/quake_x11-net_loop.Po
include ./$(DEPDIR)/quake_x11-net_main.Po
include ./$(DEPDIR)/quake_x11-net_udp.Po
include ./$(DEPDIR)/quake_x11-net_vcr.Po
include ./$(DEPDIR)/quake_x11-nonintel.Po
include ./$(DEPDIR)/quake_x11-pr_cmds.Po
include ./$(DEPDIR)/quake_x11-pr_edict.Po
include ./$(DEPDIR)/quake_x11-pr_exec.Po
include ./$(DEPDIR)/quake_x11-r_aclip.Po
include ./$(DEPDIR)/quake_x11-r_alias.Po
include ./$(DEPDIR)/quake_x11-r_bsp.Po
include ./$(DEPDIR)/quake_x11-r_draw.Po
include ./$(DEPDIR)/quake_x11-r_edge.Po
include ./$(DEPDIR)/quake_x11-r_efrag.Po
include ./$(DEPDIR)/quake_x11-r_light.Po
include ./$(DEPDIR)/quake_x11-r_main.Po
include ./$(DEPDIR)/quake_x11-r_misc.Po
include ./$(DEPDIR)/quake_x11-r_part.Po
include ./$(DEPDIR)/quake_x11-r_sky.Po
include ./$(DEPDIR)/quake_x11-r_sprite.Po
include ./$(DEPDIR)/quake_x11-r_surf.Po
include ./$(DEPDIR)/quake_x11-r_vars.Po
include ./$(DEPDIR)/quake_x11-sbar.Po
include ./$(DEPDIR)/quake_x11-screen.Po
include ./$(DEPDIR)/quake_x11-security.Po
include ./$(DEPDIR)/quake_x11-snd_dma.Po
include ./$(DEPDIR)/quake_x11-snd_linux.Po
include ./$(DEPDIR)/quake_x11-snd_mem.Po
include ./$(DEPDIR)/quake_x11-snd_mix.Po
include ./$(DEPDIR)/quake_x11-sv_main.Po
include ./$(DEPDIR)/quake_x11-sv_move.Po
include ./$(DEPDIR)/quake_x11-sv_phys.Po
include ./$(DEPDIR)/quake_x11-sv_user.Po
include ./$(DEPDIR)/quake_x11-sys_linux.Po
include ./$(DEPDIR)/quake_x11-vid_x.Po
include ./$(DEPDIR)/quake_x11-view.Po
include ./$(DEPDIR)/quake_x11-wad.Po
include ./$(DEPDIR)/quake_x11-world.Po
include ./$(DEPDIR)/quake_x11-zone.Po
include ./$(DEPDIR)/unixded-cd_null.Po
include ./$(DEPDIR)/unixded-chase.Po
include ./$(DEPDIR)/unixded-cl_demo.Po
include ./$(DEPDIR)/unixded-cl_input.Po
include ./$(DEPDIR)/unixded-cl_main.Po
include ./$(DEPDIR)/unixded-cl_parse.Po
include ./$(DEPDIR)/unixded-cl_tent.Po
include ./$(DEPDIR)/unixded-cmd.Po
include ./$(DEPDIR)/unixded-common.Po
include ./$(DEPDIR)/unixded-console.Po
include ./$(DEPDIR)/unixded-crc.Po
include ./$(DEPDIR)/unixded-cvar.Po
include ./$(DEPDIR)/unixded-d_edge.Po
include ./$(DEPDIR)/unixded-d_fill.Po
include ./$(DEPDIR)/unixded-d_init.Po
include ./$(DEPDIR)/unixded-d_modech.Po
include ./$(DEPDIR)/unixded-d_part.Po
include ./$(DEPDIR)/unixded-d_polyse.Po
include ./$(DEPDIR)/unixded-d_scan.Po
include ./$(DEPDIR)/unixded-d_sky.Po
include ./$(DEPDIR)/unixded-d_sprite.Po
include ./$(DEPDIR)/unixded-d_surf.Po
include ./$(DEPDIR)/unixded-d_vars.Po
include ./$(DEPDIR)/unixded-d_zpoint.Po
include ./$(DEPDIR)/unixded-draw.Po
include ./$(DEPDIR)/unixded-host.Po
include ./$(DEPDIR)/unixded-host_cmd.Po
include ./$(DEPDIR)/unixded-in_null.Po
include ./$(DEPDIR)/unixded-iplog.Po
include ./$(DEPDIR)/unixded-keys.Po
include ./$(DEPDIR)/unixded-location.Po
include ./$(DEPDIR)/unixded-mathlib.Po
include ./$(DEPDIR)/unixded-matrix.Po
include ./$(DEPDIR)/unixded-menu.Po
include ./$(DEPDIR)/unixded-model.Po
include ./$(DEPDIR)/unixded-net_bsd.Po
include ./$(DEPDIR)/unixded-net_dgrm.Po
include ./$(DEPDIR)/unixded-net_loop.Po
include ./$(DEPDIR)/unixded-net_main.Po
include ./$(DEPDIR)/unixded-net_udp.Po
include ./$(DEPDIR)/unixded-net_vcr.Po
include ./$(DEPDIR)/unixded-nonintel.Po
include ./$(DEPDIR)/unixded-pr_cmds.Po
include ./$(DEPDIR)/unixded-pr_edict.Po
include ./$(DEPDIR)/unixded-pr_exec.Po
include ./$(DEPDIR)/unixded-r_aclip.Po
include ./$(DEPDIR)/unixded-r_alias.Po
include ./$(DEPDIR)/unixded-r_bsp.Po
include ./$(DEPDIR)/unixded-r_draw.Po
include ./$(DEPDIR)/unixded-r_edge.Po
include ./$(DEPDIR)/unixded-r_efrag.Po
include ./$(DEPDIR)/unixded-r_light.Po
include ./$(DEPDIR)/unixded-r_main.Po
include ./$(DEPDIR)/unixded-r_misc.Po
include ./$(DEPDIR)/unixded-r_part.Po
include ./$(DEPDIR)/unixded-r_sky.Po
include ./$(DEPDIR)/unixded-r_sprite.Po
include ./$(DEPDIR)/unixded-r_surf.Po
include ./$(DEPDIR)/unixded-r_vars.Po
include ./$(DEPDIR)/unixded-sbar.Po
include ./$(DEPDIR)/unixded-screen.Po
include ./$(DEPDIR)/unixded-security.Po
include ./$(DEPDIR)/unixded-snd_null.Po
include ./$(DEPDIR)/unixded-sv_main.Po
include ./$(DEPDIR)/unixded-sv_move.Po
include ./$(DEPDIR)/unixded-sv_phys.Po
include ./$(DEPDIR)/unixded-sv_user.Po
include ./$(DEPDIR)/unixded-sys_unixd.Po
include ./$(DEPDIR)/unixded-vid_null.Po
include ./$(DEPDIR)/unixded-view.Po
include ./$(DEPDIR)/unixded-wad.Po
include ./$(DEPDIR)/unixded-world.Po
include ./$(DEPDIR)/unixded-zone.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

glquake_glx-cl_demo.o: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_demo.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_demo.Tpo" -c -o glquake_glx-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_demo.Tpo" "$(DEPDIR)/glquake_glx-cl_demo.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='glquake_glx-cl_demo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c

glquake_glx-cl_demo.obj: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_demo.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_demo.Tpo" -c -o glquake_glx-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_demo.Tpo" "$(DEPDIR)/glquake_glx-cl_demo.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='glquake_glx-cl_demo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`

glquake_glx-cl_input.o: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_input.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_input.Tpo" -c -o glquake_glx-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_input.Tpo" "$(DEPDIR)/glquake_glx-cl_input.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='glquake_glx-cl_input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c

glquake_glx-cl_input.obj: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_input.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_input.Tpo" -c -o glquake_glx-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_input.Tpo" "$(DEPDIR)/glquake_glx-cl_input.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='glquake_glx-cl_input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`

glquake_glx-cl_main.o: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_main.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_main.Tpo" -c -o glquake_glx-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_main.Tpo" "$(DEPDIR)/glquake_glx-cl_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='glquake_glx-cl_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c

glquake_glx-cl_main.obj: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_main.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_main.Tpo" -c -o glquake_glx-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_main.Tpo" "$(DEPDIR)/glquake_glx-cl_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='glquake_glx-cl_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`

glquake_glx-cl_parse.o: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_parse.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_parse.Tpo" -c -o glquake_glx-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_parse.Tpo" "$(DEPDIR)/glquake_glx-cl_parse.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='glquake_glx-cl_parse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c

glquake_glx-cl_parse.obj: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_parse.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_parse.Tpo" -c -o glquake_glx-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_parse.Tpo" "$(DEPDIR)/glquake_glx-cl_parse.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='glquake_glx-cl_parse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`

glquake_glx-cl_tent.o: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_tent.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_tent.Tpo" -c -o glquake_glx-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_tent.Tpo" "$(DEPDIR)/glquake_glx-cl_tent.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='glquake_glx-cl_tent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c

glquake_glx-cl_tent.obj: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cl_tent.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cl_tent.Tpo" -c -o glquake_glx-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cl_tent.Tpo" "$(DEPDIR)/glquake_glx-cl_tent.Po"; else rm -f "$(DEPDIR)/glquake_glx-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='glquake_glx-cl_tent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`

glquake_glx-chase.o: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-chase.o -MD -MP -MF "$(DEPDIR)/glquake_glx-chase.Tpo" -c -o glquake_glx-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c; \
	then mv -f "$(DEPDIR)/glquake_glx-chase.Tpo" "$(DEPDIR)/glquake_glx-chase.Po"; else rm -f "$(DEPDIR)/glquake_glx-chase.Tpo"; exit 1; fi
#	source='chase.c' object='glquake_glx-chase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c

glquake_glx-chase.obj: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-chase.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-chase.Tpo" -c -o glquake_glx-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-chase.Tpo" "$(DEPDIR)/glquake_glx-chase.Po"; else rm -f "$(DEPDIR)/glquake_glx-chase.Tpo"; exit 1; fi
#	source='chase.c' object='glquake_glx-chase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`

glquake_glx-cmd.o: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cmd.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cmd.Tpo" -c -o glquake_glx-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cmd.Tpo" "$(DEPDIR)/glquake_glx-cmd.Po"; else rm -f "$(DEPDIR)/glquake_glx-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='glquake_glx-cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c

glquake_glx-cmd.obj: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cmd.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cmd.Tpo" -c -o glquake_glx-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cmd.Tpo" "$(DEPDIR)/glquake_glx-cmd.Po"; else rm -f "$(DEPDIR)/glquake_glx-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='glquake_glx-cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`

glquake_glx-common.o: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-common.o -MD -MP -MF "$(DEPDIR)/glquake_glx-common.Tpo" -c -o glquake_glx-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c; \
	then mv -f "$(DEPDIR)/glquake_glx-common.Tpo" "$(DEPDIR)/glquake_glx-common.Po"; else rm -f "$(DEPDIR)/glquake_glx-common.Tpo"; exit 1; fi
#	source='common.c' object='glquake_glx-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c

glquake_glx-common.obj: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-common.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-common.Tpo" -c -o glquake_glx-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-common.Tpo" "$(DEPDIR)/glquake_glx-common.Po"; else rm -f "$(DEPDIR)/glquake_glx-common.Tpo"; exit 1; fi
#	source='common.c' object='glquake_glx-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`

glquake_glx-console.o: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-console.o -MD -MP -MF "$(DEPDIR)/glquake_glx-console.Tpo" -c -o glquake_glx-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c; \
	then mv -f "$(DEPDIR)/glquake_glx-console.Tpo" "$(DEPDIR)/glquake_glx-console.Po"; else rm -f "$(DEPDIR)/glquake_glx-console.Tpo"; exit 1; fi
#	source='console.c' object='glquake_glx-console.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c

glquake_glx-console.obj: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-console.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-console.Tpo" -c -o glquake_glx-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-console.Tpo" "$(DEPDIR)/glquake_glx-console.Po"; else rm -f "$(DEPDIR)/glquake_glx-console.Tpo"; exit 1; fi
#	source='console.c' object='glquake_glx-console.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`

glquake_glx-crc.o: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-crc.o -MD -MP -MF "$(DEPDIR)/glquake_glx-crc.Tpo" -c -o glquake_glx-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c; \
	then mv -f "$(DEPDIR)/glquake_glx-crc.Tpo" "$(DEPDIR)/glquake_glx-crc.Po"; else rm -f "$(DEPDIR)/glquake_glx-crc.Tpo"; exit 1; fi
#	source='crc.c' object='glquake_glx-crc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c

glquake_glx-crc.obj: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-crc.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-crc.Tpo" -c -o glquake_glx-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-crc.Tpo" "$(DEPDIR)/glquake_glx-crc.Po"; else rm -f "$(DEPDIR)/glquake_glx-crc.Tpo"; exit 1; fi
#	source='crc.c' object='glquake_glx-crc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`

glquake_glx-cvar.o: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cvar.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cvar.Tpo" -c -o glquake_glx-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cvar.Tpo" "$(DEPDIR)/glquake_glx-cvar.Po"; else rm -f "$(DEPDIR)/glquake_glx-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='glquake_glx-cvar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c

glquake_glx-cvar.obj: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cvar.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cvar.Tpo" -c -o glquake_glx-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cvar.Tpo" "$(DEPDIR)/glquake_glx-cvar.Po"; else rm -f "$(DEPDIR)/glquake_glx-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='glquake_glx-cvar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`

glquake_glx-gl_draw.o: gl_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_draw.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_draw.Tpo" -c -o glquake_glx-gl_draw.o `test -f 'gl_draw.c' || echo '$(srcdir)/'`gl_draw.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_draw.Tpo" "$(DEPDIR)/glquake_glx-gl_draw.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_draw.Tpo"; exit 1; fi
#	source='gl_draw.c' object='glquake_glx-gl_draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_draw.o `test -f 'gl_draw.c' || echo '$(srcdir)/'`gl_draw.c

glquake_glx-gl_draw.obj: gl_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_draw.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_draw.Tpo" -c -o glquake_glx-gl_draw.obj `if test -f 'gl_draw.c'; then $(CYGPATH_W) 'gl_draw.c'; else $(CYGPATH_W) '$(srcdir)/gl_draw.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_draw.Tpo" "$(DEPDIR)/glquake_glx-gl_draw.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_draw.Tpo"; exit 1; fi
#	source='gl_draw.c' object='glquake_glx-gl_draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_draw.obj `if test -f 'gl_draw.c'; then $(CYGPATH_W) 'gl_draw.c'; else $(CYGPATH_W) '$(srcdir)/gl_draw.c'; fi`

glquake_glx-gl_mesh.o: gl_mesh.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_mesh.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_mesh.Tpo" -c -o glquake_glx-gl_mesh.o `test -f 'gl_mesh.c' || echo '$(srcdir)/'`gl_mesh.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_mesh.Tpo" "$(DEPDIR)/glquake_glx-gl_mesh.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_mesh.Tpo"; exit 1; fi
#	source='gl_mesh.c' object='glquake_glx-gl_mesh.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_mesh.o `test -f 'gl_mesh.c' || echo '$(srcdir)/'`gl_mesh.c

glquake_glx-gl_mesh.obj: gl_mesh.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_mesh.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_mesh.Tpo" -c -o glquake_glx-gl_mesh.obj `if test -f 'gl_mesh.c'; then $(CYGPATH_W) 'gl_mesh.c'; else $(CYGPATH_W) '$(srcdir)/gl_mesh.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_mesh.Tpo" "$(DEPDIR)/glquake_glx-gl_mesh.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_mesh.Tpo"; exit 1; fi
#	source='gl_mesh.c' object='glquake_glx-gl_mesh.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_mesh.obj `if test -f 'gl_mesh.c'; then $(CYGPATH_W) 'gl_mesh.c'; else $(CYGPATH_W) '$(srcdir)/gl_mesh.c'; fi`

glquake_glx-gl_model.o: gl_model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_model.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_model.Tpo" -c -o glquake_glx-gl_model.o `test -f 'gl_model.c' || echo '$(srcdir)/'`gl_model.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_model.Tpo" "$(DEPDIR)/glquake_glx-gl_model.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_model.Tpo"; exit 1; fi
#	source='gl_model.c' object='glquake_glx-gl_model.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_model.o `test -f 'gl_model.c' || echo '$(srcdir)/'`gl_model.c

glquake_glx-gl_model.obj: gl_model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_model.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_model.Tpo" -c -o glquake_glx-gl_model.obj `if test -f 'gl_model.c'; then $(CYGPATH_W) 'gl_model.c'; else $(CYGPATH_W) '$(srcdir)/gl_model.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_model.Tpo" "$(DEPDIR)/glquake_glx-gl_model.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_model.Tpo"; exit 1; fi
#	source='gl_model.c' object='glquake_glx-gl_model.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_model.obj `if test -f 'gl_model.c'; then $(CYGPATH_W) 'gl_model.c'; else $(CYGPATH_W) '$(srcdir)/gl_model.c'; fi`

glquake_glx-gl_refrag.o: gl_refrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_refrag.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_refrag.Tpo" -c -o glquake_glx-gl_refrag.o `test -f 'gl_refrag.c' || echo '$(srcdir)/'`gl_refrag.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_refrag.Tpo" "$(DEPDIR)/glquake_glx-gl_refrag.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_refrag.Tpo"; exit 1; fi
#	source='gl_refrag.c' object='glquake_glx-gl_refrag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_refrag.o `test -f 'gl_refrag.c' || echo '$(srcdir)/'`gl_refrag.c

glquake_glx-gl_refrag.obj: gl_refrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_refrag.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_refrag.Tpo" -c -o glquake_glx-gl_refrag.obj `if test -f 'gl_refrag.c'; then $(CYGPATH_W) 'gl_refrag.c'; else $(CYGPATH_W) '$(srcdir)/gl_refrag.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_refrag.Tpo" "$(DEPDIR)/glquake_glx-gl_refrag.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_refrag.Tpo"; exit 1; fi
#	source='gl_refrag.c' object='glquake_glx-gl_refrag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_refrag.obj `if test -f 'gl_refrag.c'; then $(CYGPATH_W) 'gl_refrag.c'; else $(CYGPATH_W) '$(srcdir)/gl_refrag.c'; fi`

glquake_glx-gl_rlight.o: gl_rlight.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rlight.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rlight.Tpo" -c -o glquake_glx-gl_rlight.o `test -f 'gl_rlight.c' || echo '$(srcdir)/'`gl_rlight.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rlight.Tpo" "$(DEPDIR)/glquake_glx-gl_rlight.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rlight.Tpo"; exit 1; fi
#	source='gl_rlight.c' object='glquake_glx-gl_rlight.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rlight.o `test -f 'gl_rlight.c' || echo '$(srcdir)/'`gl_rlight.c

glquake_glx-gl_rlight.obj: gl_rlight.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rlight.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rlight.Tpo" -c -o glquake_glx-gl_rlight.obj `if test -f 'gl_rlight.c'; then $(CYGPATH_W) 'gl_rlight.c'; else $(CYGPATH_W) '$(srcdir)/gl_rlight.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rlight.Tpo" "$(DEPDIR)/glquake_glx-gl_rlight.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rlight.Tpo"; exit 1; fi
#	source='gl_rlight.c' object='glquake_glx-gl_rlight.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rlight.obj `if test -f 'gl_rlight.c'; then $(CYGPATH_W) 'gl_rlight.c'; else $(CYGPATH_W) '$(srcdir)/gl_rlight.c'; fi`

glquake_glx-gl_rmain.o: gl_rmain.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rmain.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rmain.Tpo" -c -o glquake_glx-gl_rmain.o `test -f 'gl_rmain.c' || echo '$(srcdir)/'`gl_rmain.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rmain.Tpo" "$(DEPDIR)/glquake_glx-gl_rmain.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rmain.Tpo"; exit 1; fi
#	source='gl_rmain.c' object='glquake_glx-gl_rmain.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rmain.o `test -f 'gl_rmain.c' || echo '$(srcdir)/'`gl_rmain.c

glquake_glx-gl_rmain.obj: gl_rmain.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rmain.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rmain.Tpo" -c -o glquake_glx-gl_rmain.obj `if test -f 'gl_rmain.c'; then $(CYGPATH_W) 'gl_rmain.c'; else $(CYGPATH_W) '$(srcdir)/gl_rmain.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rmain.Tpo" "$(DEPDIR)/glquake_glx-gl_rmain.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rmain.Tpo"; exit 1; fi
#	source='gl_rmain.c' object='glquake_glx-gl_rmain.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rmain.obj `if test -f 'gl_rmain.c'; then $(CYGPATH_W) 'gl_rmain.c'; else $(CYGPATH_W) '$(srcdir)/gl_rmain.c'; fi`

glquake_glx-gl_rmisc.o: gl_rmisc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rmisc.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo" -c -o glquake_glx-gl_rmisc.o `test -f 'gl_rmisc.c' || echo '$(srcdir)/'`gl_rmisc.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo" "$(DEPDIR)/glquake_glx-gl_rmisc.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo"; exit 1; fi
#	source='gl_rmisc.c' object='glquake_glx-gl_rmisc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rmisc.o `test -f 'gl_rmisc.c' || echo '$(srcdir)/'`gl_rmisc.c

glquake_glx-gl_rmisc.obj: gl_rmisc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rmisc.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo" -c -o glquake_glx-gl_rmisc.obj `if test -f 'gl_rmisc.c'; then $(CYGPATH_W) 'gl_rmisc.c'; else $(CYGPATH_W) '$(srcdir)/gl_rmisc.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo" "$(DEPDIR)/glquake_glx-gl_rmisc.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rmisc.Tpo"; exit 1; fi
#	source='gl_rmisc.c' object='glquake_glx-gl_rmisc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rmisc.obj `if test -f 'gl_rmisc.c'; then $(CYGPATH_W) 'gl_rmisc.c'; else $(CYGPATH_W) '$(srcdir)/gl_rmisc.c'; fi`

glquake_glx-gl_rsurf.o: gl_rsurf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rsurf.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo" -c -o glquake_glx-gl_rsurf.o `test -f 'gl_rsurf.c' || echo '$(srcdir)/'`gl_rsurf.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo" "$(DEPDIR)/glquake_glx-gl_rsurf.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo"; exit 1; fi
#	source='gl_rsurf.c' object='glquake_glx-gl_rsurf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rsurf.o `test -f 'gl_rsurf.c' || echo '$(srcdir)/'`gl_rsurf.c

glquake_glx-gl_rsurf.obj: gl_rsurf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_rsurf.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo" -c -o glquake_glx-gl_rsurf.obj `if test -f 'gl_rsurf.c'; then $(CYGPATH_W) 'gl_rsurf.c'; else $(CYGPATH_W) '$(srcdir)/gl_rsurf.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo" "$(DEPDIR)/glquake_glx-gl_rsurf.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_rsurf.Tpo"; exit 1; fi
#	source='gl_rsurf.c' object='glquake_glx-gl_rsurf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_rsurf.obj `if test -f 'gl_rsurf.c'; then $(CYGPATH_W) 'gl_rsurf.c'; else $(CYGPATH_W) '$(srcdir)/gl_rsurf.c'; fi`

glquake_glx-gl_screen.o: gl_screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_screen.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_screen.Tpo" -c -o glquake_glx-gl_screen.o `test -f 'gl_screen.c' || echo '$(srcdir)/'`gl_screen.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_screen.Tpo" "$(DEPDIR)/glquake_glx-gl_screen.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_screen.Tpo"; exit 1; fi
#	source='gl_screen.c' object='glquake_glx-gl_screen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_screen.o `test -f 'gl_screen.c' || echo '$(srcdir)/'`gl_screen.c

glquake_glx-gl_screen.obj: gl_screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_screen.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_screen.Tpo" -c -o glquake_glx-gl_screen.obj `if test -f 'gl_screen.c'; then $(CYGPATH_W) 'gl_screen.c'; else $(CYGPATH_W) '$(srcdir)/gl_screen.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_screen.Tpo" "$(DEPDIR)/glquake_glx-gl_screen.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_screen.Tpo"; exit 1; fi
#	source='gl_screen.c' object='glquake_glx-gl_screen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_screen.obj `if test -f 'gl_screen.c'; then $(CYGPATH_W) 'gl_screen.c'; else $(CYGPATH_W) '$(srcdir)/gl_screen.c'; fi`

glquake_glx-gl_test.o: gl_test.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_test.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_test.Tpo" -c -o glquake_glx-gl_test.o `test -f 'gl_test.c' || echo '$(srcdir)/'`gl_test.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_test.Tpo" "$(DEPDIR)/glquake_glx-gl_test.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_test.Tpo"; exit 1; fi
#	source='gl_test.c' object='glquake_glx-gl_test.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_test.o `test -f 'gl_test.c' || echo '$(srcdir)/'`gl_test.c

glquake_glx-gl_test.obj: gl_test.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_test.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_test.Tpo" -c -o glquake_glx-gl_test.obj `if test -f 'gl_test.c'; then $(CYGPATH_W) 'gl_test.c'; else $(CYGPATH_W) '$(srcdir)/gl_test.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_test.Tpo" "$(DEPDIR)/glquake_glx-gl_test.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_test.Tpo"; exit 1; fi
#	source='gl_test.c' object='glquake_glx-gl_test.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_test.obj `if test -f 'gl_test.c'; then $(CYGPATH_W) 'gl_test.c'; else $(CYGPATH_W) '$(srcdir)/gl_test.c'; fi`

glquake_glx-gl_warp.o: gl_warp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_warp.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_warp.Tpo" -c -o glquake_glx-gl_warp.o `test -f 'gl_warp.c' || echo '$(srcdir)/'`gl_warp.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_warp.Tpo" "$(DEPDIR)/glquake_glx-gl_warp.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_warp.Tpo"; exit 1; fi
#	source='gl_warp.c' object='glquake_glx-gl_warp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_warp.o `test -f 'gl_warp.c' || echo '$(srcdir)/'`gl_warp.c

glquake_glx-gl_warp.obj: gl_warp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_warp.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_warp.Tpo" -c -o glquake_glx-gl_warp.obj `if test -f 'gl_warp.c'; then $(CYGPATH_W) 'gl_warp.c'; else $(CYGPATH_W) '$(srcdir)/gl_warp.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_warp.Tpo" "$(DEPDIR)/glquake_glx-gl_warp.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_warp.Tpo"; exit 1; fi
#	source='gl_warp.c' object='glquake_glx-gl_warp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_warp.obj `if test -f 'gl_warp.c'; then $(CYGPATH_W) 'gl_warp.c'; else $(CYGPATH_W) '$(srcdir)/gl_warp.c'; fi`

glquake_glx-gl_vidlinuxglx.o: gl_vidlinuxglx.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_vidlinuxglx.o -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo" -c -o glquake_glx-gl_vidlinuxglx.o `test -f 'gl_vidlinuxglx.c' || echo '$(srcdir)/'`gl_vidlinuxglx.c; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo" "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo"; exit 1; fi
#	source='gl_vidlinuxglx.c' object='glquake_glx-gl_vidlinuxglx.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_vidlinuxglx.o `test -f 'gl_vidlinuxglx.c' || echo '$(srcdir)/'`gl_vidlinuxglx.c

glquake_glx-gl_vidlinuxglx.obj: gl_vidlinuxglx.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-gl_vidlinuxglx.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo" -c -o glquake_glx-gl_vidlinuxglx.obj `if test -f 'gl_vidlinuxglx.c'; then $(CYGPATH_W) 'gl_vidlinuxglx.c'; else $(CYGPATH_W) '$(srcdir)/gl_vidlinuxglx.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo" "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Po"; else rm -f "$(DEPDIR)/glquake_glx-gl_vidlinuxglx.Tpo"; exit 1; fi
#	source='gl_vidlinuxglx.c' object='glquake_glx-gl_vidlinuxglx.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-gl_vidlinuxglx.obj `if test -f 'gl_vidlinuxglx.c'; then $(CYGPATH_W) 'gl_vidlinuxglx.c'; else $(CYGPATH_W) '$(srcdir)/gl_vidlinuxglx.c'; fi`

glquake_glx-host.o: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-host.o -MD -MP -MF "$(DEPDIR)/glquake_glx-host.Tpo" -c -o glquake_glx-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c; \
	then mv -f "$(DEPDIR)/glquake_glx-host.Tpo" "$(DEPDIR)/glquake_glx-host.Po"; else rm -f "$(DEPDIR)/glquake_glx-host.Tpo"; exit 1; fi
#	source='host.c' object='glquake_glx-host.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c

glquake_glx-host.obj: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-host.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-host.Tpo" -c -o glquake_glx-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-host.Tpo" "$(DEPDIR)/glquake_glx-host.Po"; else rm -f "$(DEPDIR)/glquake_glx-host.Tpo"; exit 1; fi
#	source='host.c' object='glquake_glx-host.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`

glquake_glx-host_cmd.o: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-host_cmd.o -MD -MP -MF "$(DEPDIR)/glquake_glx-host_cmd.Tpo" -c -o glquake_glx-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c; \
	then mv -f "$(DEPDIR)/glquake_glx-host_cmd.Tpo" "$(DEPDIR)/glquake_glx-host_cmd.Po"; else rm -f "$(DEPDIR)/glquake_glx-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='glquake_glx-host_cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c

glquake_glx-host_cmd.obj: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-host_cmd.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-host_cmd.Tpo" -c -o glquake_glx-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-host_cmd.Tpo" "$(DEPDIR)/glquake_glx-host_cmd.Po"; else rm -f "$(DEPDIR)/glquake_glx-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='glquake_glx-host_cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`

glquake_glx-iplog.o: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-iplog.o -MD -MP -MF "$(DEPDIR)/glquake_glx-iplog.Tpo" -c -o glquake_glx-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c; \
	then mv -f "$(DEPDIR)/glquake_glx-iplog.Tpo" "$(DEPDIR)/glquake_glx-iplog.Po"; else rm -f "$(DEPDIR)/glquake_glx-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='glquake_glx-iplog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c

glquake_glx-iplog.obj: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-iplog.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-iplog.Tpo" -c -o glquake_glx-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-iplog.Tpo" "$(DEPDIR)/glquake_glx-iplog.Po"; else rm -f "$(DEPDIR)/glquake_glx-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='glquake_glx-iplog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`

glquake_glx-keys.o: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-keys.o -MD -MP -MF "$(DEPDIR)/glquake_glx-keys.Tpo" -c -o glquake_glx-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c; \
	then mv -f "$(DEPDIR)/glquake_glx-keys.Tpo" "$(DEPDIR)/glquake_glx-keys.Po"; else rm -f "$(DEPDIR)/glquake_glx-keys.Tpo"; exit 1; fi
#	source='keys.c' object='glquake_glx-keys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c

glquake_glx-keys.obj: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-keys.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-keys.Tpo" -c -o glquake_glx-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-keys.Tpo" "$(DEPDIR)/glquake_glx-keys.Po"; else rm -f "$(DEPDIR)/glquake_glx-keys.Tpo"; exit 1; fi
#	source='keys.c' object='glquake_glx-keys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`

glquake_glx-location.o: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-location.o -MD -MP -MF "$(DEPDIR)/glquake_glx-location.Tpo" -c -o glquake_glx-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c; \
	then mv -f "$(DEPDIR)/glquake_glx-location.Tpo" "$(DEPDIR)/glquake_glx-location.Po"; else rm -f "$(DEPDIR)/glquake_glx-location.Tpo"; exit 1; fi
#	source='location.c' object='glquake_glx-location.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c

glquake_glx-location.obj: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-location.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-location.Tpo" -c -o glquake_glx-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-location.Tpo" "$(DEPDIR)/glquake_glx-location.Po"; else rm -f "$(DEPDIR)/glquake_glx-location.Tpo"; exit 1; fi
#	source='location.c' object='glquake_glx-location.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`

glquake_glx-matrix.o: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-matrix.o -MD -MP -MF "$(DEPDIR)/glquake_glx-matrix.Tpo" -c -o glquake_glx-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c; \
	then mv -f "$(DEPDIR)/glquake_glx-matrix.Tpo" "$(DEPDIR)/glquake_glx-matrix.Po"; else rm -f "$(DEPDIR)/glquake_glx-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='glquake_glx-matrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c

glquake_glx-matrix.obj: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-matrix.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-matrix.Tpo" -c -o glquake_glx-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-matrix.Tpo" "$(DEPDIR)/glquake_glx-matrix.Po"; else rm -f "$(DEPDIR)/glquake_glx-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='glquake_glx-matrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`

glquake_glx-menu.o: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-menu.o -MD -MP -MF "$(DEPDIR)/glquake_glx-menu.Tpo" -c -o glquake_glx-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c; \
	then mv -f "$(DEPDIR)/glquake_glx-menu.Tpo" "$(DEPDIR)/glquake_glx-menu.Po"; else rm -f "$(DEPDIR)/glquake_glx-menu.Tpo"; exit 1; fi
#	source='menu.c' object='glquake_glx-menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c

glquake_glx-menu.obj: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-menu.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-menu.Tpo" -c -o glquake_glx-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-menu.Tpo" "$(DEPDIR)/glquake_glx-menu.Po"; else rm -f "$(DEPDIR)/glquake_glx-menu.Tpo"; exit 1; fi
#	source='menu.c' object='glquake_glx-menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`

glquake_glx-mathlib.o: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-mathlib.o -MD -MP -MF "$(DEPDIR)/glquake_glx-mathlib.Tpo" -c -o glquake_glx-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c; \
	then mv -f "$(DEPDIR)/glquake_glx-mathlib.Tpo" "$(DEPDIR)/glquake_glx-mathlib.Po"; else rm -f "$(DEPDIR)/glquake_glx-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='glquake_glx-mathlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c

glquake_glx-mathlib.obj: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-mathlib.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-mathlib.Tpo" -c -o glquake_glx-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-mathlib.Tpo" "$(DEPDIR)/glquake_glx-mathlib.Po"; else rm -f "$(DEPDIR)/glquake_glx-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='glquake_glx-mathlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`

glquake_glx-net_dgrm.o: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_dgrm.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_dgrm.Tpo" -c -o glquake_glx-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_dgrm.Tpo" "$(DEPDIR)/glquake_glx-net_dgrm.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='glquake_glx-net_dgrm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c

glquake_glx-net_dgrm.obj: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_dgrm.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_dgrm.Tpo" -c -o glquake_glx-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_dgrm.Tpo" "$(DEPDIR)/glquake_glx-net_dgrm.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='glquake_glx-net_dgrm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`

glquake_glx-net_main.o: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_main.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_main.Tpo" -c -o glquake_glx-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_main.Tpo" "$(DEPDIR)/glquake_glx-net_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='glquake_glx-net_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c

glquake_glx-net_main.obj: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_main.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_main.Tpo" -c -o glquake_glx-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_main.Tpo" "$(DEPDIR)/glquake_glx-net_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='glquake_glx-net_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`

glquake_glx-net_loop.o: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_loop.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_loop.Tpo" -c -o glquake_glx-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_loop.Tpo" "$(DEPDIR)/glquake_glx-net_loop.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='glquake_glx-net_loop.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c

glquake_glx-net_loop.obj: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_loop.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_loop.Tpo" -c -o glquake_glx-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_loop.Tpo" "$(DEPDIR)/glquake_glx-net_loop.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='glquake_glx-net_loop.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`

glquake_glx-net_vcr.o: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_vcr.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_vcr.Tpo" -c -o glquake_glx-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_vcr.Tpo" "$(DEPDIR)/glquake_glx-net_vcr.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='glquake_glx-net_vcr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c

glquake_glx-net_vcr.obj: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_vcr.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_vcr.Tpo" -c -o glquake_glx-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_vcr.Tpo" "$(DEPDIR)/glquake_glx-net_vcr.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='glquake_glx-net_vcr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`

glquake_glx-net_udp.o: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_udp.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_udp.Tpo" -c -o glquake_glx-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_udp.Tpo" "$(DEPDIR)/glquake_glx-net_udp.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='glquake_glx-net_udp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c

glquake_glx-net_udp.obj: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_udp.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_udp.Tpo" -c -o glquake_glx-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_udp.Tpo" "$(DEPDIR)/glquake_glx-net_udp.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='glquake_glx-net_udp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`

glquake_glx-net_bsd.o: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_bsd.o -MD -MP -MF "$(DEPDIR)/glquake_glx-net_bsd.Tpo" -c -o glquake_glx-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c; \
	then mv -f "$(DEPDIR)/glquake_glx-net_bsd.Tpo" "$(DEPDIR)/glquake_glx-net_bsd.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='glquake_glx-net_bsd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c

glquake_glx-net_bsd.obj: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-net_bsd.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-net_bsd.Tpo" -c -o glquake_glx-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-net_bsd.Tpo" "$(DEPDIR)/glquake_glx-net_bsd.Po"; else rm -f "$(DEPDIR)/glquake_glx-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='glquake_glx-net_bsd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`

glquake_glx-pr_cmds.o: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_cmds.o -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_cmds.Tpo" -c -o glquake_glx-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_cmds.Tpo" "$(DEPDIR)/glquake_glx-pr_cmds.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='glquake_glx-pr_cmds.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c

glquake_glx-pr_cmds.obj: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_cmds.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_cmds.Tpo" -c -o glquake_glx-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_cmds.Tpo" "$(DEPDIR)/glquake_glx-pr_cmds.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='glquake_glx-pr_cmds.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`

glquake_glx-pr_edict.o: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_edict.o -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_edict.Tpo" -c -o glquake_glx-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_edict.Tpo" "$(DEPDIR)/glquake_glx-pr_edict.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='glquake_glx-pr_edict.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c

glquake_glx-pr_edict.obj: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_edict.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_edict.Tpo" -c -o glquake_glx-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_edict.Tpo" "$(DEPDIR)/glquake_glx-pr_edict.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='glquake_glx-pr_edict.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`

glquake_glx-pr_exec.o: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_exec.o -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_exec.Tpo" -c -o glquake_glx-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_exec.Tpo" "$(DEPDIR)/glquake_glx-pr_exec.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='glquake_glx-pr_exec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c

glquake_glx-pr_exec.obj: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-pr_exec.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-pr_exec.Tpo" -c -o glquake_glx-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-pr_exec.Tpo" "$(DEPDIR)/glquake_glx-pr_exec.Po"; else rm -f "$(DEPDIR)/glquake_glx-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='glquake_glx-pr_exec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`

glquake_glx-r_part.o: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-r_part.o -MD -MP -MF "$(DEPDIR)/glquake_glx-r_part.Tpo" -c -o glquake_glx-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c; \
	then mv -f "$(DEPDIR)/glquake_glx-r_part.Tpo" "$(DEPDIR)/glquake_glx-r_part.Po"; else rm -f "$(DEPDIR)/glquake_glx-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='glquake_glx-r_part.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c

glquake_glx-r_part.obj: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-r_part.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-r_part.Tpo" -c -o glquake_glx-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-r_part.Tpo" "$(DEPDIR)/glquake_glx-r_part.Po"; else rm -f "$(DEPDIR)/glquake_glx-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='glquake_glx-r_part.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`

glquake_glx-sbar.o: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sbar.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sbar.Tpo" -c -o glquake_glx-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sbar.Tpo" "$(DEPDIR)/glquake_glx-sbar.Po"; else rm -f "$(DEPDIR)/glquake_glx-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='glquake_glx-sbar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c

glquake_glx-sbar.obj: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sbar.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sbar.Tpo" -c -o glquake_glx-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sbar.Tpo" "$(DEPDIR)/glquake_glx-sbar.Po"; else rm -f "$(DEPDIR)/glquake_glx-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='glquake_glx-sbar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`

glquake_glx-security.o: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-security.o -MD -MP -MF "$(DEPDIR)/glquake_glx-security.Tpo" -c -o glquake_glx-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c; \
	then mv -f "$(DEPDIR)/glquake_glx-security.Tpo" "$(DEPDIR)/glquake_glx-security.Po"; else rm -f "$(DEPDIR)/glquake_glx-security.Tpo"; exit 1; fi
#	source='security.c' object='glquake_glx-security.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c

glquake_glx-security.obj: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-security.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-security.Tpo" -c -o glquake_glx-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-security.Tpo" "$(DEPDIR)/glquake_glx-security.Po"; else rm -f "$(DEPDIR)/glquake_glx-security.Tpo"; exit 1; fi
#	source='security.c' object='glquake_glx-security.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`

glquake_glx-sv_main.o: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_main.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_main.Tpo" -c -o glquake_glx-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_main.Tpo" "$(DEPDIR)/glquake_glx-sv_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='glquake_glx-sv_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c

glquake_glx-sv_main.obj: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_main.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_main.Tpo" -c -o glquake_glx-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_main.Tpo" "$(DEPDIR)/glquake_glx-sv_main.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='glquake_glx-sv_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`

glquake_glx-sv_phys.o: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_phys.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_phys.Tpo" -c -o glquake_glx-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_phys.Tpo" "$(DEPDIR)/glquake_glx-sv_phys.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='glquake_glx-sv_phys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c

glquake_glx-sv_phys.obj: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_phys.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_phys.Tpo" -c -o glquake_glx-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_phys.Tpo" "$(DEPDIR)/glquake_glx-sv_phys.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='glquake_glx-sv_phys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`

glquake_glx-sv_move.o: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_move.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_move.Tpo" -c -o glquake_glx-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_move.Tpo" "$(DEPDIR)/glquake_glx-sv_move.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='glquake_glx-sv_move.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c

glquake_glx-sv_move.obj: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_move.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_move.Tpo" -c -o glquake_glx-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_move.Tpo" "$(DEPDIR)/glquake_glx-sv_move.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='glquake_glx-sv_move.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`

glquake_glx-sv_user.o: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_user.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_user.Tpo" -c -o glquake_glx-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_user.Tpo" "$(DEPDIR)/glquake_glx-sv_user.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='glquake_glx-sv_user.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c

glquake_glx-sv_user.obj: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sv_user.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sv_user.Tpo" -c -o glquake_glx-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sv_user.Tpo" "$(DEPDIR)/glquake_glx-sv_user.Po"; else rm -f "$(DEPDIR)/glquake_glx-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='glquake_glx-sv_user.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`

glquake_glx-zone.o: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-zone.o -MD -MP -MF "$(DEPDIR)/glquake_glx-zone.Tpo" -c -o glquake_glx-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c; \
	then mv -f "$(DEPDIR)/glquake_glx-zone.Tpo" "$(DEPDIR)/glquake_glx-zone.Po"; else rm -f "$(DEPDIR)/glquake_glx-zone.Tpo"; exit 1; fi
#	source='zone.c' object='glquake_glx-zone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c

glquake_glx-zone.obj: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-zone.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-zone.Tpo" -c -o glquake_glx-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-zone.Tpo" "$(DEPDIR)/glquake_glx-zone.Po"; else rm -f "$(DEPDIR)/glquake_glx-zone.Tpo"; exit 1; fi
#	source='zone.c' object='glquake_glx-zone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`

glquake_glx-view.o: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-view.o -MD -MP -MF "$(DEPDIR)/glquake_glx-view.Tpo" -c -o glquake_glx-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c; \
	then mv -f "$(DEPDIR)/glquake_glx-view.Tpo" "$(DEPDIR)/glquake_glx-view.Po"; else rm -f "$(DEPDIR)/glquake_glx-view.Tpo"; exit 1; fi
#	source='view.c' object='glquake_glx-view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c

glquake_glx-view.obj: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-view.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-view.Tpo" -c -o glquake_glx-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-view.Tpo" "$(DEPDIR)/glquake_glx-view.Po"; else rm -f "$(DEPDIR)/glquake_glx-view.Tpo"; exit 1; fi
#	source='view.c' object='glquake_glx-view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`

glquake_glx-wad.o: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-wad.o -MD -MP -MF "$(DEPDIR)/glquake_glx-wad.Tpo" -c -o glquake_glx-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c; \
	then mv -f "$(DEPDIR)/glquake_glx-wad.Tpo" "$(DEPDIR)/glquake_glx-wad.Po"; else rm -f "$(DEPDIR)/glquake_glx-wad.Tpo"; exit 1; fi
#	source='wad.c' object='glquake_glx-wad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c

glquake_glx-wad.obj: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-wad.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-wad.Tpo" -c -o glquake_glx-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-wad.Tpo" "$(DEPDIR)/glquake_glx-wad.Po"; else rm -f "$(DEPDIR)/glquake_glx-wad.Tpo"; exit 1; fi
#	source='wad.c' object='glquake_glx-wad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`

glquake_glx-world.o: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-world.o -MD -MP -MF "$(DEPDIR)/glquake_glx-world.Tpo" -c -o glquake_glx-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c; \
	then mv -f "$(DEPDIR)/glquake_glx-world.Tpo" "$(DEPDIR)/glquake_glx-world.Po"; else rm -f "$(DEPDIR)/glquake_glx-world.Tpo"; exit 1; fi
#	source='world.c' object='glquake_glx-world.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c

glquake_glx-world.obj: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-world.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-world.Tpo" -c -o glquake_glx-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-world.Tpo" "$(DEPDIR)/glquake_glx-world.Po"; else rm -f "$(DEPDIR)/glquake_glx-world.Tpo"; exit 1; fi
#	source='world.c' object='glquake_glx-world.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`

glquake_glx-cd_linux.o: cd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cd_linux.o -MD -MP -MF "$(DEPDIR)/glquake_glx-cd_linux.Tpo" -c -o glquake_glx-cd_linux.o `test -f 'cd_linux.c' || echo '$(srcdir)/'`cd_linux.c; \
	then mv -f "$(DEPDIR)/glquake_glx-cd_linux.Tpo" "$(DEPDIR)/glquake_glx-cd_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-cd_linux.Tpo"; exit 1; fi
#	source='cd_linux.c' object='glquake_glx-cd_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cd_linux.o `test -f 'cd_linux.c' || echo '$(srcdir)/'`cd_linux.c

glquake_glx-cd_linux.obj: cd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-cd_linux.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-cd_linux.Tpo" -c -o glquake_glx-cd_linux.obj `if test -f 'cd_linux.c'; then $(CYGPATH_W) 'cd_linux.c'; else $(CYGPATH_W) '$(srcdir)/cd_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-cd_linux.Tpo" "$(DEPDIR)/glquake_glx-cd_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-cd_linux.Tpo"; exit 1; fi
#	source='cd_linux.c' object='glquake_glx-cd_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-cd_linux.obj `if test -f 'cd_linux.c'; then $(CYGPATH_W) 'cd_linux.c'; else $(CYGPATH_W) '$(srcdir)/cd_linux.c'; fi`

glquake_glx-sys_linux.o: sys_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sys_linux.o -MD -MP -MF "$(DEPDIR)/glquake_glx-sys_linux.Tpo" -c -o glquake_glx-sys_linux.o `test -f 'sys_linux.c' || echo '$(srcdir)/'`sys_linux.c; \
	then mv -f "$(DEPDIR)/glquake_glx-sys_linux.Tpo" "$(DEPDIR)/glquake_glx-sys_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-sys_linux.Tpo"; exit 1; fi
#	source='sys_linux.c' object='glquake_glx-sys_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sys_linux.o `test -f 'sys_linux.c' || echo '$(srcdir)/'`sys_linux.c

glquake_glx-sys_linux.obj: sys_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-sys_linux.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-sys_linux.Tpo" -c -o glquake_glx-sys_linux.obj `if test -f 'sys_linux.c'; then $(CYGPATH_W) 'sys_linux.c'; else $(CYGPATH_W) '$(srcdir)/sys_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-sys_linux.Tpo" "$(DEPDIR)/glquake_glx-sys_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-sys_linux.Tpo"; exit 1; fi
#	source='sys_linux.c' object='glquake_glx-sys_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-sys_linux.obj `if test -f 'sys_linux.c'; then $(CYGPATH_W) 'sys_linux.c'; else $(CYGPATH_W) '$(srcdir)/sys_linux.c'; fi`

glquake_glx-snd_dma.o: snd_dma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_dma.o -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_dma.Tpo" -c -o glquake_glx-snd_dma.o `test -f 'snd_dma.c' || echo '$(srcdir)/'`snd_dma.c; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_dma.Tpo" "$(DEPDIR)/glquake_glx-snd_dma.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_dma.Tpo"; exit 1; fi
#	source='snd_dma.c' object='glquake_glx-snd_dma.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_dma.o `test -f 'snd_dma.c' || echo '$(srcdir)/'`snd_dma.c

glquake_glx-snd_dma.obj: snd_dma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_dma.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_dma.Tpo" -c -o glquake_glx-snd_dma.obj `if test -f 'snd_dma.c'; then $(CYGPATH_W) 'snd_dma.c'; else $(CYGPATH_W) '$(srcdir)/snd_dma.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_dma.Tpo" "$(DEPDIR)/glquake_glx-snd_dma.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_dma.Tpo"; exit 1; fi
#	source='snd_dma.c' object='glquake_glx-snd_dma.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_dma.obj `if test -f 'snd_dma.c'; then $(CYGPATH_W) 'snd_dma.c'; else $(CYGPATH_W) '$(srcdir)/snd_dma.c'; fi`

glquake_glx-snd_mem.o: snd_mem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_mem.o -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_mem.Tpo" -c -o glquake_glx-snd_mem.o `test -f 'snd_mem.c' || echo '$(srcdir)/'`snd_mem.c; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_mem.Tpo" "$(DEPDIR)/glquake_glx-snd_mem.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_mem.Tpo"; exit 1; fi
#	source='snd_mem.c' object='glquake_glx-snd_mem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_mem.o `test -f 'snd_mem.c' || echo '$(srcdir)/'`snd_mem.c

glquake_glx-snd_mem.obj: snd_mem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_mem.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_mem.Tpo" -c -o glquake_glx-snd_mem.obj `if test -f 'snd_mem.c'; then $(CYGPATH_W) 'snd_mem.c'; else $(CYGPATH_W) '$(srcdir)/snd_mem.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_mem.Tpo" "$(DEPDIR)/glquake_glx-snd_mem.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_mem.Tpo"; exit 1; fi
#	source='snd_mem.c' object='glquake_glx-snd_mem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_mem.obj `if test -f 'snd_mem.c'; then $(CYGPATH_W) 'snd_mem.c'; else $(CYGPATH_W) '$(srcdir)/snd_mem.c'; fi`

glquake_glx-snd_mix.o: snd_mix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_mix.o -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_mix.Tpo" -c -o glquake_glx-snd_mix.o `test -f 'snd_mix.c' || echo '$(srcdir)/'`snd_mix.c; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_mix.Tpo" "$(DEPDIR)/glquake_glx-snd_mix.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_mix.Tpo"; exit 1; fi
#	source='snd_mix.c' object='glquake_glx-snd_mix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_mix.o `test -f 'snd_mix.c' || echo '$(srcdir)/'`snd_mix.c

glquake_glx-snd_mix.obj: snd_mix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_mix.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_mix.Tpo" -c -o glquake_glx-snd_mix.obj `if test -f 'snd_mix.c'; then $(CYGPATH_W) 'snd_mix.c'; else $(CYGPATH_W) '$(srcdir)/snd_mix.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_mix.Tpo" "$(DEPDIR)/glquake_glx-snd_mix.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_mix.Tpo"; exit 1; fi
#	source='snd_mix.c' object='glquake_glx-snd_mix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_mix.obj `if test -f 'snd_mix.c'; then $(CYGPATH_W) 'snd_mix.c'; else $(CYGPATH_W) '$(srcdir)/snd_mix.c'; fi`

glquake_glx-snd_linux.o: snd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_linux.o -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_linux.Tpo" -c -o glquake_glx-snd_linux.o `test -f 'snd_linux.c' || echo '$(srcdir)/'`snd_linux.c; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_linux.Tpo" "$(DEPDIR)/glquake_glx-snd_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_linux.Tpo"; exit 1; fi
#	source='snd_linux.c' object='glquake_glx-snd_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_linux.o `test -f 'snd_linux.c' || echo '$(srcdir)/'`snd_linux.c

glquake_glx-snd_linux.obj: snd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -MT glquake_glx-snd_linux.obj -MD -MP -MF "$(DEPDIR)/glquake_glx-snd_linux.Tpo" -c -o glquake_glx-snd_linux.obj `if test -f 'snd_linux.c'; then $(CYGPATH_W) 'snd_linux.c'; else $(CYGPATH_W) '$(srcdir)/snd_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/glquake_glx-snd_linux.Tpo" "$(DEPDIR)/glquake_glx-snd_linux.Po"; else rm -f "$(DEPDIR)/glquake_glx-snd_linux.Tpo"; exit 1; fi
#	source='snd_linux.c' object='glquake_glx-snd_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(glquake_glx_CFLAGS) $(CFLAGS) -c -o glquake_glx-snd_linux.obj `if test -f 'snd_linux.c'; then $(CYGPATH_W) 'snd_linux.c'; else $(CYGPATH_W) '$(srcdir)/snd_linux.c'; fi`

quake_x11-cl_demo.o: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_demo.o -MD -MP -MF "$(DEPDIR)/quake_x11-cl_demo.Tpo" -c -o quake_x11-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c; \
	then mv -f "$(DEPDIR)/quake_x11-cl_demo.Tpo" "$(DEPDIR)/quake_x11-cl_demo.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='quake_x11-cl_demo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c

quake_x11-cl_demo.obj: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_demo.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cl_demo.Tpo" -c -o quake_x11-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cl_demo.Tpo" "$(DEPDIR)/quake_x11-cl_demo.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='quake_x11-cl_demo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`

quake_x11-cl_input.o: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_input.o -MD -MP -MF "$(DEPDIR)/quake_x11-cl_input.Tpo" -c -o quake_x11-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c; \
	then mv -f "$(DEPDIR)/quake_x11-cl_input.Tpo" "$(DEPDIR)/quake_x11-cl_input.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='quake_x11-cl_input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c

quake_x11-cl_input.obj: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_input.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cl_input.Tpo" -c -o quake_x11-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cl_input.Tpo" "$(DEPDIR)/quake_x11-cl_input.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='quake_x11-cl_input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`

quake_x11-cl_main.o: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_main.o -MD -MP -MF "$(DEPDIR)/quake_x11-cl_main.Tpo" -c -o quake_x11-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c; \
	then mv -f "$(DEPDIR)/quake_x11-cl_main.Tpo" "$(DEPDIR)/quake_x11-cl_main.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='quake_x11-cl_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c

quake_x11-cl_main.obj: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_main.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cl_main.Tpo" -c -o quake_x11-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cl_main.Tpo" "$(DEPDIR)/quake_x11-cl_main.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='quake_x11-cl_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`

quake_x11-cl_parse.o: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_parse.o -MD -MP -MF "$(DEPDIR)/quake_x11-cl_parse.Tpo" -c -o quake_x11-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c; \
	then mv -f "$(DEPDIR)/quake_x11-cl_parse.Tpo" "$(DEPDIR)/quake_x11-cl_parse.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='quake_x11-cl_parse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c

quake_x11-cl_parse.obj: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_parse.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cl_parse.Tpo" -c -o quake_x11-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cl_parse.Tpo" "$(DEPDIR)/quake_x11-cl_parse.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='quake_x11-cl_parse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`

quake_x11-cl_tent.o: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_tent.o -MD -MP -MF "$(DEPDIR)/quake_x11-cl_tent.Tpo" -c -o quake_x11-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c; \
	then mv -f "$(DEPDIR)/quake_x11-cl_tent.Tpo" "$(DEPDIR)/quake_x11-cl_tent.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='quake_x11-cl_tent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c

quake_x11-cl_tent.obj: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cl_tent.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cl_tent.Tpo" -c -o quake_x11-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cl_tent.Tpo" "$(DEPDIR)/quake_x11-cl_tent.Po"; else rm -f "$(DEPDIR)/quake_x11-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='quake_x11-cl_tent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`

quake_x11-chase.o: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-chase.o -MD -MP -MF "$(DEPDIR)/quake_x11-chase.Tpo" -c -o quake_x11-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c; \
	then mv -f "$(DEPDIR)/quake_x11-chase.Tpo" "$(DEPDIR)/quake_x11-chase.Po"; else rm -f "$(DEPDIR)/quake_x11-chase.Tpo"; exit 1; fi
#	source='chase.c' object='quake_x11-chase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c

quake_x11-chase.obj: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-chase.obj -MD -MP -MF "$(DEPDIR)/quake_x11-chase.Tpo" -c -o quake_x11-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-chase.Tpo" "$(DEPDIR)/quake_x11-chase.Po"; else rm -f "$(DEPDIR)/quake_x11-chase.Tpo"; exit 1; fi
#	source='chase.c' object='quake_x11-chase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`

quake_x11-cmd.o: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cmd.o -MD -MP -MF "$(DEPDIR)/quake_x11-cmd.Tpo" -c -o quake_x11-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c; \
	then mv -f "$(DEPDIR)/quake_x11-cmd.Tpo" "$(DEPDIR)/quake_x11-cmd.Po"; else rm -f "$(DEPDIR)/quake_x11-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='quake_x11-cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c

quake_x11-cmd.obj: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cmd.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cmd.Tpo" -c -o quake_x11-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cmd.Tpo" "$(DEPDIR)/quake_x11-cmd.Po"; else rm -f "$(DEPDIR)/quake_x11-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='quake_x11-cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`

quake_x11-common.o: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-common.o -MD -MP -MF "$(DEPDIR)/quake_x11-common.Tpo" -c -o quake_x11-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c; \
	then mv -f "$(DEPDIR)/quake_x11-common.Tpo" "$(DEPDIR)/quake_x11-common.Po"; else rm -f "$(DEPDIR)/quake_x11-common.Tpo"; exit 1; fi
#	source='common.c' object='quake_x11-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c

quake_x11-common.obj: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-common.obj -MD -MP -MF "$(DEPDIR)/quake_x11-common.Tpo" -c -o quake_x11-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-common.Tpo" "$(DEPDIR)/quake_x11-common.Po"; else rm -f "$(DEPDIR)/quake_x11-common.Tpo"; exit 1; fi
#	source='common.c' object='quake_x11-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`

quake_x11-console.o: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-console.o -MD -MP -MF "$(DEPDIR)/quake_x11-console.Tpo" -c -o quake_x11-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c; \
	then mv -f "$(DEPDIR)/quake_x11-console.Tpo" "$(DEPDIR)/quake_x11-console.Po"; else rm -f "$(DEPDIR)/quake_x11-console.Tpo"; exit 1; fi
#	source='console.c' object='quake_x11-console.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c

quake_x11-console.obj: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-console.obj -MD -MP -MF "$(DEPDIR)/quake_x11-console.Tpo" -c -o quake_x11-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-console.Tpo" "$(DEPDIR)/quake_x11-console.Po"; else rm -f "$(DEPDIR)/quake_x11-console.Tpo"; exit 1; fi
#	source='console.c' object='quake_x11-console.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`

quake_x11-crc.o: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-crc.o -MD -MP -MF "$(DEPDIR)/quake_x11-crc.Tpo" -c -o quake_x11-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c; \
	then mv -f "$(DEPDIR)/quake_x11-crc.Tpo" "$(DEPDIR)/quake_x11-crc.Po"; else rm -f "$(DEPDIR)/quake_x11-crc.Tpo"; exit 1; fi
#	source='crc.c' object='quake_x11-crc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c

quake_x11-crc.obj: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-crc.obj -MD -MP -MF "$(DEPDIR)/quake_x11-crc.Tpo" -c -o quake_x11-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-crc.Tpo" "$(DEPDIR)/quake_x11-crc.Po"; else rm -f "$(DEPDIR)/quake_x11-crc.Tpo"; exit 1; fi
#	source='crc.c' object='quake_x11-crc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`

quake_x11-cvar.o: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cvar.o -MD -MP -MF "$(DEPDIR)/quake_x11-cvar.Tpo" -c -o quake_x11-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c; \
	then mv -f "$(DEPDIR)/quake_x11-cvar.Tpo" "$(DEPDIR)/quake_x11-cvar.Po"; else rm -f "$(DEPDIR)/quake_x11-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='quake_x11-cvar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c

quake_x11-cvar.obj: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cvar.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cvar.Tpo" -c -o quake_x11-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cvar.Tpo" "$(DEPDIR)/quake_x11-cvar.Po"; else rm -f "$(DEPDIR)/quake_x11-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='quake_x11-cvar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`

quake_x11-draw.o: draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-draw.o -MD -MP -MF "$(DEPDIR)/quake_x11-draw.Tpo" -c -o quake_x11-draw.o `test -f 'draw.c' || echo '$(srcdir)/'`draw.c; \
	then mv -f "$(DEPDIR)/quake_x11-draw.Tpo" "$(DEPDIR)/quake_x11-draw.Po"; else rm -f "$(DEPDIR)/quake_x11-draw.Tpo"; exit 1; fi
#	source='draw.c' object='quake_x11-draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-draw.o `test -f 'draw.c' || echo '$(srcdir)/'`draw.c

quake_x11-draw.obj: draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-draw.obj -MD -MP -MF "$(DEPDIR)/quake_x11-draw.Tpo" -c -o quake_x11-draw.obj `if test -f 'draw.c'; then $(CYGPATH_W) 'draw.c'; else $(CYGPATH_W) '$(srcdir)/draw.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-draw.Tpo" "$(DEPDIR)/quake_x11-draw.Po"; else rm -f "$(DEPDIR)/quake_x11-draw.Tpo"; exit 1; fi
#	source='draw.c' object='quake_x11-draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-draw.obj `if test -f 'draw.c'; then $(CYGPATH_W) 'draw.c'; else $(CYGPATH_W) '$(srcdir)/draw.c'; fi`

quake_x11-d_edge.o: d_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_edge.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_edge.Tpo" -c -o quake_x11-d_edge.o `test -f 'd_edge.c' || echo '$(srcdir)/'`d_edge.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_edge.Tpo" "$(DEPDIR)/quake_x11-d_edge.Po"; else rm -f "$(DEPDIR)/quake_x11-d_edge.Tpo"; exit 1; fi
#	source='d_edge.c' object='quake_x11-d_edge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_edge.o `test -f 'd_edge.c' || echo '$(srcdir)/'`d_edge.c

quake_x11-d_edge.obj: d_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_edge.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_edge.Tpo" -c -o quake_x11-d_edge.obj `if test -f 'd_edge.c'; then $(CYGPATH_W) 'd_edge.c'; else $(CYGPATH_W) '$(srcdir)/d_edge.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_edge.Tpo" "$(DEPDIR)/quake_x11-d_edge.Po"; else rm -f "$(DEPDIR)/quake_x11-d_edge.Tpo"; exit 1; fi
#	source='d_edge.c' object='quake_x11-d_edge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_edge.obj `if test -f 'd_edge.c'; then $(CYGPATH_W) 'd_edge.c'; else $(CYGPATH_W) '$(srcdir)/d_edge.c'; fi`

quake_x11-d_fill.o: d_fill.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_fill.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_fill.Tpo" -c -o quake_x11-d_fill.o `test -f 'd_fill.c' || echo '$(srcdir)/'`d_fill.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_fill.Tpo" "$(DEPDIR)/quake_x11-d_fill.Po"; else rm -f "$(DEPDIR)/quake_x11-d_fill.Tpo"; exit 1; fi
#	source='d_fill.c' object='quake_x11-d_fill.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_fill.o `test -f 'd_fill.c' || echo '$(srcdir)/'`d_fill.c

quake_x11-d_fill.obj: d_fill.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_fill.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_fill.Tpo" -c -o quake_x11-d_fill.obj `if test -f 'd_fill.c'; then $(CYGPATH_W) 'd_fill.c'; else $(CYGPATH_W) '$(srcdir)/d_fill.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_fill.Tpo" "$(DEPDIR)/quake_x11-d_fill.Po"; else rm -f "$(DEPDIR)/quake_x11-d_fill.Tpo"; exit 1; fi
#	source='d_fill.c' object='quake_x11-d_fill.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_fill.obj `if test -f 'd_fill.c'; then $(CYGPATH_W) 'd_fill.c'; else $(CYGPATH_W) '$(srcdir)/d_fill.c'; fi`

quake_x11-d_init.o: d_init.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_init.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_init.Tpo" -c -o quake_x11-d_init.o `test -f 'd_init.c' || echo '$(srcdir)/'`d_init.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_init.Tpo" "$(DEPDIR)/quake_x11-d_init.Po"; else rm -f "$(DEPDIR)/quake_x11-d_init.Tpo"; exit 1; fi
#	source='d_init.c' object='quake_x11-d_init.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_init.o `test -f 'd_init.c' || echo '$(srcdir)/'`d_init.c

quake_x11-d_init.obj: d_init.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_init.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_init.Tpo" -c -o quake_x11-d_init.obj `if test -f 'd_init.c'; then $(CYGPATH_W) 'd_init.c'; else $(CYGPATH_W) '$(srcdir)/d_init.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_init.Tpo" "$(DEPDIR)/quake_x11-d_init.Po"; else rm -f "$(DEPDIR)/quake_x11-d_init.Tpo"; exit 1; fi
#	source='d_init.c' object='quake_x11-d_init.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_init.obj `if test -f 'd_init.c'; then $(CYGPATH_W) 'd_init.c'; else $(CYGPATH_W) '$(srcdir)/d_init.c'; fi`

quake_x11-d_modech.o: d_modech.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_modech.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_modech.Tpo" -c -o quake_x11-d_modech.o `test -f 'd_modech.c' || echo '$(srcdir)/'`d_modech.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_modech.Tpo" "$(DEPDIR)/quake_x11-d_modech.Po"; else rm -f "$(DEPDIR)/quake_x11-d_modech.Tpo"; exit 1; fi
#	source='d_modech.c' object='quake_x11-d_modech.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_modech.o `test -f 'd_modech.c' || echo '$(srcdir)/'`d_modech.c

quake_x11-d_modech.obj: d_modech.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_modech.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_modech.Tpo" -c -o quake_x11-d_modech.obj `if test -f 'd_modech.c'; then $(CYGPATH_W) 'd_modech.c'; else $(CYGPATH_W) '$(srcdir)/d_modech.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_modech.Tpo" "$(DEPDIR)/quake_x11-d_modech.Po"; else rm -f "$(DEPDIR)/quake_x11-d_modech.Tpo"; exit 1; fi
#	source='d_modech.c' object='quake_x11-d_modech.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_modech.obj `if test -f 'd_modech.c'; then $(CYGPATH_W) 'd_modech.c'; else $(CYGPATH_W) '$(srcdir)/d_modech.c'; fi`

quake_x11-d_part.o: d_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_part.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_part.Tpo" -c -o quake_x11-d_part.o `test -f 'd_part.c' || echo '$(srcdir)/'`d_part.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_part.Tpo" "$(DEPDIR)/quake_x11-d_part.Po"; else rm -f "$(DEPDIR)/quake_x11-d_part.Tpo"; exit 1; fi
#	source='d_part.c' object='quake_x11-d_part.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_part.o `test -f 'd_part.c' || echo '$(srcdir)/'`d_part.c

quake_x11-d_part.obj: d_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_part.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_part.Tpo" -c -o quake_x11-d_part.obj `if test -f 'd_part.c'; then $(CYGPATH_W) 'd_part.c'; else $(CYGPATH_W) '$(srcdir)/d_part.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_part.Tpo" "$(DEPDIR)/quake_x11-d_part.Po"; else rm -f "$(DEPDIR)/quake_x11-d_part.Tpo"; exit 1; fi
#	source='d_part.c' object='quake_x11-d_part.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_part.obj `if test -f 'd_part.c'; then $(CYGPATH_W) 'd_part.c'; else $(CYGPATH_W) '$(srcdir)/d_part.c'; fi`

quake_x11-d_polyse.o: d_polyse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_polyse.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_polyse.Tpo" -c -o quake_x11-d_polyse.o `test -f 'd_polyse.c' || echo '$(srcdir)/'`d_polyse.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_polyse.Tpo" "$(DEPDIR)/quake_x11-d_polyse.Po"; else rm -f "$(DEPDIR)/quake_x11-d_polyse.Tpo"; exit 1; fi
#	source='d_polyse.c' object='quake_x11-d_polyse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_polyse.o `test -f 'd_polyse.c' || echo '$(srcdir)/'`d_polyse.c

quake_x11-d_polyse.obj: d_polyse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_polyse.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_polyse.Tpo" -c -o quake_x11-d_polyse.obj `if test -f 'd_polyse.c'; then $(CYGPATH_W) 'd_polyse.c'; else $(CYGPATH_W) '$(srcdir)/d_polyse.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_polyse.Tpo" "$(DEPDIR)/quake_x11-d_polyse.Po"; else rm -f "$(DEPDIR)/quake_x11-d_polyse.Tpo"; exit 1; fi
#	source='d_polyse.c' object='quake_x11-d_polyse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_polyse.obj `if test -f 'd_polyse.c'; then $(CYGPATH_W) 'd_polyse.c'; else $(CYGPATH_W) '$(srcdir)/d_polyse.c'; fi`

quake_x11-d_scan.o: d_scan.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_scan.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_scan.Tpo" -c -o quake_x11-d_scan.o `test -f 'd_scan.c' || echo '$(srcdir)/'`d_scan.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_scan.Tpo" "$(DEPDIR)/quake_x11-d_scan.Po"; else rm -f "$(DEPDIR)/quake_x11-d_scan.Tpo"; exit 1; fi
#	source='d_scan.c' object='quake_x11-d_scan.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_scan.o `test -f 'd_scan.c' || echo '$(srcdir)/'`d_scan.c

quake_x11-d_scan.obj: d_scan.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_scan.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_scan.Tpo" -c -o quake_x11-d_scan.obj `if test -f 'd_scan.c'; then $(CYGPATH_W) 'd_scan.c'; else $(CYGPATH_W) '$(srcdir)/d_scan.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_scan.Tpo" "$(DEPDIR)/quake_x11-d_scan.Po"; else rm -f "$(DEPDIR)/quake_x11-d_scan.Tpo"; exit 1; fi
#	source='d_scan.c' object='quake_x11-d_scan.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_scan.obj `if test -f 'd_scan.c'; then $(CYGPATH_W) 'd_scan.c'; else $(CYGPATH_W) '$(srcdir)/d_scan.c'; fi`

quake_x11-d_sky.o: d_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_sky.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_sky.Tpo" -c -o quake_x11-d_sky.o `test -f 'd_sky.c' || echo '$(srcdir)/'`d_sky.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_sky.Tpo" "$(DEPDIR)/quake_x11-d_sky.Po"; else rm -f "$(DEPDIR)/quake_x11-d_sky.Tpo"; exit 1; fi
#	source='d_sky.c' object='quake_x11-d_sky.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_sky.o `test -f 'd_sky.c' || echo '$(srcdir)/'`d_sky.c

quake_x11-d_sky.obj: d_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_sky.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_sky.Tpo" -c -o quake_x11-d_sky.obj `if test -f 'd_sky.c'; then $(CYGPATH_W) 'd_sky.c'; else $(CYGPATH_W) '$(srcdir)/d_sky.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_sky.Tpo" "$(DEPDIR)/quake_x11-d_sky.Po"; else rm -f "$(DEPDIR)/quake_x11-d_sky.Tpo"; exit 1; fi
#	source='d_sky.c' object='quake_x11-d_sky.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_sky.obj `if test -f 'd_sky.c'; then $(CYGPATH_W) 'd_sky.c'; else $(CYGPATH_W) '$(srcdir)/d_sky.c'; fi`

quake_x11-d_sprite.o: d_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_sprite.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_sprite.Tpo" -c -o quake_x11-d_sprite.o `test -f 'd_sprite.c' || echo '$(srcdir)/'`d_sprite.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_sprite.Tpo" "$(DEPDIR)/quake_x11-d_sprite.Po"; else rm -f "$(DEPDIR)/quake_x11-d_sprite.Tpo"; exit 1; fi
#	source='d_sprite.c' object='quake_x11-d_sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_sprite.o `test -f 'd_sprite.c' || echo '$(srcdir)/'`d_sprite.c

quake_x11-d_sprite.obj: d_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_sprite.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_sprite.Tpo" -c -o quake_x11-d_sprite.obj `if test -f 'd_sprite.c'; then $(CYGPATH_W) 'd_sprite.c'; else $(CYGPATH_W) '$(srcdir)/d_sprite.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_sprite.Tpo" "$(DEPDIR)/quake_x11-d_sprite.Po"; else rm -f "$(DEPDIR)/quake_x11-d_sprite.Tpo"; exit 1; fi
#	source='d_sprite.c' object='quake_x11-d_sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_sprite.obj `if test -f 'd_sprite.c'; then $(CYGPATH_W) 'd_sprite.c'; else $(CYGPATH_W) '$(srcdir)/d_sprite.c'; fi`

quake_x11-d_surf.o: d_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_surf.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_surf.Tpo" -c -o quake_x11-d_surf.o `test -f 'd_surf.c' || echo '$(srcdir)/'`d_surf.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_surf.Tpo" "$(DEPDIR)/quake_x11-d_surf.Po"; else rm -f "$(DEPDIR)/quake_x11-d_surf.Tpo"; exit 1; fi
#	source='d_surf.c' object='quake_x11-d_surf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_surf.o `test -f 'd_surf.c' || echo '$(srcdir)/'`d_surf.c

quake_x11-d_surf.obj: d_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_surf.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_surf.Tpo" -c -o quake_x11-d_surf.obj `if test -f 'd_surf.c'; then $(CYGPATH_W) 'd_surf.c'; else $(CYGPATH_W) '$(srcdir)/d_surf.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_surf.Tpo" "$(DEPDIR)/quake_x11-d_surf.Po"; else rm -f "$(DEPDIR)/quake_x11-d_surf.Tpo"; exit 1; fi
#	source='d_surf.c' object='quake_x11-d_surf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_surf.obj `if test -f 'd_surf.c'; then $(CYGPATH_W) 'd_surf.c'; else $(CYGPATH_W) '$(srcdir)/d_surf.c'; fi`

quake_x11-d_vars.o: d_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_vars.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_vars.Tpo" -c -o quake_x11-d_vars.o `test -f 'd_vars.c' || echo '$(srcdir)/'`d_vars.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_vars.Tpo" "$(DEPDIR)/quake_x11-d_vars.Po"; else rm -f "$(DEPDIR)/quake_x11-d_vars.Tpo"; exit 1; fi
#	source='d_vars.c' object='quake_x11-d_vars.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_vars.o `test -f 'd_vars.c' || echo '$(srcdir)/'`d_vars.c

quake_x11-d_vars.obj: d_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_vars.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_vars.Tpo" -c -o quake_x11-d_vars.obj `if test -f 'd_vars.c'; then $(CYGPATH_W) 'd_vars.c'; else $(CYGPATH_W) '$(srcdir)/d_vars.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_vars.Tpo" "$(DEPDIR)/quake_x11-d_vars.Po"; else rm -f "$(DEPDIR)/quake_x11-d_vars.Tpo"; exit 1; fi
#	source='d_vars.c' object='quake_x11-d_vars.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_vars.obj `if test -f 'd_vars.c'; then $(CYGPATH_W) 'd_vars.c'; else $(CYGPATH_W) '$(srcdir)/d_vars.c'; fi`

quake_x11-d_zpoint.o: d_zpoint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_zpoint.o -MD -MP -MF "$(DEPDIR)/quake_x11-d_zpoint.Tpo" -c -o quake_x11-d_zpoint.o `test -f 'd_zpoint.c' || echo '$(srcdir)/'`d_zpoint.c; \
	then mv -f "$(DEPDIR)/quake_x11-d_zpoint.Tpo" "$(DEPDIR)/quake_x11-d_zpoint.Po"; else rm -f "$(DEPDIR)/quake_x11-d_zpoint.Tpo"; exit 1; fi
#	source='d_zpoint.c' object='quake_x11-d_zpoint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_zpoint.o `test -f 'd_zpoint.c' || echo '$(srcdir)/'`d_zpoint.c

quake_x11-d_zpoint.obj: d_zpoint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-d_zpoint.obj -MD -MP -MF "$(DEPDIR)/quake_x11-d_zpoint.Tpo" -c -o quake_x11-d_zpoint.obj `if test -f 'd_zpoint.c'; then $(CYGPATH_W) 'd_zpoint.c'; else $(CYGPATH_W) '$(srcdir)/d_zpoint.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-d_zpoint.Tpo" "$(DEPDIR)/quake_x11-d_zpoint.Po"; else rm -f "$(DEPDIR)/quake_x11-d_zpoint.Tpo"; exit 1; fi
#	source='d_zpoint.c' object='quake_x11-d_zpoint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-d_zpoint.obj `if test -f 'd_zpoint.c'; then $(CYGPATH_W) 'd_zpoint.c'; else $(CYGPATH_W) '$(srcdir)/d_zpoint.c'; fi`

quake_x11-host.o: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-host.o -MD -MP -MF "$(DEPDIR)/quake_x11-host.Tpo" -c -o quake_x11-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c; \
	then mv -f "$(DEPDIR)/quake_x11-host.Tpo" "$(DEPDIR)/quake_x11-host.Po"; else rm -f "$(DEPDIR)/quake_x11-host.Tpo"; exit 1; fi
#	source='host.c' object='quake_x11-host.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c

quake_x11-host.obj: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-host.obj -MD -MP -MF "$(DEPDIR)/quake_x11-host.Tpo" -c -o quake_x11-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-host.Tpo" "$(DEPDIR)/quake_x11-host.Po"; else rm -f "$(DEPDIR)/quake_x11-host.Tpo"; exit 1; fi
#	source='host.c' object='quake_x11-host.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`

quake_x11-host_cmd.o: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-host_cmd.o -MD -MP -MF "$(DEPDIR)/quake_x11-host_cmd.Tpo" -c -o quake_x11-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c; \
	then mv -f "$(DEPDIR)/quake_x11-host_cmd.Tpo" "$(DEPDIR)/quake_x11-host_cmd.Po"; else rm -f "$(DEPDIR)/quake_x11-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='quake_x11-host_cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c

quake_x11-host_cmd.obj: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-host_cmd.obj -MD -MP -MF "$(DEPDIR)/quake_x11-host_cmd.Tpo" -c -o quake_x11-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-host_cmd.Tpo" "$(DEPDIR)/quake_x11-host_cmd.Po"; else rm -f "$(DEPDIR)/quake_x11-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='quake_x11-host_cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`

quake_x11-iplog.o: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-iplog.o -MD -MP -MF "$(DEPDIR)/quake_x11-iplog.Tpo" -c -o quake_x11-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c; \
	then mv -f "$(DEPDIR)/quake_x11-iplog.Tpo" "$(DEPDIR)/quake_x11-iplog.Po"; else rm -f "$(DEPDIR)/quake_x11-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='quake_x11-iplog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c

quake_x11-iplog.obj: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-iplog.obj -MD -MP -MF "$(DEPDIR)/quake_x11-iplog.Tpo" -c -o quake_x11-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-iplog.Tpo" "$(DEPDIR)/quake_x11-iplog.Po"; else rm -f "$(DEPDIR)/quake_x11-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='quake_x11-iplog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`

quake_x11-keys.o: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-keys.o -MD -MP -MF "$(DEPDIR)/quake_x11-keys.Tpo" -c -o quake_x11-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c; \
	then mv -f "$(DEPDIR)/quake_x11-keys.Tpo" "$(DEPDIR)/quake_x11-keys.Po"; else rm -f "$(DEPDIR)/quake_x11-keys.Tpo"; exit 1; fi
#	source='keys.c' object='quake_x11-keys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c

quake_x11-keys.obj: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-keys.obj -MD -MP -MF "$(DEPDIR)/quake_x11-keys.Tpo" -c -o quake_x11-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-keys.Tpo" "$(DEPDIR)/quake_x11-keys.Po"; else rm -f "$(DEPDIR)/quake_x11-keys.Tpo"; exit 1; fi
#	source='keys.c' object='quake_x11-keys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`

quake_x11-location.o: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-location.o -MD -MP -MF "$(DEPDIR)/quake_x11-location.Tpo" -c -o quake_x11-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c; \
	then mv -f "$(DEPDIR)/quake_x11-location.Tpo" "$(DEPDIR)/quake_x11-location.Po"; else rm -f "$(DEPDIR)/quake_x11-location.Tpo"; exit 1; fi
#	source='location.c' object='quake_x11-location.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c

quake_x11-location.obj: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-location.obj -MD -MP -MF "$(DEPDIR)/quake_x11-location.Tpo" -c -o quake_x11-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-location.Tpo" "$(DEPDIR)/quake_x11-location.Po"; else rm -f "$(DEPDIR)/quake_x11-location.Tpo"; exit 1; fi
#	source='location.c' object='quake_x11-location.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`

quake_x11-matrix.o: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-matrix.o -MD -MP -MF "$(DEPDIR)/quake_x11-matrix.Tpo" -c -o quake_x11-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c; \
	then mv -f "$(DEPDIR)/quake_x11-matrix.Tpo" "$(DEPDIR)/quake_x11-matrix.Po"; else rm -f "$(DEPDIR)/quake_x11-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='quake_x11-matrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c

quake_x11-matrix.obj: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-matrix.obj -MD -MP -MF "$(DEPDIR)/quake_x11-matrix.Tpo" -c -o quake_x11-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-matrix.Tpo" "$(DEPDIR)/quake_x11-matrix.Po"; else rm -f "$(DEPDIR)/quake_x11-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='quake_x11-matrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`

quake_x11-menu.o: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-menu.o -MD -MP -MF "$(DEPDIR)/quake_x11-menu.Tpo" -c -o quake_x11-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c; \
	then mv -f "$(DEPDIR)/quake_x11-menu.Tpo" "$(DEPDIR)/quake_x11-menu.Po"; else rm -f "$(DEPDIR)/quake_x11-menu.Tpo"; exit 1; fi
#	source='menu.c' object='quake_x11-menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c

quake_x11-menu.obj: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-menu.obj -MD -MP -MF "$(DEPDIR)/quake_x11-menu.Tpo" -c -o quake_x11-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-menu.Tpo" "$(DEPDIR)/quake_x11-menu.Po"; else rm -f "$(DEPDIR)/quake_x11-menu.Tpo"; exit 1; fi
#	source='menu.c' object='quake_x11-menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`

quake_x11-mathlib.o: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-mathlib.o -MD -MP -MF "$(DEPDIR)/quake_x11-mathlib.Tpo" -c -o quake_x11-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c; \
	then mv -f "$(DEPDIR)/quake_x11-mathlib.Tpo" "$(DEPDIR)/quake_x11-mathlib.Po"; else rm -f "$(DEPDIR)/quake_x11-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='quake_x11-mathlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c

quake_x11-mathlib.obj: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-mathlib.obj -MD -MP -MF "$(DEPDIR)/quake_x11-mathlib.Tpo" -c -o quake_x11-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-mathlib.Tpo" "$(DEPDIR)/quake_x11-mathlib.Po"; else rm -f "$(DEPDIR)/quake_x11-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='quake_x11-mathlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`

quake_x11-model.o: model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-model.o -MD -MP -MF "$(DEPDIR)/quake_x11-model.Tpo" -c -o quake_x11-model.o `test -f 'model.c' || echo '$(srcdir)/'`model.c; \
	then mv -f "$(DEPDIR)/quake_x11-model.Tpo" "$(DEPDIR)/quake_x11-model.Po"; else rm -f "$(DEPDIR)/quake_x11-model.Tpo"; exit 1; fi
#	source='model.c' object='quake_x11-model.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-model.o `test -f 'model.c' || echo '$(srcdir)/'`model.c

quake_x11-model.obj: model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-model.obj -MD -MP -MF "$(DEPDIR)/quake_x11-model.Tpo" -c -o quake_x11-model.obj `if test -f 'model.c'; then $(CYGPATH_W) 'model.c'; else $(CYGPATH_W) '$(srcdir)/model.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-model.Tpo" "$(DEPDIR)/quake_x11-model.Po"; else rm -f "$(DEPDIR)/quake_x11-model.Tpo"; exit 1; fi
#	source='model.c' object='quake_x11-model.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-model.obj `if test -f 'model.c'; then $(CYGPATH_W) 'model.c'; else $(CYGPATH_W) '$(srcdir)/model.c'; fi`

quake_x11-net_dgrm.o: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_dgrm.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_dgrm.Tpo" -c -o quake_x11-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_dgrm.Tpo" "$(DEPDIR)/quake_x11-net_dgrm.Po"; else rm -f "$(DEPDIR)/quake_x11-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='quake_x11-net_dgrm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c

quake_x11-net_dgrm.obj: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_dgrm.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_dgrm.Tpo" -c -o quake_x11-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_dgrm.Tpo" "$(DEPDIR)/quake_x11-net_dgrm.Po"; else rm -f "$(DEPDIR)/quake_x11-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='quake_x11-net_dgrm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`

quake_x11-net_loop.o: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_loop.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_loop.Tpo" -c -o quake_x11-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_loop.Tpo" "$(DEPDIR)/quake_x11-net_loop.Po"; else rm -f "$(DEPDIR)/quake_x11-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='quake_x11-net_loop.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c

quake_x11-net_loop.obj: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_loop.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_loop.Tpo" -c -o quake_x11-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_loop.Tpo" "$(DEPDIR)/quake_x11-net_loop.Po"; else rm -f "$(DEPDIR)/quake_x11-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='quake_x11-net_loop.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`

quake_x11-net_main.o: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_main.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_main.Tpo" -c -o quake_x11-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_main.Tpo" "$(DEPDIR)/quake_x11-net_main.Po"; else rm -f "$(DEPDIR)/quake_x11-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='quake_x11-net_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c

quake_x11-net_main.obj: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_main.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_main.Tpo" -c -o quake_x11-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_main.Tpo" "$(DEPDIR)/quake_x11-net_main.Po"; else rm -f "$(DEPDIR)/quake_x11-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='quake_x11-net_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`

quake_x11-net_vcr.o: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_vcr.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_vcr.Tpo" -c -o quake_x11-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_vcr.Tpo" "$(DEPDIR)/quake_x11-net_vcr.Po"; else rm -f "$(DEPDIR)/quake_x11-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='quake_x11-net_vcr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c

quake_x11-net_vcr.obj: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_vcr.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_vcr.Tpo" -c -o quake_x11-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_vcr.Tpo" "$(DEPDIR)/quake_x11-net_vcr.Po"; else rm -f "$(DEPDIR)/quake_x11-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='quake_x11-net_vcr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`

quake_x11-net_udp.o: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_udp.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_udp.Tpo" -c -o quake_x11-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_udp.Tpo" "$(DEPDIR)/quake_x11-net_udp.Po"; else rm -f "$(DEPDIR)/quake_x11-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='quake_x11-net_udp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c

quake_x11-net_udp.obj: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_udp.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_udp.Tpo" -c -o quake_x11-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_udp.Tpo" "$(DEPDIR)/quake_x11-net_udp.Po"; else rm -f "$(DEPDIR)/quake_x11-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='quake_x11-net_udp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`

quake_x11-net_bsd.o: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_bsd.o -MD -MP -MF "$(DEPDIR)/quake_x11-net_bsd.Tpo" -c -o quake_x11-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c; \
	then mv -f "$(DEPDIR)/quake_x11-net_bsd.Tpo" "$(DEPDIR)/quake_x11-net_bsd.Po"; else rm -f "$(DEPDIR)/quake_x11-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='quake_x11-net_bsd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c

quake_x11-net_bsd.obj: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-net_bsd.obj -MD -MP -MF "$(DEPDIR)/quake_x11-net_bsd.Tpo" -c -o quake_x11-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-net_bsd.Tpo" "$(DEPDIR)/quake_x11-net_bsd.Po"; else rm -f "$(DEPDIR)/quake_x11-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='quake_x11-net_bsd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`

quake_x11-nonintel.o: nonintel.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-nonintel.o -MD -MP -MF "$(DEPDIR)/quake_x11-nonintel.Tpo" -c -o quake_x11-nonintel.o `test -f 'nonintel.c' || echo '$(srcdir)/'`nonintel.c; \
	then mv -f "$(DEPDIR)/quake_x11-nonintel.Tpo" "$(DEPDIR)/quake_x11-nonintel.Po"; else rm -f "$(DEPDIR)/quake_x11-nonintel.Tpo"; exit 1; fi
#	source='nonintel.c' object='quake_x11-nonintel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-nonintel.o `test -f 'nonintel.c' || echo '$(srcdir)/'`nonintel.c

quake_x11-nonintel.obj: nonintel.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-nonintel.obj -MD -MP -MF "$(DEPDIR)/quake_x11-nonintel.Tpo" -c -o quake_x11-nonintel.obj `if test -f 'nonintel.c'; then $(CYGPATH_W) 'nonintel.c'; else $(CYGPATH_W) '$(srcdir)/nonintel.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-nonintel.Tpo" "$(DEPDIR)/quake_x11-nonintel.Po"; else rm -f "$(DEPDIR)/quake_x11-nonintel.Tpo"; exit 1; fi
#	source='nonintel.c' object='quake_x11-nonintel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-nonintel.obj `if test -f 'nonintel.c'; then $(CYGPATH_W) 'nonintel.c'; else $(CYGPATH_W) '$(srcdir)/nonintel.c'; fi`

quake_x11-pr_cmds.o: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_cmds.o -MD -MP -MF "$(DEPDIR)/quake_x11-pr_cmds.Tpo" -c -o quake_x11-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c; \
	then mv -f "$(DEPDIR)/quake_x11-pr_cmds.Tpo" "$(DEPDIR)/quake_x11-pr_cmds.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='quake_x11-pr_cmds.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c

quake_x11-pr_cmds.obj: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_cmds.obj -MD -MP -MF "$(DEPDIR)/quake_x11-pr_cmds.Tpo" -c -o quake_x11-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-pr_cmds.Tpo" "$(DEPDIR)/quake_x11-pr_cmds.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='quake_x11-pr_cmds.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`

quake_x11-pr_edict.o: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_edict.o -MD -MP -MF "$(DEPDIR)/quake_x11-pr_edict.Tpo" -c -o quake_x11-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c; \
	then mv -f "$(DEPDIR)/quake_x11-pr_edict.Tpo" "$(DEPDIR)/quake_x11-pr_edict.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='quake_x11-pr_edict.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c

quake_x11-pr_edict.obj: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_edict.obj -MD -MP -MF "$(DEPDIR)/quake_x11-pr_edict.Tpo" -c -o quake_x11-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-pr_edict.Tpo" "$(DEPDIR)/quake_x11-pr_edict.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='quake_x11-pr_edict.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`

quake_x11-pr_exec.o: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_exec.o -MD -MP -MF "$(DEPDIR)/quake_x11-pr_exec.Tpo" -c -o quake_x11-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c; \
	then mv -f "$(DEPDIR)/quake_x11-pr_exec.Tpo" "$(DEPDIR)/quake_x11-pr_exec.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='quake_x11-pr_exec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c

quake_x11-pr_exec.obj: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-pr_exec.obj -MD -MP -MF "$(DEPDIR)/quake_x11-pr_exec.Tpo" -c -o quake_x11-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-pr_exec.Tpo" "$(DEPDIR)/quake_x11-pr_exec.Po"; else rm -f "$(DEPDIR)/quake_x11-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='quake_x11-pr_exec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`

quake_x11-r_aclip.o: r_aclip.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_aclip.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_aclip.Tpo" -c -o quake_x11-r_aclip.o `test -f 'r_aclip.c' || echo '$(srcdir)/'`r_aclip.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_aclip.Tpo" "$(DEPDIR)/quake_x11-r_aclip.Po"; else rm -f "$(DEPDIR)/quake_x11-r_aclip.Tpo"; exit 1; fi
#	source='r_aclip.c' object='quake_x11-r_aclip.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_aclip.o `test -f 'r_aclip.c' || echo '$(srcdir)/'`r_aclip.c

quake_x11-r_aclip.obj: r_aclip.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_aclip.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_aclip.Tpo" -c -o quake_x11-r_aclip.obj `if test -f 'r_aclip.c'; then $(CYGPATH_W) 'r_aclip.c'; else $(CYGPATH_W) '$(srcdir)/r_aclip.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_aclip.Tpo" "$(DEPDIR)/quake_x11-r_aclip.Po"; else rm -f "$(DEPDIR)/quake_x11-r_aclip.Tpo"; exit 1; fi
#	source='r_aclip.c' object='quake_x11-r_aclip.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_aclip.obj `if test -f 'r_aclip.c'; then $(CYGPATH_W) 'r_aclip.c'; else $(CYGPATH_W) '$(srcdir)/r_aclip.c'; fi`

quake_x11-r_alias.o: r_alias.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_alias.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_alias.Tpo" -c -o quake_x11-r_alias.o `test -f 'r_alias.c' || echo '$(srcdir)/'`r_alias.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_alias.Tpo" "$(DEPDIR)/quake_x11-r_alias.Po"; else rm -f "$(DEPDIR)/quake_x11-r_alias.Tpo"; exit 1; fi
#	source='r_alias.c' object='quake_x11-r_alias.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_alias.o `test -f 'r_alias.c' || echo '$(srcdir)/'`r_alias.c

quake_x11-r_alias.obj: r_alias.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_alias.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_alias.Tpo" -c -o quake_x11-r_alias.obj `if test -f 'r_alias.c'; then $(CYGPATH_W) 'r_alias.c'; else $(CYGPATH_W) '$(srcdir)/r_alias.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_alias.Tpo" "$(DEPDIR)/quake_x11-r_alias.Po"; else rm -f "$(DEPDIR)/quake_x11-r_alias.Tpo"; exit 1; fi
#	source='r_alias.c' object='quake_x11-r_alias.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_alias.obj `if test -f 'r_alias.c'; then $(CYGPATH_W) 'r_alias.c'; else $(CYGPATH_W) '$(srcdir)/r_alias.c'; fi`

quake_x11-r_bsp.o: r_bsp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_bsp.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_bsp.Tpo" -c -o quake_x11-r_bsp.o `test -f 'r_bsp.c' || echo '$(srcdir)/'`r_bsp.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_bsp.Tpo" "$(DEPDIR)/quake_x11-r_bsp.Po"; else rm -f "$(DEPDIR)/quake_x11-r_bsp.Tpo"; exit 1; fi
#	source='r_bsp.c' object='quake_x11-r_bsp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_bsp.o `test -f 'r_bsp.c' || echo '$(srcdir)/'`r_bsp.c

quake_x11-r_bsp.obj: r_bsp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_bsp.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_bsp.Tpo" -c -o quake_x11-r_bsp.obj `if test -f 'r_bsp.c'; then $(CYGPATH_W) 'r_bsp.c'; else $(CYGPATH_W) '$(srcdir)/r_bsp.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_bsp.Tpo" "$(DEPDIR)/quake_x11-r_bsp.Po"; else rm -f "$(DEPDIR)/quake_x11-r_bsp.Tpo"; exit 1; fi
#	source='r_bsp.c' object='quake_x11-r_bsp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_bsp.obj `if test -f 'r_bsp.c'; then $(CYGPATH_W) 'r_bsp.c'; else $(CYGPATH_W) '$(srcdir)/r_bsp.c'; fi`

quake_x11-r_light.o: r_light.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_light.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_light.Tpo" -c -o quake_x11-r_light.o `test -f 'r_light.c' || echo '$(srcdir)/'`r_light.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_light.Tpo" "$(DEPDIR)/quake_x11-r_light.Po"; else rm -f "$(DEPDIR)/quake_x11-r_light.Tpo"; exit 1; fi
#	source='r_light.c' object='quake_x11-r_light.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_light.o `test -f 'r_light.c' || echo '$(srcdir)/'`r_light.c

quake_x11-r_light.obj: r_light.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_light.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_light.Tpo" -c -o quake_x11-r_light.obj `if test -f 'r_light.c'; then $(CYGPATH_W) 'r_light.c'; else $(CYGPATH_W) '$(srcdir)/r_light.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_light.Tpo" "$(DEPDIR)/quake_x11-r_light.Po"; else rm -f "$(DEPDIR)/quake_x11-r_light.Tpo"; exit 1; fi
#	source='r_light.c' object='quake_x11-r_light.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_light.obj `if test -f 'r_light.c'; then $(CYGPATH_W) 'r_light.c'; else $(CYGPATH_W) '$(srcdir)/r_light.c'; fi`

quake_x11-r_draw.o: r_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_draw.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_draw.Tpo" -c -o quake_x11-r_draw.o `test -f 'r_draw.c' || echo '$(srcdir)/'`r_draw.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_draw.Tpo" "$(DEPDIR)/quake_x11-r_draw.Po"; else rm -f "$(DEPDIR)/quake_x11-r_draw.Tpo"; exit 1; fi
#	source='r_draw.c' object='quake_x11-r_draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_draw.o `test -f 'r_draw.c' || echo '$(srcdir)/'`r_draw.c

quake_x11-r_draw.obj: r_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_draw.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_draw.Tpo" -c -o quake_x11-r_draw.obj `if test -f 'r_draw.c'; then $(CYGPATH_W) 'r_draw.c'; else $(CYGPATH_W) '$(srcdir)/r_draw.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_draw.Tpo" "$(DEPDIR)/quake_x11-r_draw.Po"; else rm -f "$(DEPDIR)/quake_x11-r_draw.Tpo"; exit 1; fi
#	source='r_draw.c' object='quake_x11-r_draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_draw.obj `if test -f 'r_draw.c'; then $(CYGPATH_W) 'r_draw.c'; else $(CYGPATH_W) '$(srcdir)/r_draw.c'; fi`

quake_x11-r_efrag.o: r_efrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_efrag.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_efrag.Tpo" -c -o quake_x11-r_efrag.o `test -f 'r_efrag.c' || echo '$(srcdir)/'`r_efrag.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_efrag.Tpo" "$(DEPDIR)/quake_x11-r_efrag.Po"; else rm -f "$(DEPDIR)/quake_x11-r_efrag.Tpo"; exit 1; fi
#	source='r_efrag.c' object='quake_x11-r_efrag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_efrag.o `test -f 'r_efrag.c' || echo '$(srcdir)/'`r_efrag.c

quake_x11-r_efrag.obj: r_efrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_efrag.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_efrag.Tpo" -c -o quake_x11-r_efrag.obj `if test -f 'r_efrag.c'; then $(CYGPATH_W) 'r_efrag.c'; else $(CYGPATH_W) '$(srcdir)/r_efrag.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_efrag.Tpo" "$(DEPDIR)/quake_x11-r_efrag.Po"; else rm -f "$(DEPDIR)/quake_x11-r_efrag.Tpo"; exit 1; fi
#	source='r_efrag.c' object='quake_x11-r_efrag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_efrag.obj `if test -f 'r_efrag.c'; then $(CYGPATH_W) 'r_efrag.c'; else $(CYGPATH_W) '$(srcdir)/r_efrag.c'; fi`

quake_x11-r_edge.o: r_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_edge.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_edge.Tpo" -c -o quake_x11-r_edge.o `test -f 'r_edge.c' || echo '$(srcdir)/'`r_edge.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_edge.Tpo" "$(DEPDIR)/quake_x11-r_edge.Po"; else rm -f "$(DEPDIR)/quake_x11-r_edge.Tpo"; exit 1; fi
#	source='r_edge.c' object='quake_x11-r_edge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_edge.o `test -f 'r_edge.c' || echo '$(srcdir)/'`r_edge.c

quake_x11-r_edge.obj: r_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_edge.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_edge.Tpo" -c -o quake_x11-r_edge.obj `if test -f 'r_edge.c'; then $(CYGPATH_W) 'r_edge.c'; else $(CYGPATH_W) '$(srcdir)/r_edge.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_edge.Tpo" "$(DEPDIR)/quake_x11-r_edge.Po"; else rm -f "$(DEPDIR)/quake_x11-r_edge.Tpo"; exit 1; fi
#	source='r_edge.c' object='quake_x11-r_edge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_edge.obj `if test -f 'r_edge.c'; then $(CYGPATH_W) 'r_edge.c'; else $(CYGPATH_W) '$(srcdir)/r_edge.c'; fi`

quake_x11-r_misc.o: r_misc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_misc.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_misc.Tpo" -c -o quake_x11-r_misc.o `test -f 'r_misc.c' || echo '$(srcdir)/'`r_misc.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_misc.Tpo" "$(DEPDIR)/quake_x11-r_misc.Po"; else rm -f "$(DEPDIR)/quake_x11-r_misc.Tpo"; exit 1; fi
#	source='r_misc.c' object='quake_x11-r_misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_misc.o `test -f 'r_misc.c' || echo '$(srcdir)/'`r_misc.c

quake_x11-r_misc.obj: r_misc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_misc.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_misc.Tpo" -c -o quake_x11-r_misc.obj `if test -f 'r_misc.c'; then $(CYGPATH_W) 'r_misc.c'; else $(CYGPATH_W) '$(srcdir)/r_misc.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_misc.Tpo" "$(DEPDIR)/quake_x11-r_misc.Po"; else rm -f "$(DEPDIR)/quake_x11-r_misc.Tpo"; exit 1; fi
#	source='r_misc.c' object='quake_x11-r_misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_misc.obj `if test -f 'r_misc.c'; then $(CYGPATH_W) 'r_misc.c'; else $(CYGPATH_W) '$(srcdir)/r_misc.c'; fi`

quake_x11-r_main.o: r_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_main.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_main.Tpo" -c -o quake_x11-r_main.o `test -f 'r_main.c' || echo '$(srcdir)/'`r_main.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_main.Tpo" "$(DEPDIR)/quake_x11-r_main.Po"; else rm -f "$(DEPDIR)/quake_x11-r_main.Tpo"; exit 1; fi
#	source='r_main.c' object='quake_x11-r_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_main.o `test -f 'r_main.c' || echo '$(srcdir)/'`r_main.c

quake_x11-r_main.obj: r_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_main.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_main.Tpo" -c -o quake_x11-r_main.obj `if test -f 'r_main.c'; then $(CYGPATH_W) 'r_main.c'; else $(CYGPATH_W) '$(srcdir)/r_main.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_main.Tpo" "$(DEPDIR)/quake_x11-r_main.Po"; else rm -f "$(DEPDIR)/quake_x11-r_main.Tpo"; exit 1; fi
#	source='r_main.c' object='quake_x11-r_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_main.obj `if test -f 'r_main.c'; then $(CYGPATH_W) 'r_main.c'; else $(CYGPATH_W) '$(srcdir)/r_main.c'; fi`

quake_x11-r_sky.o: r_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_sky.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_sky.Tpo" -c -o quake_x11-r_sky.o `test -f 'r_sky.c' || echo '$(srcdir)/'`r_sky.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_sky.Tpo" "$(DEPDIR)/quake_x11-r_sky.Po"; else rm -f "$(DEPDIR)/quake_x11-r_sky.Tpo"; exit 1; fi
#	source='r_sky.c' object='quake_x11-r_sky.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_sky.o `test -f 'r_sky.c' || echo '$(srcdir)/'`r_sky.c

quake_x11-r_sky.obj: r_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_sky.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_sky.Tpo" -c -o quake_x11-r_sky.obj `if test -f 'r_sky.c'; then $(CYGPATH_W) 'r_sky.c'; else $(CYGPATH_W) '$(srcdir)/r_sky.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_sky.Tpo" "$(DEPDIR)/quake_x11-r_sky.Po"; else rm -f "$(DEPDIR)/quake_x11-r_sky.Tpo"; exit 1; fi
#	source='r_sky.c' object='quake_x11-r_sky.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_sky.obj `if test -f 'r_sky.c'; then $(CYGPATH_W) 'r_sky.c'; else $(CYGPATH_W) '$(srcdir)/r_sky.c'; fi`

quake_x11-r_sprite.o: r_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_sprite.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_sprite.Tpo" -c -o quake_x11-r_sprite.o `test -f 'r_sprite.c' || echo '$(srcdir)/'`r_sprite.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_sprite.Tpo" "$(DEPDIR)/quake_x11-r_sprite.Po"; else rm -f "$(DEPDIR)/quake_x11-r_sprite.Tpo"; exit 1; fi
#	source='r_sprite.c' object='quake_x11-r_sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_sprite.o `test -f 'r_sprite.c' || echo '$(srcdir)/'`r_sprite.c

quake_x11-r_sprite.obj: r_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_sprite.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_sprite.Tpo" -c -o quake_x11-r_sprite.obj `if test -f 'r_sprite.c'; then $(CYGPATH_W) 'r_sprite.c'; else $(CYGPATH_W) '$(srcdir)/r_sprite.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_sprite.Tpo" "$(DEPDIR)/quake_x11-r_sprite.Po"; else rm -f "$(DEPDIR)/quake_x11-r_sprite.Tpo"; exit 1; fi
#	source='r_sprite.c' object='quake_x11-r_sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_sprite.obj `if test -f 'r_sprite.c'; then $(CYGPATH_W) 'r_sprite.c'; else $(CYGPATH_W) '$(srcdir)/r_sprite.c'; fi`

quake_x11-r_surf.o: r_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_surf.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_surf.Tpo" -c -o quake_x11-r_surf.o `test -f 'r_surf.c' || echo '$(srcdir)/'`r_surf.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_surf.Tpo" "$(DEPDIR)/quake_x11-r_surf.Po"; else rm -f "$(DEPDIR)/quake_x11-r_surf.Tpo"; exit 1; fi
#	source='r_surf.c' object='quake_x11-r_surf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_surf.o `test -f 'r_surf.c' || echo '$(srcdir)/'`r_surf.c

quake_x11-r_surf.obj: r_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_surf.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_surf.Tpo" -c -o quake_x11-r_surf.obj `if test -f 'r_surf.c'; then $(CYGPATH_W) 'r_surf.c'; else $(CYGPATH_W) '$(srcdir)/r_surf.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_surf.Tpo" "$(DEPDIR)/quake_x11-r_surf.Po"; else rm -f "$(DEPDIR)/quake_x11-r_surf.Tpo"; exit 1; fi
#	source='r_surf.c' object='quake_x11-r_surf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_surf.obj `if test -f 'r_surf.c'; then $(CYGPATH_W) 'r_surf.c'; else $(CYGPATH_W) '$(srcdir)/r_surf.c'; fi`

quake_x11-r_part.o: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_part.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_part.Tpo" -c -o quake_x11-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_part.Tpo" "$(DEPDIR)/quake_x11-r_part.Po"; else rm -f "$(DEPDIR)/quake_x11-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='quake_x11-r_part.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c

quake_x11-r_part.obj: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_part.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_part.Tpo" -c -o quake_x11-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_part.Tpo" "$(DEPDIR)/quake_x11-r_part.Po"; else rm -f "$(DEPDIR)/quake_x11-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='quake_x11-r_part.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`

quake_x11-r_vars.o: r_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_vars.o -MD -MP -MF "$(DEPDIR)/quake_x11-r_vars.Tpo" -c -o quake_x11-r_vars.o `test -f 'r_vars.c' || echo '$(srcdir)/'`r_vars.c; \
	then mv -f "$(DEPDIR)/quake_x11-r_vars.Tpo" "$(DEPDIR)/quake_x11-r_vars.Po"; else rm -f "$(DEPDIR)/quake_x11-r_vars.Tpo"; exit 1; fi
#	source='r_vars.c' object='quake_x11-r_vars.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_vars.o `test -f 'r_vars.c' || echo '$(srcdir)/'`r_vars.c

quake_x11-r_vars.obj: r_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-r_vars.obj -MD -MP -MF "$(DEPDIR)/quake_x11-r_vars.Tpo" -c -o quake_x11-r_vars.obj `if test -f 'r_vars.c'; then $(CYGPATH_W) 'r_vars.c'; else $(CYGPATH_W) '$(srcdir)/r_vars.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-r_vars.Tpo" "$(DEPDIR)/quake_x11-r_vars.Po"; else rm -f "$(DEPDIR)/quake_x11-r_vars.Tpo"; exit 1; fi
#	source='r_vars.c' object='quake_x11-r_vars.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-r_vars.obj `if test -f 'r_vars.c'; then $(CYGPATH_W) 'r_vars.c'; else $(CYGPATH_W) '$(srcdir)/r_vars.c'; fi`

quake_x11-screen.o: screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-screen.o -MD -MP -MF "$(DEPDIR)/quake_x11-screen.Tpo" -c -o quake_x11-screen.o `test -f 'screen.c' || echo '$(srcdir)/'`screen.c; \
	then mv -f "$(DEPDIR)/quake_x11-screen.Tpo" "$(DEPDIR)/quake_x11-screen.Po"; else rm -f "$(DEPDIR)/quake_x11-screen.Tpo"; exit 1; fi
#	source='screen.c' object='quake_x11-screen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-screen.o `test -f 'screen.c' || echo '$(srcdir)/'`screen.c

quake_x11-screen.obj: screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-screen.obj -MD -MP -MF "$(DEPDIR)/quake_x11-screen.Tpo" -c -o quake_x11-screen.obj `if test -f 'screen.c'; then $(CYGPATH_W) 'screen.c'; else $(CYGPATH_W) '$(srcdir)/screen.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-screen.Tpo" "$(DEPDIR)/quake_x11-screen.Po"; else rm -f "$(DEPDIR)/quake_x11-screen.Tpo"; exit 1; fi
#	source='screen.c' object='quake_x11-screen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-screen.obj `if test -f 'screen.c'; then $(CYGPATH_W) 'screen.c'; else $(CYGPATH_W) '$(srcdir)/screen.c'; fi`

quake_x11-sbar.o: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sbar.o -MD -MP -MF "$(DEPDIR)/quake_x11-sbar.Tpo" -c -o quake_x11-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c; \
	then mv -f "$(DEPDIR)/quake_x11-sbar.Tpo" "$(DEPDIR)/quake_x11-sbar.Po"; else rm -f "$(DEPDIR)/quake_x11-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='quake_x11-sbar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c

quake_x11-sbar.obj: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sbar.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sbar.Tpo" -c -o quake_x11-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sbar.Tpo" "$(DEPDIR)/quake_x11-sbar.Po"; else rm -f "$(DEPDIR)/quake_x11-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='quake_x11-sbar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`

quake_x11-security.o: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-security.o -MD -MP -MF "$(DEPDIR)/quake_x11-security.Tpo" -c -o quake_x11-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c; \
	then mv -f "$(DEPDIR)/quake_x11-security.Tpo" "$(DEPDIR)/quake_x11-security.Po"; else rm -f "$(DEPDIR)/quake_x11-security.Tpo"; exit 1; fi
#	source='security.c' object='quake_x11-security.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c

quake_x11-security.obj: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-security.obj -MD -MP -MF "$(DEPDIR)/quake_x11-security.Tpo" -c -o quake_x11-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-security.Tpo" "$(DEPDIR)/quake_x11-security.Po"; else rm -f "$(DEPDIR)/quake_x11-security.Tpo"; exit 1; fi
#	source='security.c' object='quake_x11-security.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`

quake_x11-sv_main.o: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_main.o -MD -MP -MF "$(DEPDIR)/quake_x11-sv_main.Tpo" -c -o quake_x11-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c; \
	then mv -f "$(DEPDIR)/quake_x11-sv_main.Tpo" "$(DEPDIR)/quake_x11-sv_main.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='quake_x11-sv_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c

quake_x11-sv_main.obj: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_main.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sv_main.Tpo" -c -o quake_x11-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sv_main.Tpo" "$(DEPDIR)/quake_x11-sv_main.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='quake_x11-sv_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`

quake_x11-sv_phys.o: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_phys.o -MD -MP -MF "$(DEPDIR)/quake_x11-sv_phys.Tpo" -c -o quake_x11-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c; \
	then mv -f "$(DEPDIR)/quake_x11-sv_phys.Tpo" "$(DEPDIR)/quake_x11-sv_phys.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='quake_x11-sv_phys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c

quake_x11-sv_phys.obj: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_phys.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sv_phys.Tpo" -c -o quake_x11-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sv_phys.Tpo" "$(DEPDIR)/quake_x11-sv_phys.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='quake_x11-sv_phys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`

quake_x11-sv_move.o: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_move.o -MD -MP -MF "$(DEPDIR)/quake_x11-sv_move.Tpo" -c -o quake_x11-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c; \
	then mv -f "$(DEPDIR)/quake_x11-sv_move.Tpo" "$(DEPDIR)/quake_x11-sv_move.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='quake_x11-sv_move.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c

quake_x11-sv_move.obj: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_move.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sv_move.Tpo" -c -o quake_x11-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sv_move.Tpo" "$(DEPDIR)/quake_x11-sv_move.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='quake_x11-sv_move.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`

quake_x11-sv_user.o: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_user.o -MD -MP -MF "$(DEPDIR)/quake_x11-sv_user.Tpo" -c -o quake_x11-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c; \
	then mv -f "$(DEPDIR)/quake_x11-sv_user.Tpo" "$(DEPDIR)/quake_x11-sv_user.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='quake_x11-sv_user.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c

quake_x11-sv_user.obj: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sv_user.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sv_user.Tpo" -c -o quake_x11-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sv_user.Tpo" "$(DEPDIR)/quake_x11-sv_user.Po"; else rm -f "$(DEPDIR)/quake_x11-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='quake_x11-sv_user.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`

quake_x11-zone.o: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-zone.o -MD -MP -MF "$(DEPDIR)/quake_x11-zone.Tpo" -c -o quake_x11-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c; \
	then mv -f "$(DEPDIR)/quake_x11-zone.Tpo" "$(DEPDIR)/quake_x11-zone.Po"; else rm -f "$(DEPDIR)/quake_x11-zone.Tpo"; exit 1; fi
#	source='zone.c' object='quake_x11-zone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c

quake_x11-zone.obj: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-zone.obj -MD -MP -MF "$(DEPDIR)/quake_x11-zone.Tpo" -c -o quake_x11-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-zone.Tpo" "$(DEPDIR)/quake_x11-zone.Po"; else rm -f "$(DEPDIR)/quake_x11-zone.Tpo"; exit 1; fi
#	source='zone.c' object='quake_x11-zone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`

quake_x11-view.o: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-view.o -MD -MP -MF "$(DEPDIR)/quake_x11-view.Tpo" -c -o quake_x11-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c; \
	then mv -f "$(DEPDIR)/quake_x11-view.Tpo" "$(DEPDIR)/quake_x11-view.Po"; else rm -f "$(DEPDIR)/quake_x11-view.Tpo"; exit 1; fi
#	source='view.c' object='quake_x11-view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c

quake_x11-view.obj: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-view.obj -MD -MP -MF "$(DEPDIR)/quake_x11-view.Tpo" -c -o quake_x11-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-view.Tpo" "$(DEPDIR)/quake_x11-view.Po"; else rm -f "$(DEPDIR)/quake_x11-view.Tpo"; exit 1; fi
#	source='view.c' object='quake_x11-view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`

quake_x11-wad.o: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-wad.o -MD -MP -MF "$(DEPDIR)/quake_x11-wad.Tpo" -c -o quake_x11-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c; \
	then mv -f "$(DEPDIR)/quake_x11-wad.Tpo" "$(DEPDIR)/quake_x11-wad.Po"; else rm -f "$(DEPDIR)/quake_x11-wad.Tpo"; exit 1; fi
#	source='wad.c' object='quake_x11-wad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c

quake_x11-wad.obj: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-wad.obj -MD -MP -MF "$(DEPDIR)/quake_x11-wad.Tpo" -c -o quake_x11-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-wad.Tpo" "$(DEPDIR)/quake_x11-wad.Po"; else rm -f "$(DEPDIR)/quake_x11-wad.Tpo"; exit 1; fi
#	source='wad.c' object='quake_x11-wad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`

quake_x11-world.o: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-world.o -MD -MP -MF "$(DEPDIR)/quake_x11-world.Tpo" -c -o quake_x11-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c; \
	then mv -f "$(DEPDIR)/quake_x11-world.Tpo" "$(DEPDIR)/quake_x11-world.Po"; else rm -f "$(DEPDIR)/quake_x11-world.Tpo"; exit 1; fi
#	source='world.c' object='quake_x11-world.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c

quake_x11-world.obj: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-world.obj -MD -MP -MF "$(DEPDIR)/quake_x11-world.Tpo" -c -o quake_x11-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-world.Tpo" "$(DEPDIR)/quake_x11-world.Po"; else rm -f "$(DEPDIR)/quake_x11-world.Tpo"; exit 1; fi
#	source='world.c' object='quake_x11-world.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`

quake_x11-cd_linux.o: cd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cd_linux.o -MD -MP -MF "$(DEPDIR)/quake_x11-cd_linux.Tpo" -c -o quake_x11-cd_linux.o `test -f 'cd_linux.c' || echo '$(srcdir)/'`cd_linux.c; \
	then mv -f "$(DEPDIR)/quake_x11-cd_linux.Tpo" "$(DEPDIR)/quake_x11-cd_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-cd_linux.Tpo"; exit 1; fi
#	source='cd_linux.c' object='quake_x11-cd_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cd_linux.o `test -f 'cd_linux.c' || echo '$(srcdir)/'`cd_linux.c

quake_x11-cd_linux.obj: cd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-cd_linux.obj -MD -MP -MF "$(DEPDIR)/quake_x11-cd_linux.Tpo" -c -o quake_x11-cd_linux.obj `if test -f 'cd_linux.c'; then $(CYGPATH_W) 'cd_linux.c'; else $(CYGPATH_W) '$(srcdir)/cd_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-cd_linux.Tpo" "$(DEPDIR)/quake_x11-cd_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-cd_linux.Tpo"; exit 1; fi
#	source='cd_linux.c' object='quake_x11-cd_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-cd_linux.obj `if test -f 'cd_linux.c'; then $(CYGPATH_W) 'cd_linux.c'; else $(CYGPATH_W) '$(srcdir)/cd_linux.c'; fi`

quake_x11-sys_linux.o: sys_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sys_linux.o -MD -MP -MF "$(DEPDIR)/quake_x11-sys_linux.Tpo" -c -o quake_x11-sys_linux.o `test -f 'sys_linux.c' || echo '$(srcdir)/'`sys_linux.c; \
	then mv -f "$(DEPDIR)/quake_x11-sys_linux.Tpo" "$(DEPDIR)/quake_x11-sys_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-sys_linux.Tpo"; exit 1; fi
#	source='sys_linux.c' object='quake_x11-sys_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sys_linux.o `test -f 'sys_linux.c' || echo '$(srcdir)/'`sys_linux.c

quake_x11-sys_linux.obj: sys_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-sys_linux.obj -MD -MP -MF "$(DEPDIR)/quake_x11-sys_linux.Tpo" -c -o quake_x11-sys_linux.obj `if test -f 'sys_linux.c'; then $(CYGPATH_W) 'sys_linux.c'; else $(CYGPATH_W) '$(srcdir)/sys_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-sys_linux.Tpo" "$(DEPDIR)/quake_x11-sys_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-sys_linux.Tpo"; exit 1; fi
#	source='sys_linux.c' object='quake_x11-sys_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-sys_linux.obj `if test -f 'sys_linux.c'; then $(CYGPATH_W) 'sys_linux.c'; else $(CYGPATH_W) '$(srcdir)/sys_linux.c'; fi`

quake_x11-vid_x.o: vid_x.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-vid_x.o -MD -MP -MF "$(DEPDIR)/quake_x11-vid_x.Tpo" -c -o quake_x11-vid_x.o `test -f 'vid_x.c' || echo '$(srcdir)/'`vid_x.c; \
	then mv -f "$(DEPDIR)/quake_x11-vid_x.Tpo" "$(DEPDIR)/quake_x11-vid_x.Po"; else rm -f "$(DEPDIR)/quake_x11-vid_x.Tpo"; exit 1; fi
#	source='vid_x.c' object='quake_x11-vid_x.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-vid_x.o `test -f 'vid_x.c' || echo '$(srcdir)/'`vid_x.c

quake_x11-vid_x.obj: vid_x.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-vid_x.obj -MD -MP -MF "$(DEPDIR)/quake_x11-vid_x.Tpo" -c -o quake_x11-vid_x.obj `if test -f 'vid_x.c'; then $(CYGPATH_W) 'vid_x.c'; else $(CYGPATH_W) '$(srcdir)/vid_x.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-vid_x.Tpo" "$(DEPDIR)/quake_x11-vid_x.Po"; else rm -f "$(DEPDIR)/quake_x11-vid_x.Tpo"; exit 1; fi
#	source='vid_x.c' object='quake_x11-vid_x.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-vid_x.obj `if test -f 'vid_x.c'; then $(CYGPATH_W) 'vid_x.c'; else $(CYGPATH_W) '$(srcdir)/vid_x.c'; fi`

quake_x11-snd_dma.o: snd_dma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_dma.o -MD -MP -MF "$(DEPDIR)/quake_x11-snd_dma.Tpo" -c -o quake_x11-snd_dma.o `test -f 'snd_dma.c' || echo '$(srcdir)/'`snd_dma.c; \
	then mv -f "$(DEPDIR)/quake_x11-snd_dma.Tpo" "$(DEPDIR)/quake_x11-snd_dma.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_dma.Tpo"; exit 1; fi
#	source='snd_dma.c' object='quake_x11-snd_dma.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_dma.o `test -f 'snd_dma.c' || echo '$(srcdir)/'`snd_dma.c

quake_x11-snd_dma.obj: snd_dma.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_dma.obj -MD -MP -MF "$(DEPDIR)/quake_x11-snd_dma.Tpo" -c -o quake_x11-snd_dma.obj `if test -f 'snd_dma.c'; then $(CYGPATH_W) 'snd_dma.c'; else $(CYGPATH_W) '$(srcdir)/snd_dma.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-snd_dma.Tpo" "$(DEPDIR)/quake_x11-snd_dma.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_dma.Tpo"; exit 1; fi
#	source='snd_dma.c' object='quake_x11-snd_dma.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_dma.obj `if test -f 'snd_dma.c'; then $(CYGPATH_W) 'snd_dma.c'; else $(CYGPATH_W) '$(srcdir)/snd_dma.c'; fi`

quake_x11-snd_mem.o: snd_mem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_mem.o -MD -MP -MF "$(DEPDIR)/quake_x11-snd_mem.Tpo" -c -o quake_x11-snd_mem.o `test -f 'snd_mem.c' || echo '$(srcdir)/'`snd_mem.c; \
	then mv -f "$(DEPDIR)/quake_x11-snd_mem.Tpo" "$(DEPDIR)/quake_x11-snd_mem.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_mem.Tpo"; exit 1; fi
#	source='snd_mem.c' object='quake_x11-snd_mem.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_mem.o `test -f 'snd_mem.c' || echo '$(srcdir)/'`snd_mem.c

quake_x11-snd_mem.obj: snd_mem.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_mem.obj -MD -MP -MF "$(DEPDIR)/quake_x11-snd_mem.Tpo" -c -o quake_x11-snd_mem.obj `if test -f 'snd_mem.c'; then $(CYGPATH_W) 'snd_mem.c'; else $(CYGPATH_W) '$(srcdir)/snd_mem.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-snd_mem.Tpo" "$(DEPDIR)/quake_x11-snd_mem.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_mem.Tpo"; exit 1; fi
#	source='snd_mem.c' object='quake_x11-snd_mem.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_mem.obj `if test -f 'snd_mem.c'; then $(CYGPATH_W) 'snd_mem.c'; else $(CYGPATH_W) '$(srcdir)/snd_mem.c'; fi`

quake_x11-snd_mix.o: snd_mix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_mix.o -MD -MP -MF "$(DEPDIR)/quake_x11-snd_mix.Tpo" -c -o quake_x11-snd_mix.o `test -f 'snd_mix.c' || echo '$(srcdir)/'`snd_mix.c; \
	then mv -f "$(DEPDIR)/quake_x11-snd_mix.Tpo" "$(DEPDIR)/quake_x11-snd_mix.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_mix.Tpo"; exit 1; fi
#	source='snd_mix.c' object='quake_x11-snd_mix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_mix.o `test -f 'snd_mix.c' || echo '$(srcdir)/'`snd_mix.c

quake_x11-snd_mix.obj: snd_mix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_mix.obj -MD -MP -MF "$(DEPDIR)/quake_x11-snd_mix.Tpo" -c -o quake_x11-snd_mix.obj `if test -f 'snd_mix.c'; then $(CYGPATH_W) 'snd_mix.c'; else $(CYGPATH_W) '$(srcdir)/snd_mix.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-snd_mix.Tpo" "$(DEPDIR)/quake_x11-snd_mix.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_mix.Tpo"; exit 1; fi
#	source='snd_mix.c' object='quake_x11-snd_mix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_mix.obj `if test -f 'snd_mix.c'; then $(CYGPATH_W) 'snd_mix.c'; else $(CYGPATH_W) '$(srcdir)/snd_mix.c'; fi`

quake_x11-snd_linux.o: snd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_linux.o -MD -MP -MF "$(DEPDIR)/quake_x11-snd_linux.Tpo" -c -o quake_x11-snd_linux.o `test -f 'snd_linux.c' || echo '$(srcdir)/'`snd_linux.c; \
	then mv -f "$(DEPDIR)/quake_x11-snd_linux.Tpo" "$(DEPDIR)/quake_x11-snd_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_linux.Tpo"; exit 1; fi
#	source='snd_linux.c' object='quake_x11-snd_linux.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_linux.o `test -f 'snd_linux.c' || echo '$(srcdir)/'`snd_linux.c

quake_x11-snd_linux.obj: snd_linux.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -MT quake_x11-snd_linux.obj -MD -MP -MF "$(DEPDIR)/quake_x11-snd_linux.Tpo" -c -o quake_x11-snd_linux.obj `if test -f 'snd_linux.c'; then $(CYGPATH_W) 'snd_linux.c'; else $(CYGPATH_W) '$(srcdir)/snd_linux.c'; fi`; \
	then mv -f "$(DEPDIR)/quake_x11-snd_linux.Tpo" "$(DEPDIR)/quake_x11-snd_linux.Po"; else rm -f "$(DEPDIR)/quake_x11-snd_linux.Tpo"; exit 1; fi
#	source='snd_linux.c' object='quake_x11-snd_linux.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(quake_x11_CFLAGS) $(CFLAGS) -c -o quake_x11-snd_linux.obj `if test -f 'snd_linux.c'; then $(CYGPATH_W) 'snd_linux.c'; else $(CYGPATH_W) '$(srcdir)/snd_linux.c'; fi`

unixded-cl_demo.o: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_demo.o -MD -MP -MF "$(DEPDIR)/unixded-cl_demo.Tpo" -c -o unixded-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c; \
	then mv -f "$(DEPDIR)/unixded-cl_demo.Tpo" "$(DEPDIR)/unixded-cl_demo.Po"; else rm -f "$(DEPDIR)/unixded-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='unixded-cl_demo.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_demo.o `test -f 'cl_demo.c' || echo '$(srcdir)/'`cl_demo.c

unixded-cl_demo.obj: cl_demo.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_demo.obj -MD -MP -MF "$(DEPDIR)/unixded-cl_demo.Tpo" -c -o unixded-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cl_demo.Tpo" "$(DEPDIR)/unixded-cl_demo.Po"; else rm -f "$(DEPDIR)/unixded-cl_demo.Tpo"; exit 1; fi
#	source='cl_demo.c' object='unixded-cl_demo.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_demo.obj `if test -f 'cl_demo.c'; then $(CYGPATH_W) 'cl_demo.c'; else $(CYGPATH_W) '$(srcdir)/cl_demo.c'; fi`

unixded-cl_input.o: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_input.o -MD -MP -MF "$(DEPDIR)/unixded-cl_input.Tpo" -c -o unixded-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c; \
	then mv -f "$(DEPDIR)/unixded-cl_input.Tpo" "$(DEPDIR)/unixded-cl_input.Po"; else rm -f "$(DEPDIR)/unixded-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='unixded-cl_input.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_input.o `test -f 'cl_input.c' || echo '$(srcdir)/'`cl_input.c

unixded-cl_input.obj: cl_input.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_input.obj -MD -MP -MF "$(DEPDIR)/unixded-cl_input.Tpo" -c -o unixded-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cl_input.Tpo" "$(DEPDIR)/unixded-cl_input.Po"; else rm -f "$(DEPDIR)/unixded-cl_input.Tpo"; exit 1; fi
#	source='cl_input.c' object='unixded-cl_input.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_input.obj `if test -f 'cl_input.c'; then $(CYGPATH_W) 'cl_input.c'; else $(CYGPATH_W) '$(srcdir)/cl_input.c'; fi`

unixded-cl_main.o: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_main.o -MD -MP -MF "$(DEPDIR)/unixded-cl_main.Tpo" -c -o unixded-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c; \
	then mv -f "$(DEPDIR)/unixded-cl_main.Tpo" "$(DEPDIR)/unixded-cl_main.Po"; else rm -f "$(DEPDIR)/unixded-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='unixded-cl_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_main.o `test -f 'cl_main.c' || echo '$(srcdir)/'`cl_main.c

unixded-cl_main.obj: cl_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_main.obj -MD -MP -MF "$(DEPDIR)/unixded-cl_main.Tpo" -c -o unixded-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cl_main.Tpo" "$(DEPDIR)/unixded-cl_main.Po"; else rm -f "$(DEPDIR)/unixded-cl_main.Tpo"; exit 1; fi
#	source='cl_main.c' object='unixded-cl_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_main.obj `if test -f 'cl_main.c'; then $(CYGPATH_W) 'cl_main.c'; else $(CYGPATH_W) '$(srcdir)/cl_main.c'; fi`

unixded-cl_parse.o: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_parse.o -MD -MP -MF "$(DEPDIR)/unixded-cl_parse.Tpo" -c -o unixded-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c; \
	then mv -f "$(DEPDIR)/unixded-cl_parse.Tpo" "$(DEPDIR)/unixded-cl_parse.Po"; else rm -f "$(DEPDIR)/unixded-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='unixded-cl_parse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_parse.o `test -f 'cl_parse.c' || echo '$(srcdir)/'`cl_parse.c

unixded-cl_parse.obj: cl_parse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_parse.obj -MD -MP -MF "$(DEPDIR)/unixded-cl_parse.Tpo" -c -o unixded-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cl_parse.Tpo" "$(DEPDIR)/unixded-cl_parse.Po"; else rm -f "$(DEPDIR)/unixded-cl_parse.Tpo"; exit 1; fi
#	source='cl_parse.c' object='unixded-cl_parse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_parse.obj `if test -f 'cl_parse.c'; then $(CYGPATH_W) 'cl_parse.c'; else $(CYGPATH_W) '$(srcdir)/cl_parse.c'; fi`

unixded-cl_tent.o: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_tent.o -MD -MP -MF "$(DEPDIR)/unixded-cl_tent.Tpo" -c -o unixded-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c; \
	then mv -f "$(DEPDIR)/unixded-cl_tent.Tpo" "$(DEPDIR)/unixded-cl_tent.Po"; else rm -f "$(DEPDIR)/unixded-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='unixded-cl_tent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_tent.o `test -f 'cl_tent.c' || echo '$(srcdir)/'`cl_tent.c

unixded-cl_tent.obj: cl_tent.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cl_tent.obj -MD -MP -MF "$(DEPDIR)/unixded-cl_tent.Tpo" -c -o unixded-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cl_tent.Tpo" "$(DEPDIR)/unixded-cl_tent.Po"; else rm -f "$(DEPDIR)/unixded-cl_tent.Tpo"; exit 1; fi
#	source='cl_tent.c' object='unixded-cl_tent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cl_tent.obj `if test -f 'cl_tent.c'; then $(CYGPATH_W) 'cl_tent.c'; else $(CYGPATH_W) '$(srcdir)/cl_tent.c'; fi`

unixded-chase.o: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-chase.o -MD -MP -MF "$(DEPDIR)/unixded-chase.Tpo" -c -o unixded-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c; \
	then mv -f "$(DEPDIR)/unixded-chase.Tpo" "$(DEPDIR)/unixded-chase.Po"; else rm -f "$(DEPDIR)/unixded-chase.Tpo"; exit 1; fi
#	source='chase.c' object='unixded-chase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-chase.o `test -f 'chase.c' || echo '$(srcdir)/'`chase.c

unixded-chase.obj: chase.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-chase.obj -MD -MP -MF "$(DEPDIR)/unixded-chase.Tpo" -c -o unixded-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-chase.Tpo" "$(DEPDIR)/unixded-chase.Po"; else rm -f "$(DEPDIR)/unixded-chase.Tpo"; exit 1; fi
#	source='chase.c' object='unixded-chase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-chase.obj `if test -f 'chase.c'; then $(CYGPATH_W) 'chase.c'; else $(CYGPATH_W) '$(srcdir)/chase.c'; fi`

unixded-cmd.o: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cmd.o -MD -MP -MF "$(DEPDIR)/unixded-cmd.Tpo" -c -o unixded-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c; \
	then mv -f "$(DEPDIR)/unixded-cmd.Tpo" "$(DEPDIR)/unixded-cmd.Po"; else rm -f "$(DEPDIR)/unixded-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='unixded-cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cmd.o `test -f 'cmd.c' || echo '$(srcdir)/'`cmd.c

unixded-cmd.obj: cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cmd.obj -MD -MP -MF "$(DEPDIR)/unixded-cmd.Tpo" -c -o unixded-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cmd.Tpo" "$(DEPDIR)/unixded-cmd.Po"; else rm -f "$(DEPDIR)/unixded-cmd.Tpo"; exit 1; fi
#	source='cmd.c' object='unixded-cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cmd.obj `if test -f 'cmd.c'; then $(CYGPATH_W) 'cmd.c'; else $(CYGPATH_W) '$(srcdir)/cmd.c'; fi`

unixded-common.o: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-common.o -MD -MP -MF "$(DEPDIR)/unixded-common.Tpo" -c -o unixded-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c; \
	then mv -f "$(DEPDIR)/unixded-common.Tpo" "$(DEPDIR)/unixded-common.Po"; else rm -f "$(DEPDIR)/unixded-common.Tpo"; exit 1; fi
#	source='common.c' object='unixded-common.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-common.o `test -f 'common.c' || echo '$(srcdir)/'`common.c

unixded-common.obj: common.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-common.obj -MD -MP -MF "$(DEPDIR)/unixded-common.Tpo" -c -o unixded-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-common.Tpo" "$(DEPDIR)/unixded-common.Po"; else rm -f "$(DEPDIR)/unixded-common.Tpo"; exit 1; fi
#	source='common.c' object='unixded-common.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-common.obj `if test -f 'common.c'; then $(CYGPATH_W) 'common.c'; else $(CYGPATH_W) '$(srcdir)/common.c'; fi`

unixded-console.o: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-console.o -MD -MP -MF "$(DEPDIR)/unixded-console.Tpo" -c -o unixded-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c; \
	then mv -f "$(DEPDIR)/unixded-console.Tpo" "$(DEPDIR)/unixded-console.Po"; else rm -f "$(DEPDIR)/unixded-console.Tpo"; exit 1; fi
#	source='console.c' object='unixded-console.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-console.o `test -f 'console.c' || echo '$(srcdir)/'`console.c

unixded-console.obj: console.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-console.obj -MD -MP -MF "$(DEPDIR)/unixded-console.Tpo" -c -o unixded-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-console.Tpo" "$(DEPDIR)/unixded-console.Po"; else rm -f "$(DEPDIR)/unixded-console.Tpo"; exit 1; fi
#	source='console.c' object='unixded-console.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-console.obj `if test -f 'console.c'; then $(CYGPATH_W) 'console.c'; else $(CYGPATH_W) '$(srcdir)/console.c'; fi`

unixded-crc.o: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-crc.o -MD -MP -MF "$(DEPDIR)/unixded-crc.Tpo" -c -o unixded-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c; \
	then mv -f "$(DEPDIR)/unixded-crc.Tpo" "$(DEPDIR)/unixded-crc.Po"; else rm -f "$(DEPDIR)/unixded-crc.Tpo"; exit 1; fi
#	source='crc.c' object='unixded-crc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-crc.o `test -f 'crc.c' || echo '$(srcdir)/'`crc.c

unixded-crc.obj: crc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-crc.obj -MD -MP -MF "$(DEPDIR)/unixded-crc.Tpo" -c -o unixded-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-crc.Tpo" "$(DEPDIR)/unixded-crc.Po"; else rm -f "$(DEPDIR)/unixded-crc.Tpo"; exit 1; fi
#	source='crc.c' object='unixded-crc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-crc.obj `if test -f 'crc.c'; then $(CYGPATH_W) 'crc.c'; else $(CYGPATH_W) '$(srcdir)/crc.c'; fi`

unixded-cvar.o: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cvar.o -MD -MP -MF "$(DEPDIR)/unixded-cvar.Tpo" -c -o unixded-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c; \
	then mv -f "$(DEPDIR)/unixded-cvar.Tpo" "$(DEPDIR)/unixded-cvar.Po"; else rm -f "$(DEPDIR)/unixded-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='unixded-cvar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cvar.o `test -f 'cvar.c' || echo '$(srcdir)/'`cvar.c

unixded-cvar.obj: cvar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cvar.obj -MD -MP -MF "$(DEPDIR)/unixded-cvar.Tpo" -c -o unixded-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cvar.Tpo" "$(DEPDIR)/unixded-cvar.Po"; else rm -f "$(DEPDIR)/unixded-cvar.Tpo"; exit 1; fi
#	source='cvar.c' object='unixded-cvar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cvar.obj `if test -f 'cvar.c'; then $(CYGPATH_W) 'cvar.c'; else $(CYGPATH_W) '$(srcdir)/cvar.c'; fi`

unixded-draw.o: draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-draw.o -MD -MP -MF "$(DEPDIR)/unixded-draw.Tpo" -c -o unixded-draw.o `test -f 'draw.c' || echo '$(srcdir)/'`draw.c; \
	then mv -f "$(DEPDIR)/unixded-draw.Tpo" "$(DEPDIR)/unixded-draw.Po"; else rm -f "$(DEPDIR)/unixded-draw.Tpo"; exit 1; fi
#	source='draw.c' object='unixded-draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-draw.o `test -f 'draw.c' || echo '$(srcdir)/'`draw.c

unixded-draw.obj: draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-draw.obj -MD -MP -MF "$(DEPDIR)/unixded-draw.Tpo" -c -o unixded-draw.obj `if test -f 'draw.c'; then $(CYGPATH_W) 'draw.c'; else $(CYGPATH_W) '$(srcdir)/draw.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-draw.Tpo" "$(DEPDIR)/unixded-draw.Po"; else rm -f "$(DEPDIR)/unixded-draw.Tpo"; exit 1; fi
#	source='draw.c' object='unixded-draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-draw.obj `if test -f 'draw.c'; then $(CYGPATH_W) 'draw.c'; else $(CYGPATH_W) '$(srcdir)/draw.c'; fi`

unixded-d_edge.o: d_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_edge.o -MD -MP -MF "$(DEPDIR)/unixded-d_edge.Tpo" -c -o unixded-d_edge.o `test -f 'd_edge.c' || echo '$(srcdir)/'`d_edge.c; \
	then mv -f "$(DEPDIR)/unixded-d_edge.Tpo" "$(DEPDIR)/unixded-d_edge.Po"; else rm -f "$(DEPDIR)/unixded-d_edge.Tpo"; exit 1; fi
#	source='d_edge.c' object='unixded-d_edge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_edge.o `test -f 'd_edge.c' || echo '$(srcdir)/'`d_edge.c

unixded-d_edge.obj: d_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_edge.obj -MD -MP -MF "$(DEPDIR)/unixded-d_edge.Tpo" -c -o unixded-d_edge.obj `if test -f 'd_edge.c'; then $(CYGPATH_W) 'd_edge.c'; else $(CYGPATH_W) '$(srcdir)/d_edge.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_edge.Tpo" "$(DEPDIR)/unixded-d_edge.Po"; else rm -f "$(DEPDIR)/unixded-d_edge.Tpo"; exit 1; fi
#	source='d_edge.c' object='unixded-d_edge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_edge.obj `if test -f 'd_edge.c'; then $(CYGPATH_W) 'd_edge.c'; else $(CYGPATH_W) '$(srcdir)/d_edge.c'; fi`

unixded-d_fill.o: d_fill.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_fill.o -MD -MP -MF "$(DEPDIR)/unixded-d_fill.Tpo" -c -o unixded-d_fill.o `test -f 'd_fill.c' || echo '$(srcdir)/'`d_fill.c; \
	then mv -f "$(DEPDIR)/unixded-d_fill.Tpo" "$(DEPDIR)/unixded-d_fill.Po"; else rm -f "$(DEPDIR)/unixded-d_fill.Tpo"; exit 1; fi
#	source='d_fill.c' object='unixded-d_fill.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_fill.o `test -f 'd_fill.c' || echo '$(srcdir)/'`d_fill.c

unixded-d_fill.obj: d_fill.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_fill.obj -MD -MP -MF "$(DEPDIR)/unixded-d_fill.Tpo" -c -o unixded-d_fill.obj `if test -f 'd_fill.c'; then $(CYGPATH_W) 'd_fill.c'; else $(CYGPATH_W) '$(srcdir)/d_fill.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_fill.Tpo" "$(DEPDIR)/unixded-d_fill.Po"; else rm -f "$(DEPDIR)/unixded-d_fill.Tpo"; exit 1; fi
#	source='d_fill.c' object='unixded-d_fill.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_fill.obj `if test -f 'd_fill.c'; then $(CYGPATH_W) 'd_fill.c'; else $(CYGPATH_W) '$(srcdir)/d_fill.c'; fi`

unixded-d_init.o: d_init.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_init.o -MD -MP -MF "$(DEPDIR)/unixded-d_init.Tpo" -c -o unixded-d_init.o `test -f 'd_init.c' || echo '$(srcdir)/'`d_init.c; \
	then mv -f "$(DEPDIR)/unixded-d_init.Tpo" "$(DEPDIR)/unixded-d_init.Po"; else rm -f "$(DEPDIR)/unixded-d_init.Tpo"; exit 1; fi
#	source='d_init.c' object='unixded-d_init.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_init.o `test -f 'd_init.c' || echo '$(srcdir)/'`d_init.c

unixded-d_init.obj: d_init.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_init.obj -MD -MP -MF "$(DEPDIR)/unixded-d_init.Tpo" -c -o unixded-d_init.obj `if test -f 'd_init.c'; then $(CYGPATH_W) 'd_init.c'; else $(CYGPATH_W) '$(srcdir)/d_init.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_init.Tpo" "$(DEPDIR)/unixded-d_init.Po"; else rm -f "$(DEPDIR)/unixded-d_init.Tpo"; exit 1; fi
#	source='d_init.c' object='unixded-d_init.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_init.obj `if test -f 'd_init.c'; then $(CYGPATH_W) 'd_init.c'; else $(CYGPATH_W) '$(srcdir)/d_init.c'; fi`

unixded-d_modech.o: d_modech.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_modech.o -MD -MP -MF "$(DEPDIR)/unixded-d_modech.Tpo" -c -o unixded-d_modech.o `test -f 'd_modech.c' || echo '$(srcdir)/'`d_modech.c; \
	then mv -f "$(DEPDIR)/unixded-d_modech.Tpo" "$(DEPDIR)/unixded-d_modech.Po"; else rm -f "$(DEPDIR)/unixded-d_modech.Tpo"; exit 1; fi
#	source='d_modech.c' object='unixded-d_modech.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_modech.o `test -f 'd_modech.c' || echo '$(srcdir)/'`d_modech.c

unixded-d_modech.obj: d_modech.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_modech.obj -MD -MP -MF "$(DEPDIR)/unixded-d_modech.Tpo" -c -o unixded-d_modech.obj `if test -f 'd_modech.c'; then $(CYGPATH_W) 'd_modech.c'; else $(CYGPATH_W) '$(srcdir)/d_modech.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_modech.Tpo" "$(DEPDIR)/unixded-d_modech.Po"; else rm -f "$(DEPDIR)/unixded-d_modech.Tpo"; exit 1; fi
#	source='d_modech.c' object='unixded-d_modech.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_modech.obj `if test -f 'd_modech.c'; then $(CYGPATH_W) 'd_modech.c'; else $(CYGPATH_W) '$(srcdir)/d_modech.c'; fi`

unixded-d_part.o: d_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_part.o -MD -MP -MF "$(DEPDIR)/unixded-d_part.Tpo" -c -o unixded-d_part.o `test -f 'd_part.c' || echo '$(srcdir)/'`d_part.c; \
	then mv -f "$(DEPDIR)/unixded-d_part.Tpo" "$(DEPDIR)/unixded-d_part.Po"; else rm -f "$(DEPDIR)/unixded-d_part.Tpo"; exit 1; fi
#	source='d_part.c' object='unixded-d_part.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_part.o `test -f 'd_part.c' || echo '$(srcdir)/'`d_part.c

unixded-d_part.obj: d_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_part.obj -MD -MP -MF "$(DEPDIR)/unixded-d_part.Tpo" -c -o unixded-d_part.obj `if test -f 'd_part.c'; then $(CYGPATH_W) 'd_part.c'; else $(CYGPATH_W) '$(srcdir)/d_part.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_part.Tpo" "$(DEPDIR)/unixded-d_part.Po"; else rm -f "$(DEPDIR)/unixded-d_part.Tpo"; exit 1; fi
#	source='d_part.c' object='unixded-d_part.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_part.obj `if test -f 'd_part.c'; then $(CYGPATH_W) 'd_part.c'; else $(CYGPATH_W) '$(srcdir)/d_part.c'; fi`

unixded-d_polyse.o: d_polyse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_polyse.o -MD -MP -MF "$(DEPDIR)/unixded-d_polyse.Tpo" -c -o unixded-d_polyse.o `test -f 'd_polyse.c' || echo '$(srcdir)/'`d_polyse.c; \
	then mv -f "$(DEPDIR)/unixded-d_polyse.Tpo" "$(DEPDIR)/unixded-d_polyse.Po"; else rm -f "$(DEPDIR)/unixded-d_polyse.Tpo"; exit 1; fi
#	source='d_polyse.c' object='unixded-d_polyse.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_polyse.o `test -f 'd_polyse.c' || echo '$(srcdir)/'`d_polyse.c

unixded-d_polyse.obj: d_polyse.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_polyse.obj -MD -MP -MF "$(DEPDIR)/unixded-d_polyse.Tpo" -c -o unixded-d_polyse.obj `if test -f 'd_polyse.c'; then $(CYGPATH_W) 'd_polyse.c'; else $(CYGPATH_W) '$(srcdir)/d_polyse.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_polyse.Tpo" "$(DEPDIR)/unixded-d_polyse.Po"; else rm -f "$(DEPDIR)/unixded-d_polyse.Tpo"; exit 1; fi
#	source='d_polyse.c' object='unixded-d_polyse.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_polyse.obj `if test -f 'd_polyse.c'; then $(CYGPATH_W) 'd_polyse.c'; else $(CYGPATH_W) '$(srcdir)/d_polyse.c'; fi`

unixded-d_scan.o: d_scan.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_scan.o -MD -MP -MF "$(DEPDIR)/unixded-d_scan.Tpo" -c -o unixded-d_scan.o `test -f 'd_scan.c' || echo '$(srcdir)/'`d_scan.c; \
	then mv -f "$(DEPDIR)/unixded-d_scan.Tpo" "$(DEPDIR)/unixded-d_scan.Po"; else rm -f "$(DEPDIR)/unixded-d_scan.Tpo"; exit 1; fi
#	source='d_scan.c' object='unixded-d_scan.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_scan.o `test -f 'd_scan.c' || echo '$(srcdir)/'`d_scan.c

unixded-d_scan.obj: d_scan.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_scan.obj -MD -MP -MF "$(DEPDIR)/unixded-d_scan.Tpo" -c -o unixded-d_scan.obj `if test -f 'd_scan.c'; then $(CYGPATH_W) 'd_scan.c'; else $(CYGPATH_W) '$(srcdir)/d_scan.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_scan.Tpo" "$(DEPDIR)/unixded-d_scan.Po"; else rm -f "$(DEPDIR)/unixded-d_scan.Tpo"; exit 1; fi
#	source='d_scan.c' object='unixded-d_scan.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_scan.obj `if test -f 'd_scan.c'; then $(CYGPATH_W) 'd_scan.c'; else $(CYGPATH_W) '$(srcdir)/d_scan.c'; fi`

unixded-d_sky.o: d_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_sky.o -MD -MP -MF "$(DEPDIR)/unixded-d_sky.Tpo" -c -o unixded-d_sky.o `test -f 'd_sky.c' || echo '$(srcdir)/'`d_sky.c; \
	then mv -f "$(DEPDIR)/unixded-d_sky.Tpo" "$(DEPDIR)/unixded-d_sky.Po"; else rm -f "$(DEPDIR)/unixded-d_sky.Tpo"; exit 1; fi
#	source='d_sky.c' object='unixded-d_sky.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_sky.o `test -f 'd_sky.c' || echo '$(srcdir)/'`d_sky.c

unixded-d_sky.obj: d_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_sky.obj -MD -MP -MF "$(DEPDIR)/unixded-d_sky.Tpo" -c -o unixded-d_sky.obj `if test -f 'd_sky.c'; then $(CYGPATH_W) 'd_sky.c'; else $(CYGPATH_W) '$(srcdir)/d_sky.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_sky.Tpo" "$(DEPDIR)/unixded-d_sky.Po"; else rm -f "$(DEPDIR)/unixded-d_sky.Tpo"; exit 1; fi
#	source='d_sky.c' object='unixded-d_sky.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_sky.obj `if test -f 'd_sky.c'; then $(CYGPATH_W) 'd_sky.c'; else $(CYGPATH_W) '$(srcdir)/d_sky.c'; fi`

unixded-d_sprite.o: d_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_sprite.o -MD -MP -MF "$(DEPDIR)/unixded-d_sprite.Tpo" -c -o unixded-d_sprite.o `test -f 'd_sprite.c' || echo '$(srcdir)/'`d_sprite.c; \
	then mv -f "$(DEPDIR)/unixded-d_sprite.Tpo" "$(DEPDIR)/unixded-d_sprite.Po"; else rm -f "$(DEPDIR)/unixded-d_sprite.Tpo"; exit 1; fi
#	source='d_sprite.c' object='unixded-d_sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_sprite.o `test -f 'd_sprite.c' || echo '$(srcdir)/'`d_sprite.c

unixded-d_sprite.obj: d_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_sprite.obj -MD -MP -MF "$(DEPDIR)/unixded-d_sprite.Tpo" -c -o unixded-d_sprite.obj `if test -f 'd_sprite.c'; then $(CYGPATH_W) 'd_sprite.c'; else $(CYGPATH_W) '$(srcdir)/d_sprite.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_sprite.Tpo" "$(DEPDIR)/unixded-d_sprite.Po"; else rm -f "$(DEPDIR)/unixded-d_sprite.Tpo"; exit 1; fi
#	source='d_sprite.c' object='unixded-d_sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_sprite.obj `if test -f 'd_sprite.c'; then $(CYGPATH_W) 'd_sprite.c'; else $(CYGPATH_W) '$(srcdir)/d_sprite.c'; fi`

unixded-d_surf.o: d_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_surf.o -MD -MP -MF "$(DEPDIR)/unixded-d_surf.Tpo" -c -o unixded-d_surf.o `test -f 'd_surf.c' || echo '$(srcdir)/'`d_surf.c; \
	then mv -f "$(DEPDIR)/unixded-d_surf.Tpo" "$(DEPDIR)/unixded-d_surf.Po"; else rm -f "$(DEPDIR)/unixded-d_surf.Tpo"; exit 1; fi
#	source='d_surf.c' object='unixded-d_surf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_surf.o `test -f 'd_surf.c' || echo '$(srcdir)/'`d_surf.c

unixded-d_surf.obj: d_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_surf.obj -MD -MP -MF "$(DEPDIR)/unixded-d_surf.Tpo" -c -o unixded-d_surf.obj `if test -f 'd_surf.c'; then $(CYGPATH_W) 'd_surf.c'; else $(CYGPATH_W) '$(srcdir)/d_surf.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_surf.Tpo" "$(DEPDIR)/unixded-d_surf.Po"; else rm -f "$(DEPDIR)/unixded-d_surf.Tpo"; exit 1; fi
#	source='d_surf.c' object='unixded-d_surf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_surf.obj `if test -f 'd_surf.c'; then $(CYGPATH_W) 'd_surf.c'; else $(CYGPATH_W) '$(srcdir)/d_surf.c'; fi`

unixded-d_vars.o: d_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_vars.o -MD -MP -MF "$(DEPDIR)/unixded-d_vars.Tpo" -c -o unixded-d_vars.o `test -f 'd_vars.c' || echo '$(srcdir)/'`d_vars.c; \
	then mv -f "$(DEPDIR)/unixded-d_vars.Tpo" "$(DEPDIR)/unixded-d_vars.Po"; else rm -f "$(DEPDIR)/unixded-d_vars.Tpo"; exit 1; fi
#	source='d_vars.c' object='unixded-d_vars.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_vars.o `test -f 'd_vars.c' || echo '$(srcdir)/'`d_vars.c

unixded-d_vars.obj: d_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_vars.obj -MD -MP -MF "$(DEPDIR)/unixded-d_vars.Tpo" -c -o unixded-d_vars.obj `if test -f 'd_vars.c'; then $(CYGPATH_W) 'd_vars.c'; else $(CYGPATH_W) '$(srcdir)/d_vars.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_vars.Tpo" "$(DEPDIR)/unixded-d_vars.Po"; else rm -f "$(DEPDIR)/unixded-d_vars.Tpo"; exit 1; fi
#	source='d_vars.c' object='unixded-d_vars.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_vars.obj `if test -f 'd_vars.c'; then $(CYGPATH_W) 'd_vars.c'; else $(CYGPATH_W) '$(srcdir)/d_vars.c'; fi`

unixded-d_zpoint.o: d_zpoint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_zpoint.o -MD -MP -MF "$(DEPDIR)/unixded-d_zpoint.Tpo" -c -o unixded-d_zpoint.o `test -f 'd_zpoint.c' || echo '$(srcdir)/'`d_zpoint.c; \
	then mv -f "$(DEPDIR)/unixded-d_zpoint.Tpo" "$(DEPDIR)/unixded-d_zpoint.Po"; else rm -f "$(DEPDIR)/unixded-d_zpoint.Tpo"; exit 1; fi
#	source='d_zpoint.c' object='unixded-d_zpoint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_zpoint.o `test -f 'd_zpoint.c' || echo '$(srcdir)/'`d_zpoint.c

unixded-d_zpoint.obj: d_zpoint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-d_zpoint.obj -MD -MP -MF "$(DEPDIR)/unixded-d_zpoint.Tpo" -c -o unixded-d_zpoint.obj `if test -f 'd_zpoint.c'; then $(CYGPATH_W) 'd_zpoint.c'; else $(CYGPATH_W) '$(srcdir)/d_zpoint.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-d_zpoint.Tpo" "$(DEPDIR)/unixded-d_zpoint.Po"; else rm -f "$(DEPDIR)/unixded-d_zpoint.Tpo"; exit 1; fi
#	source='d_zpoint.c' object='unixded-d_zpoint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-d_zpoint.obj `if test -f 'd_zpoint.c'; then $(CYGPATH_W) 'd_zpoint.c'; else $(CYGPATH_W) '$(srcdir)/d_zpoint.c'; fi`

unixded-host.o: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-host.o -MD -MP -MF "$(DEPDIR)/unixded-host.Tpo" -c -o unixded-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c; \
	then mv -f "$(DEPDIR)/unixded-host.Tpo" "$(DEPDIR)/unixded-host.Po"; else rm -f "$(DEPDIR)/unixded-host.Tpo"; exit 1; fi
#	source='host.c' object='unixded-host.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-host.o `test -f 'host.c' || echo '$(srcdir)/'`host.c

unixded-host.obj: host.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-host.obj -MD -MP -MF "$(DEPDIR)/unixded-host.Tpo" -c -o unixded-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-host.Tpo" "$(DEPDIR)/unixded-host.Po"; else rm -f "$(DEPDIR)/unixded-host.Tpo"; exit 1; fi
#	source='host.c' object='unixded-host.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-host.obj `if test -f 'host.c'; then $(CYGPATH_W) 'host.c'; else $(CYGPATH_W) '$(srcdir)/host.c'; fi`

unixded-host_cmd.o: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-host_cmd.o -MD -MP -MF "$(DEPDIR)/unixded-host_cmd.Tpo" -c -o unixded-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c; \
	then mv -f "$(DEPDIR)/unixded-host_cmd.Tpo" "$(DEPDIR)/unixded-host_cmd.Po"; else rm -f "$(DEPDIR)/unixded-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='unixded-host_cmd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-host_cmd.o `test -f 'host_cmd.c' || echo '$(srcdir)/'`host_cmd.c

unixded-host_cmd.obj: host_cmd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-host_cmd.obj -MD -MP -MF "$(DEPDIR)/unixded-host_cmd.Tpo" -c -o unixded-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-host_cmd.Tpo" "$(DEPDIR)/unixded-host_cmd.Po"; else rm -f "$(DEPDIR)/unixded-host_cmd.Tpo"; exit 1; fi
#	source='host_cmd.c' object='unixded-host_cmd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-host_cmd.obj `if test -f 'host_cmd.c'; then $(CYGPATH_W) 'host_cmd.c'; else $(CYGPATH_W) '$(srcdir)/host_cmd.c'; fi`

unixded-iplog.o: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-iplog.o -MD -MP -MF "$(DEPDIR)/unixded-iplog.Tpo" -c -o unixded-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c; \
	then mv -f "$(DEPDIR)/unixded-iplog.Tpo" "$(DEPDIR)/unixded-iplog.Po"; else rm -f "$(DEPDIR)/unixded-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='unixded-iplog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-iplog.o `test -f 'iplog.c' || echo '$(srcdir)/'`iplog.c

unixded-iplog.obj: iplog.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-iplog.obj -MD -MP -MF "$(DEPDIR)/unixded-iplog.Tpo" -c -o unixded-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-iplog.Tpo" "$(DEPDIR)/unixded-iplog.Po"; else rm -f "$(DEPDIR)/unixded-iplog.Tpo"; exit 1; fi
#	source='iplog.c' object='unixded-iplog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-iplog.obj `if test -f 'iplog.c'; then $(CYGPATH_W) 'iplog.c'; else $(CYGPATH_W) '$(srcdir)/iplog.c'; fi`

unixded-keys.o: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-keys.o -MD -MP -MF "$(DEPDIR)/unixded-keys.Tpo" -c -o unixded-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c; \
	then mv -f "$(DEPDIR)/unixded-keys.Tpo" "$(DEPDIR)/unixded-keys.Po"; else rm -f "$(DEPDIR)/unixded-keys.Tpo"; exit 1; fi
#	source='keys.c' object='unixded-keys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-keys.o `test -f 'keys.c' || echo '$(srcdir)/'`keys.c

unixded-keys.obj: keys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-keys.obj -MD -MP -MF "$(DEPDIR)/unixded-keys.Tpo" -c -o unixded-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-keys.Tpo" "$(DEPDIR)/unixded-keys.Po"; else rm -f "$(DEPDIR)/unixded-keys.Tpo"; exit 1; fi
#	source='keys.c' object='unixded-keys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-keys.obj `if test -f 'keys.c'; then $(CYGPATH_W) 'keys.c'; else $(CYGPATH_W) '$(srcdir)/keys.c'; fi`

unixded-location.o: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-location.o -MD -MP -MF "$(DEPDIR)/unixded-location.Tpo" -c -o unixded-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c; \
	then mv -f "$(DEPDIR)/unixded-location.Tpo" "$(DEPDIR)/unixded-location.Po"; else rm -f "$(DEPDIR)/unixded-location.Tpo"; exit 1; fi
#	source='location.c' object='unixded-location.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-location.o `test -f 'location.c' || echo '$(srcdir)/'`location.c

unixded-location.obj: location.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-location.obj -MD -MP -MF "$(DEPDIR)/unixded-location.Tpo" -c -o unixded-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-location.Tpo" "$(DEPDIR)/unixded-location.Po"; else rm -f "$(DEPDIR)/unixded-location.Tpo"; exit 1; fi
#	source='location.c' object='unixded-location.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-location.obj `if test -f 'location.c'; then $(CYGPATH_W) 'location.c'; else $(CYGPATH_W) '$(srcdir)/location.c'; fi`

unixded-matrix.o: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-matrix.o -MD -MP -MF "$(DEPDIR)/unixded-matrix.Tpo" -c -o unixded-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c; \
	then mv -f "$(DEPDIR)/unixded-matrix.Tpo" "$(DEPDIR)/unixded-matrix.Po"; else rm -f "$(DEPDIR)/unixded-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='unixded-matrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-matrix.o `test -f 'matrix.c' || echo '$(srcdir)/'`matrix.c

unixded-matrix.obj: matrix.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-matrix.obj -MD -MP -MF "$(DEPDIR)/unixded-matrix.Tpo" -c -o unixded-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-matrix.Tpo" "$(DEPDIR)/unixded-matrix.Po"; else rm -f "$(DEPDIR)/unixded-matrix.Tpo"; exit 1; fi
#	source='matrix.c' object='unixded-matrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-matrix.obj `if test -f 'matrix.c'; then $(CYGPATH_W) 'matrix.c'; else $(CYGPATH_W) '$(srcdir)/matrix.c'; fi`

unixded-mathlib.o: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-mathlib.o -MD -MP -MF "$(DEPDIR)/unixded-mathlib.Tpo" -c -o unixded-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c; \
	then mv -f "$(DEPDIR)/unixded-mathlib.Tpo" "$(DEPDIR)/unixded-mathlib.Po"; else rm -f "$(DEPDIR)/unixded-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='unixded-mathlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-mathlib.o `test -f 'mathlib.c' || echo '$(srcdir)/'`mathlib.c

unixded-mathlib.obj: mathlib.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-mathlib.obj -MD -MP -MF "$(DEPDIR)/unixded-mathlib.Tpo" -c -o unixded-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-mathlib.Tpo" "$(DEPDIR)/unixded-mathlib.Po"; else rm -f "$(DEPDIR)/unixded-mathlib.Tpo"; exit 1; fi
#	source='mathlib.c' object='unixded-mathlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-mathlib.obj `if test -f 'mathlib.c'; then $(CYGPATH_W) 'mathlib.c'; else $(CYGPATH_W) '$(srcdir)/mathlib.c'; fi`

unixded-menu.o: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-menu.o -MD -MP -MF "$(DEPDIR)/unixded-menu.Tpo" -c -o unixded-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c; \
	then mv -f "$(DEPDIR)/unixded-menu.Tpo" "$(DEPDIR)/unixded-menu.Po"; else rm -f "$(DEPDIR)/unixded-menu.Tpo"; exit 1; fi
#	source='menu.c' object='unixded-menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-menu.o `test -f 'menu.c' || echo '$(srcdir)/'`menu.c

unixded-menu.obj: menu.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-menu.obj -MD -MP -MF "$(DEPDIR)/unixded-menu.Tpo" -c -o unixded-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-menu.Tpo" "$(DEPDIR)/unixded-menu.Po"; else rm -f "$(DEPDIR)/unixded-menu.Tpo"; exit 1; fi
#	source='menu.c' object='unixded-menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-menu.obj `if test -f 'menu.c'; then $(CYGPATH_W) 'menu.c'; else $(CYGPATH_W) '$(srcdir)/menu.c'; fi`

unixded-model.o: model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-model.o -MD -MP -MF "$(DEPDIR)/unixded-model.Tpo" -c -o unixded-model.o `test -f 'model.c' || echo '$(srcdir)/'`model.c; \
	then mv -f "$(DEPDIR)/unixded-model.Tpo" "$(DEPDIR)/unixded-model.Po"; else rm -f "$(DEPDIR)/unixded-model.Tpo"; exit 1; fi
#	source='model.c' object='unixded-model.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-model.o `test -f 'model.c' || echo '$(srcdir)/'`model.c

unixded-model.obj: model.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-model.obj -MD -MP -MF "$(DEPDIR)/unixded-model.Tpo" -c -o unixded-model.obj `if test -f 'model.c'; then $(CYGPATH_W) 'model.c'; else $(CYGPATH_W) '$(srcdir)/model.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-model.Tpo" "$(DEPDIR)/unixded-model.Po"; else rm -f "$(DEPDIR)/unixded-model.Tpo"; exit 1; fi
#	source='model.c' object='unixded-model.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-model.obj `if test -f 'model.c'; then $(CYGPATH_W) 'model.c'; else $(CYGPATH_W) '$(srcdir)/model.c'; fi`

unixded-net_bsd.o: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_bsd.o -MD -MP -MF "$(DEPDIR)/unixded-net_bsd.Tpo" -c -o unixded-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c; \
	then mv -f "$(DEPDIR)/unixded-net_bsd.Tpo" "$(DEPDIR)/unixded-net_bsd.Po"; else rm -f "$(DEPDIR)/unixded-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='unixded-net_bsd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_bsd.o `test -f 'net_bsd.c' || echo '$(srcdir)/'`net_bsd.c

unixded-net_bsd.obj: net_bsd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_bsd.obj -MD -MP -MF "$(DEPDIR)/unixded-net_bsd.Tpo" -c -o unixded-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_bsd.Tpo" "$(DEPDIR)/unixded-net_bsd.Po"; else rm -f "$(DEPDIR)/unixded-net_bsd.Tpo"; exit 1; fi
#	source='net_bsd.c' object='unixded-net_bsd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_bsd.obj `if test -f 'net_bsd.c'; then $(CYGPATH_W) 'net_bsd.c'; else $(CYGPATH_W) '$(srcdir)/net_bsd.c'; fi`

unixded-net_dgrm.o: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_dgrm.o -MD -MP -MF "$(DEPDIR)/unixded-net_dgrm.Tpo" -c -o unixded-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c; \
	then mv -f "$(DEPDIR)/unixded-net_dgrm.Tpo" "$(DEPDIR)/unixded-net_dgrm.Po"; else rm -f "$(DEPDIR)/unixded-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='unixded-net_dgrm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_dgrm.o `test -f 'net_dgrm.c' || echo '$(srcdir)/'`net_dgrm.c

unixded-net_dgrm.obj: net_dgrm.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_dgrm.obj -MD -MP -MF "$(DEPDIR)/unixded-net_dgrm.Tpo" -c -o unixded-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_dgrm.Tpo" "$(DEPDIR)/unixded-net_dgrm.Po"; else rm -f "$(DEPDIR)/unixded-net_dgrm.Tpo"; exit 1; fi
#	source='net_dgrm.c' object='unixded-net_dgrm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_dgrm.obj `if test -f 'net_dgrm.c'; then $(CYGPATH_W) 'net_dgrm.c'; else $(CYGPATH_W) '$(srcdir)/net_dgrm.c'; fi`

unixded-net_loop.o: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_loop.o -MD -MP -MF "$(DEPDIR)/unixded-net_loop.Tpo" -c -o unixded-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c; \
	then mv -f "$(DEPDIR)/unixded-net_loop.Tpo" "$(DEPDIR)/unixded-net_loop.Po"; else rm -f "$(DEPDIR)/unixded-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='unixded-net_loop.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_loop.o `test -f 'net_loop.c' || echo '$(srcdir)/'`net_loop.c

unixded-net_loop.obj: net_loop.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_loop.obj -MD -MP -MF "$(DEPDIR)/unixded-net_loop.Tpo" -c -o unixded-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_loop.Tpo" "$(DEPDIR)/unixded-net_loop.Po"; else rm -f "$(DEPDIR)/unixded-net_loop.Tpo"; exit 1; fi
#	source='net_loop.c' object='unixded-net_loop.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_loop.obj `if test -f 'net_loop.c'; then $(CYGPATH_W) 'net_loop.c'; else $(CYGPATH_W) '$(srcdir)/net_loop.c'; fi`

unixded-net_main.o: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_main.o -MD -MP -MF "$(DEPDIR)/unixded-net_main.Tpo" -c -o unixded-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c; \
	then mv -f "$(DEPDIR)/unixded-net_main.Tpo" "$(DEPDIR)/unixded-net_main.Po"; else rm -f "$(DEPDIR)/unixded-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='unixded-net_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_main.o `test -f 'net_main.c' || echo '$(srcdir)/'`net_main.c

unixded-net_main.obj: net_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_main.obj -MD -MP -MF "$(DEPDIR)/unixded-net_main.Tpo" -c -o unixded-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_main.Tpo" "$(DEPDIR)/unixded-net_main.Po"; else rm -f "$(DEPDIR)/unixded-net_main.Tpo"; exit 1; fi
#	source='net_main.c' object='unixded-net_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_main.obj `if test -f 'net_main.c'; then $(CYGPATH_W) 'net_main.c'; else $(CYGPATH_W) '$(srcdir)/net_main.c'; fi`

unixded-net_udp.o: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_udp.o -MD -MP -MF "$(DEPDIR)/unixded-net_udp.Tpo" -c -o unixded-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c; \
	then mv -f "$(DEPDIR)/unixded-net_udp.Tpo" "$(DEPDIR)/unixded-net_udp.Po"; else rm -f "$(DEPDIR)/unixded-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='unixded-net_udp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_udp.o `test -f 'net_udp.c' || echo '$(srcdir)/'`net_udp.c

unixded-net_udp.obj: net_udp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_udp.obj -MD -MP -MF "$(DEPDIR)/unixded-net_udp.Tpo" -c -o unixded-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_udp.Tpo" "$(DEPDIR)/unixded-net_udp.Po"; else rm -f "$(DEPDIR)/unixded-net_udp.Tpo"; exit 1; fi
#	source='net_udp.c' object='unixded-net_udp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_udp.obj `if test -f 'net_udp.c'; then $(CYGPATH_W) 'net_udp.c'; else $(CYGPATH_W) '$(srcdir)/net_udp.c'; fi`

unixded-net_vcr.o: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_vcr.o -MD -MP -MF "$(DEPDIR)/unixded-net_vcr.Tpo" -c -o unixded-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c; \
	then mv -f "$(DEPDIR)/unixded-net_vcr.Tpo" "$(DEPDIR)/unixded-net_vcr.Po"; else rm -f "$(DEPDIR)/unixded-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='unixded-net_vcr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_vcr.o `test -f 'net_vcr.c' || echo '$(srcdir)/'`net_vcr.c

unixded-net_vcr.obj: net_vcr.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-net_vcr.obj -MD -MP -MF "$(DEPDIR)/unixded-net_vcr.Tpo" -c -o unixded-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-net_vcr.Tpo" "$(DEPDIR)/unixded-net_vcr.Po"; else rm -f "$(DEPDIR)/unixded-net_vcr.Tpo"; exit 1; fi
#	source='net_vcr.c' object='unixded-net_vcr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-net_vcr.obj `if test -f 'net_vcr.c'; then $(CYGPATH_W) 'net_vcr.c'; else $(CYGPATH_W) '$(srcdir)/net_vcr.c'; fi`

unixded-nonintel.o: nonintel.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-nonintel.o -MD -MP -MF "$(DEPDIR)/unixded-nonintel.Tpo" -c -o unixded-nonintel.o `test -f 'nonintel.c' || echo '$(srcdir)/'`nonintel.c; \
	then mv -f "$(DEPDIR)/unixded-nonintel.Tpo" "$(DEPDIR)/unixded-nonintel.Po"; else rm -f "$(DEPDIR)/unixded-nonintel.Tpo"; exit 1; fi
#	source='nonintel.c' object='unixded-nonintel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-nonintel.o `test -f 'nonintel.c' || echo '$(srcdir)/'`nonintel.c

unixded-nonintel.obj: nonintel.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-nonintel.obj -MD -MP -MF "$(DEPDIR)/unixded-nonintel.Tpo" -c -o unixded-nonintel.obj `if test -f 'nonintel.c'; then $(CYGPATH_W) 'nonintel.c'; else $(CYGPATH_W) '$(srcdir)/nonintel.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-nonintel.Tpo" "$(DEPDIR)/unixded-nonintel.Po"; else rm -f "$(DEPDIR)/unixded-nonintel.Tpo"; exit 1; fi
#	source='nonintel.c' object='unixded-nonintel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-nonintel.obj `if test -f 'nonintel.c'; then $(CYGPATH_W) 'nonintel.c'; else $(CYGPATH_W) '$(srcdir)/nonintel.c'; fi`

unixded-pr_cmds.o: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_cmds.o -MD -MP -MF "$(DEPDIR)/unixded-pr_cmds.Tpo" -c -o unixded-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c; \
	then mv -f "$(DEPDIR)/unixded-pr_cmds.Tpo" "$(DEPDIR)/unixded-pr_cmds.Po"; else rm -f "$(DEPDIR)/unixded-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='unixded-pr_cmds.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_cmds.o `test -f 'pr_cmds.c' || echo '$(srcdir)/'`pr_cmds.c

unixded-pr_cmds.obj: pr_cmds.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_cmds.obj -MD -MP -MF "$(DEPDIR)/unixded-pr_cmds.Tpo" -c -o unixded-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-pr_cmds.Tpo" "$(DEPDIR)/unixded-pr_cmds.Po"; else rm -f "$(DEPDIR)/unixded-pr_cmds.Tpo"; exit 1; fi
#	source='pr_cmds.c' object='unixded-pr_cmds.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_cmds.obj `if test -f 'pr_cmds.c'; then $(CYGPATH_W) 'pr_cmds.c'; else $(CYGPATH_W) '$(srcdir)/pr_cmds.c'; fi`

unixded-pr_edict.o: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_edict.o -MD -MP -MF "$(DEPDIR)/unixded-pr_edict.Tpo" -c -o unixded-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c; \
	then mv -f "$(DEPDIR)/unixded-pr_edict.Tpo" "$(DEPDIR)/unixded-pr_edict.Po"; else rm -f "$(DEPDIR)/unixded-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='unixded-pr_edict.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_edict.o `test -f 'pr_edict.c' || echo '$(srcdir)/'`pr_edict.c

unixded-pr_edict.obj: pr_edict.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_edict.obj -MD -MP -MF "$(DEPDIR)/unixded-pr_edict.Tpo" -c -o unixded-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-pr_edict.Tpo" "$(DEPDIR)/unixded-pr_edict.Po"; else rm -f "$(DEPDIR)/unixded-pr_edict.Tpo"; exit 1; fi
#	source='pr_edict.c' object='unixded-pr_edict.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_edict.obj `if test -f 'pr_edict.c'; then $(CYGPATH_W) 'pr_edict.c'; else $(CYGPATH_W) '$(srcdir)/pr_edict.c'; fi`

unixded-pr_exec.o: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_exec.o -MD -MP -MF "$(DEPDIR)/unixded-pr_exec.Tpo" -c -o unixded-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c; \
	then mv -f "$(DEPDIR)/unixded-pr_exec.Tpo" "$(DEPDIR)/unixded-pr_exec.Po"; else rm -f "$(DEPDIR)/unixded-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='unixded-pr_exec.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_exec.o `test -f 'pr_exec.c' || echo '$(srcdir)/'`pr_exec.c

unixded-pr_exec.obj: pr_exec.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-pr_exec.obj -MD -MP -MF "$(DEPDIR)/unixded-pr_exec.Tpo" -c -o unixded-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-pr_exec.Tpo" "$(DEPDIR)/unixded-pr_exec.Po"; else rm -f "$(DEPDIR)/unixded-pr_exec.Tpo"; exit 1; fi
#	source='pr_exec.c' object='unixded-pr_exec.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-pr_exec.obj `if test -f 'pr_exec.c'; then $(CYGPATH_W) 'pr_exec.c'; else $(CYGPATH_W) '$(srcdir)/pr_exec.c'; fi`

unixded-r_aclip.o: r_aclip.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_aclip.o -MD -MP -MF "$(DEPDIR)/unixded-r_aclip.Tpo" -c -o unixded-r_aclip.o `test -f 'r_aclip.c' || echo '$(srcdir)/'`r_aclip.c; \
	then mv -f "$(DEPDIR)/unixded-r_aclip.Tpo" "$(DEPDIR)/unixded-r_aclip.Po"; else rm -f "$(DEPDIR)/unixded-r_aclip.Tpo"; exit 1; fi
#	source='r_aclip.c' object='unixded-r_aclip.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_aclip.o `test -f 'r_aclip.c' || echo '$(srcdir)/'`r_aclip.c

unixded-r_aclip.obj: r_aclip.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_aclip.obj -MD -MP -MF "$(DEPDIR)/unixded-r_aclip.Tpo" -c -o unixded-r_aclip.obj `if test -f 'r_aclip.c'; then $(CYGPATH_W) 'r_aclip.c'; else $(CYGPATH_W) '$(srcdir)/r_aclip.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_aclip.Tpo" "$(DEPDIR)/unixded-r_aclip.Po"; else rm -f "$(DEPDIR)/unixded-r_aclip.Tpo"; exit 1; fi
#	source='r_aclip.c' object='unixded-r_aclip.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_aclip.obj `if test -f 'r_aclip.c'; then $(CYGPATH_W) 'r_aclip.c'; else $(CYGPATH_W) '$(srcdir)/r_aclip.c'; fi`

unixded-r_alias.o: r_alias.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_alias.o -MD -MP -MF "$(DEPDIR)/unixded-r_alias.Tpo" -c -o unixded-r_alias.o `test -f 'r_alias.c' || echo '$(srcdir)/'`r_alias.c; \
	then mv -f "$(DEPDIR)/unixded-r_alias.Tpo" "$(DEPDIR)/unixded-r_alias.Po"; else rm -f "$(DEPDIR)/unixded-r_alias.Tpo"; exit 1; fi
#	source='r_alias.c' object='unixded-r_alias.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_alias.o `test -f 'r_alias.c' || echo '$(srcdir)/'`r_alias.c

unixded-r_alias.obj: r_alias.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_alias.obj -MD -MP -MF "$(DEPDIR)/unixded-r_alias.Tpo" -c -o unixded-r_alias.obj `if test -f 'r_alias.c'; then $(CYGPATH_W) 'r_alias.c'; else $(CYGPATH_W) '$(srcdir)/r_alias.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_alias.Tpo" "$(DEPDIR)/unixded-r_alias.Po"; else rm -f "$(DEPDIR)/unixded-r_alias.Tpo"; exit 1; fi
#	source='r_alias.c' object='unixded-r_alias.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_alias.obj `if test -f 'r_alias.c'; then $(CYGPATH_W) 'r_alias.c'; else $(CYGPATH_W) '$(srcdir)/r_alias.c'; fi`

unixded-r_bsp.o: r_bsp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_bsp.o -MD -MP -MF "$(DEPDIR)/unixded-r_bsp.Tpo" -c -o unixded-r_bsp.o `test -f 'r_bsp.c' || echo '$(srcdir)/'`r_bsp.c; \
	then mv -f "$(DEPDIR)/unixded-r_bsp.Tpo" "$(DEPDIR)/unixded-r_bsp.Po"; else rm -f "$(DEPDIR)/unixded-r_bsp.Tpo"; exit 1; fi
#	source='r_bsp.c' object='unixded-r_bsp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_bsp.o `test -f 'r_bsp.c' || echo '$(srcdir)/'`r_bsp.c

unixded-r_bsp.obj: r_bsp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_bsp.obj -MD -MP -MF "$(DEPDIR)/unixded-r_bsp.Tpo" -c -o unixded-r_bsp.obj `if test -f 'r_bsp.c'; then $(CYGPATH_W) 'r_bsp.c'; else $(CYGPATH_W) '$(srcdir)/r_bsp.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_bsp.Tpo" "$(DEPDIR)/unixded-r_bsp.Po"; else rm -f "$(DEPDIR)/unixded-r_bsp.Tpo"; exit 1; fi
#	source='r_bsp.c' object='unixded-r_bsp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_bsp.obj `if test -f 'r_bsp.c'; then $(CYGPATH_W) 'r_bsp.c'; else $(CYGPATH_W) '$(srcdir)/r_bsp.c'; fi`

unixded-r_light.o: r_light.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_light.o -MD -MP -MF "$(DEPDIR)/unixded-r_light.Tpo" -c -o unixded-r_light.o `test -f 'r_light.c' || echo '$(srcdir)/'`r_light.c; \
	then mv -f "$(DEPDIR)/unixded-r_light.Tpo" "$(DEPDIR)/unixded-r_light.Po"; else rm -f "$(DEPDIR)/unixded-r_light.Tpo"; exit 1; fi
#	source='r_light.c' object='unixded-r_light.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_light.o `test -f 'r_light.c' || echo '$(srcdir)/'`r_light.c

unixded-r_light.obj: r_light.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_light.obj -MD -MP -MF "$(DEPDIR)/unixded-r_light.Tpo" -c -o unixded-r_light.obj `if test -f 'r_light.c'; then $(CYGPATH_W) 'r_light.c'; else $(CYGPATH_W) '$(srcdir)/r_light.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_light.Tpo" "$(DEPDIR)/unixded-r_light.Po"; else rm -f "$(DEPDIR)/unixded-r_light.Tpo"; exit 1; fi
#	source='r_light.c' object='unixded-r_light.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_light.obj `if test -f 'r_light.c'; then $(CYGPATH_W) 'r_light.c'; else $(CYGPATH_W) '$(srcdir)/r_light.c'; fi`

unixded-r_draw.o: r_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_draw.o -MD -MP -MF "$(DEPDIR)/unixded-r_draw.Tpo" -c -o unixded-r_draw.o `test -f 'r_draw.c' || echo '$(srcdir)/'`r_draw.c; \
	then mv -f "$(DEPDIR)/unixded-r_draw.Tpo" "$(DEPDIR)/unixded-r_draw.Po"; else rm -f "$(DEPDIR)/unixded-r_draw.Tpo"; exit 1; fi
#	source='r_draw.c' object='unixded-r_draw.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_draw.o `test -f 'r_draw.c' || echo '$(srcdir)/'`r_draw.c

unixded-r_draw.obj: r_draw.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_draw.obj -MD -MP -MF "$(DEPDIR)/unixded-r_draw.Tpo" -c -o unixded-r_draw.obj `if test -f 'r_draw.c'; then $(CYGPATH_W) 'r_draw.c'; else $(CYGPATH_W) '$(srcdir)/r_draw.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_draw.Tpo" "$(DEPDIR)/unixded-r_draw.Po"; else rm -f "$(DEPDIR)/unixded-r_draw.Tpo"; exit 1; fi
#	source='r_draw.c' object='unixded-r_draw.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_draw.obj `if test -f 'r_draw.c'; then $(CYGPATH_W) 'r_draw.c'; else $(CYGPATH_W) '$(srcdir)/r_draw.c'; fi`

unixded-r_efrag.o: r_efrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_efrag.o -MD -MP -MF "$(DEPDIR)/unixded-r_efrag.Tpo" -c -o unixded-r_efrag.o `test -f 'r_efrag.c' || echo '$(srcdir)/'`r_efrag.c; \
	then mv -f "$(DEPDIR)/unixded-r_efrag.Tpo" "$(DEPDIR)/unixded-r_efrag.Po"; else rm -f "$(DEPDIR)/unixded-r_efrag.Tpo"; exit 1; fi
#	source='r_efrag.c' object='unixded-r_efrag.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_efrag.o `test -f 'r_efrag.c' || echo '$(srcdir)/'`r_efrag.c

unixded-r_efrag.obj: r_efrag.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_efrag.obj -MD -MP -MF "$(DEPDIR)/unixded-r_efrag.Tpo" -c -o unixded-r_efrag.obj `if test -f 'r_efrag.c'; then $(CYGPATH_W) 'r_efrag.c'; else $(CYGPATH_W) '$(srcdir)/r_efrag.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_efrag.Tpo" "$(DEPDIR)/unixded-r_efrag.Po"; else rm -f "$(DEPDIR)/unixded-r_efrag.Tpo"; exit 1; fi
#	source='r_efrag.c' object='unixded-r_efrag.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_efrag.obj `if test -f 'r_efrag.c'; then $(CYGPATH_W) 'r_efrag.c'; else $(CYGPATH_W) '$(srcdir)/r_efrag.c'; fi`

unixded-r_edge.o: r_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_edge.o -MD -MP -MF "$(DEPDIR)/unixded-r_edge.Tpo" -c -o unixded-r_edge.o `test -f 'r_edge.c' || echo '$(srcdir)/'`r_edge.c; \
	then mv -f "$(DEPDIR)/unixded-r_edge.Tpo" "$(DEPDIR)/unixded-r_edge.Po"; else rm -f "$(DEPDIR)/unixded-r_edge.Tpo"; exit 1; fi
#	source='r_edge.c' object='unixded-r_edge.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_edge.o `test -f 'r_edge.c' || echo '$(srcdir)/'`r_edge.c

unixded-r_edge.obj: r_edge.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_edge.obj -MD -MP -MF "$(DEPDIR)/unixded-r_edge.Tpo" -c -o unixded-r_edge.obj `if test -f 'r_edge.c'; then $(CYGPATH_W) 'r_edge.c'; else $(CYGPATH_W) '$(srcdir)/r_edge.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_edge.Tpo" "$(DEPDIR)/unixded-r_edge.Po"; else rm -f "$(DEPDIR)/unixded-r_edge.Tpo"; exit 1; fi
#	source='r_edge.c' object='unixded-r_edge.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_edge.obj `if test -f 'r_edge.c'; then $(CYGPATH_W) 'r_edge.c'; else $(CYGPATH_W) '$(srcdir)/r_edge.c'; fi`

unixded-r_misc.o: r_misc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_misc.o -MD -MP -MF "$(DEPDIR)/unixded-r_misc.Tpo" -c -o unixded-r_misc.o `test -f 'r_misc.c' || echo '$(srcdir)/'`r_misc.c; \
	then mv -f "$(DEPDIR)/unixded-r_misc.Tpo" "$(DEPDIR)/unixded-r_misc.Po"; else rm -f "$(DEPDIR)/unixded-r_misc.Tpo"; exit 1; fi
#	source='r_misc.c' object='unixded-r_misc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_misc.o `test -f 'r_misc.c' || echo '$(srcdir)/'`r_misc.c

unixded-r_misc.obj: r_misc.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_misc.obj -MD -MP -MF "$(DEPDIR)/unixded-r_misc.Tpo" -c -o unixded-r_misc.obj `if test -f 'r_misc.c'; then $(CYGPATH_W) 'r_misc.c'; else $(CYGPATH_W) '$(srcdir)/r_misc.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_misc.Tpo" "$(DEPDIR)/unixded-r_misc.Po"; else rm -f "$(DEPDIR)/unixded-r_misc.Tpo"; exit 1; fi
#	source='r_misc.c' object='unixded-r_misc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_misc.obj `if test -f 'r_misc.c'; then $(CYGPATH_W) 'r_misc.c'; else $(CYGPATH_W) '$(srcdir)/r_misc.c'; fi`

unixded-r_main.o: r_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_main.o -MD -MP -MF "$(DEPDIR)/unixded-r_main.Tpo" -c -o unixded-r_main.o `test -f 'r_main.c' || echo '$(srcdir)/'`r_main.c; \
	then mv -f "$(DEPDIR)/unixded-r_main.Tpo" "$(DEPDIR)/unixded-r_main.Po"; else rm -f "$(DEPDIR)/unixded-r_main.Tpo"; exit 1; fi
#	source='r_main.c' object='unixded-r_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_main.o `test -f 'r_main.c' || echo '$(srcdir)/'`r_main.c

unixded-r_main.obj: r_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_main.obj -MD -MP -MF "$(DEPDIR)/unixded-r_main.Tpo" -c -o unixded-r_main.obj `if test -f 'r_main.c'; then $(CYGPATH_W) 'r_main.c'; else $(CYGPATH_W) '$(srcdir)/r_main.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_main.Tpo" "$(DEPDIR)/unixded-r_main.Po"; else rm -f "$(DEPDIR)/unixded-r_main.Tpo"; exit 1; fi
#	source='r_main.c' object='unixded-r_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_main.obj `if test -f 'r_main.c'; then $(CYGPATH_W) 'r_main.c'; else $(CYGPATH_W) '$(srcdir)/r_main.c'; fi`

unixded-r_sky.o: r_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_sky.o -MD -MP -MF "$(DEPDIR)/unixded-r_sky.Tpo" -c -o unixded-r_sky.o `test -f 'r_sky.c' || echo '$(srcdir)/'`r_sky.c; \
	then mv -f "$(DEPDIR)/unixded-r_sky.Tpo" "$(DEPDIR)/unixded-r_sky.Po"; else rm -f "$(DEPDIR)/unixded-r_sky.Tpo"; exit 1; fi
#	source='r_sky.c' object='unixded-r_sky.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_sky.o `test -f 'r_sky.c' || echo '$(srcdir)/'`r_sky.c

unixded-r_sky.obj: r_sky.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_sky.obj -MD -MP -MF "$(DEPDIR)/unixded-r_sky.Tpo" -c -o unixded-r_sky.obj `if test -f 'r_sky.c'; then $(CYGPATH_W) 'r_sky.c'; else $(CYGPATH_W) '$(srcdir)/r_sky.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_sky.Tpo" "$(DEPDIR)/unixded-r_sky.Po"; else rm -f "$(DEPDIR)/unixded-r_sky.Tpo"; exit 1; fi
#	source='r_sky.c' object='unixded-r_sky.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_sky.obj `if test -f 'r_sky.c'; then $(CYGPATH_W) 'r_sky.c'; else $(CYGPATH_W) '$(srcdir)/r_sky.c'; fi`

unixded-r_sprite.o: r_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_sprite.o -MD -MP -MF "$(DEPDIR)/unixded-r_sprite.Tpo" -c -o unixded-r_sprite.o `test -f 'r_sprite.c' || echo '$(srcdir)/'`r_sprite.c; \
	then mv -f "$(DEPDIR)/unixded-r_sprite.Tpo" "$(DEPDIR)/unixded-r_sprite.Po"; else rm -f "$(DEPDIR)/unixded-r_sprite.Tpo"; exit 1; fi
#	source='r_sprite.c' object='unixded-r_sprite.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_sprite.o `test -f 'r_sprite.c' || echo '$(srcdir)/'`r_sprite.c

unixded-r_sprite.obj: r_sprite.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_sprite.obj -MD -MP -MF "$(DEPDIR)/unixded-r_sprite.Tpo" -c -o unixded-r_sprite.obj `if test -f 'r_sprite.c'; then $(CYGPATH_W) 'r_sprite.c'; else $(CYGPATH_W) '$(srcdir)/r_sprite.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_sprite.Tpo" "$(DEPDIR)/unixded-r_sprite.Po"; else rm -f "$(DEPDIR)/unixded-r_sprite.Tpo"; exit 1; fi
#	source='r_sprite.c' object='unixded-r_sprite.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_sprite.obj `if test -f 'r_sprite.c'; then $(CYGPATH_W) 'r_sprite.c'; else $(CYGPATH_W) '$(srcdir)/r_sprite.c'; fi`

unixded-r_surf.o: r_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_surf.o -MD -MP -MF "$(DEPDIR)/unixded-r_surf.Tpo" -c -o unixded-r_surf.o `test -f 'r_surf.c' || echo '$(srcdir)/'`r_surf.c; \
	then mv -f "$(DEPDIR)/unixded-r_surf.Tpo" "$(DEPDIR)/unixded-r_surf.Po"; else rm -f "$(DEPDIR)/unixded-r_surf.Tpo"; exit 1; fi
#	source='r_surf.c' object='unixded-r_surf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_surf.o `test -f 'r_surf.c' || echo '$(srcdir)/'`r_surf.c

unixded-r_surf.obj: r_surf.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_surf.obj -MD -MP -MF "$(DEPDIR)/unixded-r_surf.Tpo" -c -o unixded-r_surf.obj `if test -f 'r_surf.c'; then $(CYGPATH_W) 'r_surf.c'; else $(CYGPATH_W) '$(srcdir)/r_surf.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_surf.Tpo" "$(DEPDIR)/unixded-r_surf.Po"; else rm -f "$(DEPDIR)/unixded-r_surf.Tpo"; exit 1; fi
#	source='r_surf.c' object='unixded-r_surf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_surf.obj `if test -f 'r_surf.c'; then $(CYGPATH_W) 'r_surf.c'; else $(CYGPATH_W) '$(srcdir)/r_surf.c'; fi`

unixded-r_part.o: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_part.o -MD -MP -MF "$(DEPDIR)/unixded-r_part.Tpo" -c -o unixded-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c; \
	then mv -f "$(DEPDIR)/unixded-r_part.Tpo" "$(DEPDIR)/unixded-r_part.Po"; else rm -f "$(DEPDIR)/unixded-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='unixded-r_part.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_part.o `test -f 'r_part.c' || echo '$(srcdir)/'`r_part.c

unixded-r_part.obj: r_part.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_part.obj -MD -MP -MF "$(DEPDIR)/unixded-r_part.Tpo" -c -o unixded-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_part.Tpo" "$(DEPDIR)/unixded-r_part.Po"; else rm -f "$(DEPDIR)/unixded-r_part.Tpo"; exit 1; fi
#	source='r_part.c' object='unixded-r_part.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_part.obj `if test -f 'r_part.c'; then $(CYGPATH_W) 'r_part.c'; else $(CYGPATH_W) '$(srcdir)/r_part.c'; fi`

unixded-r_vars.o: r_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_vars.o -MD -MP -MF "$(DEPDIR)/unixded-r_vars.Tpo" -c -o unixded-r_vars.o `test -f 'r_vars.c' || echo '$(srcdir)/'`r_vars.c; \
	then mv -f "$(DEPDIR)/unixded-r_vars.Tpo" "$(DEPDIR)/unixded-r_vars.Po"; else rm -f "$(DEPDIR)/unixded-r_vars.Tpo"; exit 1; fi
#	source='r_vars.c' object='unixded-r_vars.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_vars.o `test -f 'r_vars.c' || echo '$(srcdir)/'`r_vars.c

unixded-r_vars.obj: r_vars.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-r_vars.obj -MD -MP -MF "$(DEPDIR)/unixded-r_vars.Tpo" -c -o unixded-r_vars.obj `if test -f 'r_vars.c'; then $(CYGPATH_W) 'r_vars.c'; else $(CYGPATH_W) '$(srcdir)/r_vars.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-r_vars.Tpo" "$(DEPDIR)/unixded-r_vars.Po"; else rm -f "$(DEPDIR)/unixded-r_vars.Tpo"; exit 1; fi
#	source='r_vars.c' object='unixded-r_vars.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-r_vars.obj `if test -f 'r_vars.c'; then $(CYGPATH_W) 'r_vars.c'; else $(CYGPATH_W) '$(srcdir)/r_vars.c'; fi`

unixded-sbar.o: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sbar.o -MD -MP -MF "$(DEPDIR)/unixded-sbar.Tpo" -c -o unixded-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c; \
	then mv -f "$(DEPDIR)/unixded-sbar.Tpo" "$(DEPDIR)/unixded-sbar.Po"; else rm -f "$(DEPDIR)/unixded-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='unixded-sbar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sbar.o `test -f 'sbar.c' || echo '$(srcdir)/'`sbar.c

unixded-sbar.obj: sbar.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sbar.obj -MD -MP -MF "$(DEPDIR)/unixded-sbar.Tpo" -c -o unixded-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sbar.Tpo" "$(DEPDIR)/unixded-sbar.Po"; else rm -f "$(DEPDIR)/unixded-sbar.Tpo"; exit 1; fi
#	source='sbar.c' object='unixded-sbar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sbar.obj `if test -f 'sbar.c'; then $(CYGPATH_W) 'sbar.c'; else $(CYGPATH_W) '$(srcdir)/sbar.c'; fi`

unixded-screen.o: screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-screen.o -MD -MP -MF "$(DEPDIR)/unixded-screen.Tpo" -c -o unixded-screen.o `test -f 'screen.c' || echo '$(srcdir)/'`screen.c; \
	then mv -f "$(DEPDIR)/unixded-screen.Tpo" "$(DEPDIR)/unixded-screen.Po"; else rm -f "$(DEPDIR)/unixded-screen.Tpo"; exit 1; fi
#	source='screen.c' object='unixded-screen.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-screen.o `test -f 'screen.c' || echo '$(srcdir)/'`screen.c

unixded-screen.obj: screen.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-screen.obj -MD -MP -MF "$(DEPDIR)/unixded-screen.Tpo" -c -o unixded-screen.obj `if test -f 'screen.c'; then $(CYGPATH_W) 'screen.c'; else $(CYGPATH_W) '$(srcdir)/screen.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-screen.Tpo" "$(DEPDIR)/unixded-screen.Po"; else rm -f "$(DEPDIR)/unixded-screen.Tpo"; exit 1; fi
#	source='screen.c' object='unixded-screen.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-screen.obj `if test -f 'screen.c'; then $(CYGPATH_W) 'screen.c'; else $(CYGPATH_W) '$(srcdir)/screen.c'; fi`

unixded-security.o: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-security.o -MD -MP -MF "$(DEPDIR)/unixded-security.Tpo" -c -o unixded-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c; \
	then mv -f "$(DEPDIR)/unixded-security.Tpo" "$(DEPDIR)/unixded-security.Po"; else rm -f "$(DEPDIR)/unixded-security.Tpo"; exit 1; fi
#	source='security.c' object='unixded-security.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-security.o `test -f 'security.c' || echo '$(srcdir)/'`security.c

unixded-security.obj: security.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-security.obj -MD -MP -MF "$(DEPDIR)/unixded-security.Tpo" -c -o unixded-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-security.Tpo" "$(DEPDIR)/unixded-security.Po"; else rm -f "$(DEPDIR)/unixded-security.Tpo"; exit 1; fi
#	source='security.c' object='unixded-security.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-security.obj `if test -f 'security.c'; then $(CYGPATH_W) 'security.c'; else $(CYGPATH_W) '$(srcdir)/security.c'; fi`

unixded-sv_main.o: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_main.o -MD -MP -MF "$(DEPDIR)/unixded-sv_main.Tpo" -c -o unixded-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c; \
	then mv -f "$(DEPDIR)/unixded-sv_main.Tpo" "$(DEPDIR)/unixded-sv_main.Po"; else rm -f "$(DEPDIR)/unixded-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='unixded-sv_main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_main.o `test -f 'sv_main.c' || echo '$(srcdir)/'`sv_main.c

unixded-sv_main.obj: sv_main.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_main.obj -MD -MP -MF "$(DEPDIR)/unixded-sv_main.Tpo" -c -o unixded-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sv_main.Tpo" "$(DEPDIR)/unixded-sv_main.Po"; else rm -f "$(DEPDIR)/unixded-sv_main.Tpo"; exit 1; fi
#	source='sv_main.c' object='unixded-sv_main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_main.obj `if test -f 'sv_main.c'; then $(CYGPATH_W) 'sv_main.c'; else $(CYGPATH_W) '$(srcdir)/sv_main.c'; fi`

unixded-sv_phys.o: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_phys.o -MD -MP -MF "$(DEPDIR)/unixded-sv_phys.Tpo" -c -o unixded-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c; \
	then mv -f "$(DEPDIR)/unixded-sv_phys.Tpo" "$(DEPDIR)/unixded-sv_phys.Po"; else rm -f "$(DEPDIR)/unixded-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='unixded-sv_phys.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_phys.o `test -f 'sv_phys.c' || echo '$(srcdir)/'`sv_phys.c

unixded-sv_phys.obj: sv_phys.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_phys.obj -MD -MP -MF "$(DEPDIR)/unixded-sv_phys.Tpo" -c -o unixded-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sv_phys.Tpo" "$(DEPDIR)/unixded-sv_phys.Po"; else rm -f "$(DEPDIR)/unixded-sv_phys.Tpo"; exit 1; fi
#	source='sv_phys.c' object='unixded-sv_phys.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_phys.obj `if test -f 'sv_phys.c'; then $(CYGPATH_W) 'sv_phys.c'; else $(CYGPATH_W) '$(srcdir)/sv_phys.c'; fi`

unixded-sv_move.o: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_move.o -MD -MP -MF "$(DEPDIR)/unixded-sv_move.Tpo" -c -o unixded-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c; \
	then mv -f "$(DEPDIR)/unixded-sv_move.Tpo" "$(DEPDIR)/unixded-sv_move.Po"; else rm -f "$(DEPDIR)/unixded-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='unixded-sv_move.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_move.o `test -f 'sv_move.c' || echo '$(srcdir)/'`sv_move.c

unixded-sv_move.obj: sv_move.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_move.obj -MD -MP -MF "$(DEPDIR)/unixded-sv_move.Tpo" -c -o unixded-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sv_move.Tpo" "$(DEPDIR)/unixded-sv_move.Po"; else rm -f "$(DEPDIR)/unixded-sv_move.Tpo"; exit 1; fi
#	source='sv_move.c' object='unixded-sv_move.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_move.obj `if test -f 'sv_move.c'; then $(CYGPATH_W) 'sv_move.c'; else $(CYGPATH_W) '$(srcdir)/sv_move.c'; fi`

unixded-sv_user.o: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_user.o -MD -MP -MF "$(DEPDIR)/unixded-sv_user.Tpo" -c -o unixded-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c; \
	then mv -f "$(DEPDIR)/unixded-sv_user.Tpo" "$(DEPDIR)/unixded-sv_user.Po"; else rm -f "$(DEPDIR)/unixded-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='unixded-sv_user.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_user.o `test -f 'sv_user.c' || echo '$(srcdir)/'`sv_user.c

unixded-sv_user.obj: sv_user.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sv_user.obj -MD -MP -MF "$(DEPDIR)/unixded-sv_user.Tpo" -c -o unixded-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sv_user.Tpo" "$(DEPDIR)/unixded-sv_user.Po"; else rm -f "$(DEPDIR)/unixded-sv_user.Tpo"; exit 1; fi
#	source='sv_user.c' object='unixded-sv_user.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sv_user.obj `if test -f 'sv_user.c'; then $(CYGPATH_W) 'sv_user.c'; else $(CYGPATH_W) '$(srcdir)/sv_user.c'; fi`

unixded-sys_unixd.o: sys_unixd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sys_unixd.o -MD -MP -MF "$(DEPDIR)/unixded-sys_unixd.Tpo" -c -o unixded-sys_unixd.o `test -f 'sys_unixd.c' || echo '$(srcdir)/'`sys_unixd.c; \
	then mv -f "$(DEPDIR)/unixded-sys_unixd.Tpo" "$(DEPDIR)/unixded-sys_unixd.Po"; else rm -f "$(DEPDIR)/unixded-sys_unixd.Tpo"; exit 1; fi
#	source='sys_unixd.c' object='unixded-sys_unixd.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sys_unixd.o `test -f 'sys_unixd.c' || echo '$(srcdir)/'`sys_unixd.c

unixded-sys_unixd.obj: sys_unixd.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-sys_unixd.obj -MD -MP -MF "$(DEPDIR)/unixded-sys_unixd.Tpo" -c -o unixded-sys_unixd.obj `if test -f 'sys_unixd.c'; then $(CYGPATH_W) 'sys_unixd.c'; else $(CYGPATH_W) '$(srcdir)/sys_unixd.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-sys_unixd.Tpo" "$(DEPDIR)/unixded-sys_unixd.Po"; else rm -f "$(DEPDIR)/unixded-sys_unixd.Tpo"; exit 1; fi
#	source='sys_unixd.c' object='unixded-sys_unixd.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-sys_unixd.obj `if test -f 'sys_unixd.c'; then $(CYGPATH_W) 'sys_unixd.c'; else $(CYGPATH_W) '$(srcdir)/sys_unixd.c'; fi`

unixded-view.o: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-view.o -MD -MP -MF "$(DEPDIR)/unixded-view.Tpo" -c -o unixded-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c; \
	then mv -f "$(DEPDIR)/unixded-view.Tpo" "$(DEPDIR)/unixded-view.Po"; else rm -f "$(DEPDIR)/unixded-view.Tpo"; exit 1; fi
#	source='view.c' object='unixded-view.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-view.o `test -f 'view.c' || echo '$(srcdir)/'`view.c

unixded-view.obj: view.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-view.obj -MD -MP -MF "$(DEPDIR)/unixded-view.Tpo" -c -o unixded-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-view.Tpo" "$(DEPDIR)/unixded-view.Po"; else rm -f "$(DEPDIR)/unixded-view.Tpo"; exit 1; fi
#	source='view.c' object='unixded-view.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-view.obj `if test -f 'view.c'; then $(CYGPATH_W) 'view.c'; else $(CYGPATH_W) '$(srcdir)/view.c'; fi`

unixded-wad.o: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-wad.o -MD -MP -MF "$(DEPDIR)/unixded-wad.Tpo" -c -o unixded-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c; \
	then mv -f "$(DEPDIR)/unixded-wad.Tpo" "$(DEPDIR)/unixded-wad.Po"; else rm -f "$(DEPDIR)/unixded-wad.Tpo"; exit 1; fi
#	source='wad.c' object='unixded-wad.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-wad.o `test -f 'wad.c' || echo '$(srcdir)/'`wad.c

unixded-wad.obj: wad.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-wad.obj -MD -MP -MF "$(DEPDIR)/unixded-wad.Tpo" -c -o unixded-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-wad.Tpo" "$(DEPDIR)/unixded-wad.Po"; else rm -f "$(DEPDIR)/unixded-wad.Tpo"; exit 1; fi
#	source='wad.c' object='unixded-wad.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-wad.obj `if test -f 'wad.c'; then $(CYGPATH_W) 'wad.c'; else $(CYGPATH_W) '$(srcdir)/wad.c'; fi`

unixded-world.o: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-world.o -MD -MP -MF "$(DEPDIR)/unixded-world.Tpo" -c -o unixded-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c; \
	then mv -f "$(DEPDIR)/unixded-world.Tpo" "$(DEPDIR)/unixded-world.Po"; else rm -f "$(DEPDIR)/unixded-world.Tpo"; exit 1; fi
#	source='world.c' object='unixded-world.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-world.o `test -f 'world.c' || echo '$(srcdir)/'`world.c

unixded-world.obj: world.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-world.obj -MD -MP -MF "$(DEPDIR)/unixded-world.Tpo" -c -o unixded-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-world.Tpo" "$(DEPDIR)/unixded-world.Po"; else rm -f "$(DEPDIR)/unixded-world.Tpo"; exit 1; fi
#	source='world.c' object='unixded-world.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-world.obj `if test -f 'world.c'; then $(CYGPATH_W) 'world.c'; else $(CYGPATH_W) '$(srcdir)/world.c'; fi`

unixded-cd_null.o: cd_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cd_null.o -MD -MP -MF "$(DEPDIR)/unixded-cd_null.Tpo" -c -o unixded-cd_null.o `test -f 'cd_null.c' || echo '$(srcdir)/'`cd_null.c; \
	then mv -f "$(DEPDIR)/unixded-cd_null.Tpo" "$(DEPDIR)/unixded-cd_null.Po"; else rm -f "$(DEPDIR)/unixded-cd_null.Tpo"; exit 1; fi
#	source='cd_null.c' object='unixded-cd_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cd_null.o `test -f 'cd_null.c' || echo '$(srcdir)/'`cd_null.c

unixded-cd_null.obj: cd_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-cd_null.obj -MD -MP -MF "$(DEPDIR)/unixded-cd_null.Tpo" -c -o unixded-cd_null.obj `if test -f 'cd_null.c'; then $(CYGPATH_W) 'cd_null.c'; else $(CYGPATH_W) '$(srcdir)/cd_null.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-cd_null.Tpo" "$(DEPDIR)/unixded-cd_null.Po"; else rm -f "$(DEPDIR)/unixded-cd_null.Tpo"; exit 1; fi
#	source='cd_null.c' object='unixded-cd_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-cd_null.obj `if test -f 'cd_null.c'; then $(CYGPATH_W) 'cd_null.c'; else $(CYGPATH_W) '$(srcdir)/cd_null.c'; fi`

unixded-vid_null.o: vid_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-vid_null.o -MD -MP -MF "$(DEPDIR)/unixded-vid_null.Tpo" -c -o unixded-vid_null.o `test -f 'vid_null.c' || echo '$(srcdir)/'`vid_null.c; \
	then mv -f "$(DEPDIR)/unixded-vid_null.Tpo" "$(DEPDIR)/unixded-vid_null.Po"; else rm -f "$(DEPDIR)/unixded-vid_null.Tpo"; exit 1; fi
#	source='vid_null.c' object='unixded-vid_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-vid_null.o `test -f 'vid_null.c' || echo '$(srcdir)/'`vid_null.c

unixded-vid_null.obj: vid_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-vid_null.obj -MD -MP -MF "$(DEPDIR)/unixded-vid_null.Tpo" -c -o unixded-vid_null.obj `if test -f 'vid_null.c'; then $(CYGPATH_W) 'vid_null.c'; else $(CYGPATH_W) '$(srcdir)/vid_null.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-vid_null.Tpo" "$(DEPDIR)/unixded-vid_null.Po"; else rm -f "$(DEPDIR)/unixded-vid_null.Tpo"; exit 1; fi
#	source='vid_null.c' object='unixded-vid_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-vid_null.obj `if test -f 'vid_null.c'; then $(CYGPATH_W) 'vid_null.c'; else $(CYGPATH_W) '$(srcdir)/vid_null.c'; fi`

unixded-snd_null.o: snd_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-snd_null.o -MD -MP -MF "$(DEPDIR)/unixded-snd_null.Tpo" -c -o unixded-snd_null.o `test -f 'snd_null.c' || echo '$(srcdir)/'`snd_null.c; \
	then mv -f "$(DEPDIR)/unixded-snd_null.Tpo" "$(DEPDIR)/unixded-snd_null.Po"; else rm -f "$(DEPDIR)/unixded-snd_null.Tpo"; exit 1; fi
#	source='snd_null.c' object='unixded-snd_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-snd_null.o `test -f 'snd_null.c' || echo '$(srcdir)/'`snd_null.c

unixded-snd_null.obj: snd_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-snd_null.obj -MD -MP -MF "$(DEPDIR)/unixded-snd_null.Tpo" -c -o unixded-snd_null.obj `if test -f 'snd_null.c'; then $(CYGPATH_W) 'snd_null.c'; else $(CYGPATH_W) '$(srcdir)/snd_null.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-snd_null.Tpo" "$(DEPDIR)/unixded-snd_null.Po"; else rm -f "$(DEPDIR)/unixded-snd_null.Tpo"; exit 1; fi
#	source='snd_null.c' object='unixded-snd_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-snd_null.obj `if test -f 'snd_null.c'; then $(CYGPATH_W) 'snd_null.c'; else $(CYGPATH_W) '$(srcdir)/snd_null.c'; fi`

unixded-in_null.o: in_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-in_null.o -MD -MP -MF "$(DEPDIR)/unixded-in_null.Tpo" -c -o unixded-in_null.o `test -f 'in_null.c' || echo '$(srcdir)/'`in_null.c; \
	then mv -f "$(DEPDIR)/unixded-in_null.Tpo" "$(DEPDIR)/unixded-in_null.Po"; else rm -f "$(DEPDIR)/unixded-in_null.Tpo"; exit 1; fi
#	source='in_null.c' object='unixded-in_null.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-in_null.o `test -f 'in_null.c' || echo '$(srcdir)/'`in_null.c

unixded-in_null.obj: in_null.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-in_null.obj -MD -MP -MF "$(DEPDIR)/unixded-in_null.Tpo" -c -o unixded-in_null.obj `if test -f 'in_null.c'; then $(CYGPATH_W) 'in_null.c'; else $(CYGPATH_W) '$(srcdir)/in_null.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-in_null.Tpo" "$(DEPDIR)/unixded-in_null.Po"; else rm -f "$(DEPDIR)/unixded-in_null.Tpo"; exit 1; fi
#	source='in_null.c' object='unixded-in_null.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-in_null.obj `if test -f 'in_null.c'; then $(CYGPATH_W) 'in_null.c'; else $(CYGPATH_W) '$(srcdir)/in_null.c'; fi`

unixded-zone.o: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-zone.o -MD -MP -MF "$(DEPDIR)/unixded-zone.Tpo" -c -o unixded-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c; \
	then mv -f "$(DEPDIR)/unixded-zone.Tpo" "$(DEPDIR)/unixded-zone.Po"; else rm -f "$(DEPDIR)/unixded-zone.Tpo"; exit 1; fi
#	source='zone.c' object='unixded-zone.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-zone.o `test -f 'zone.c' || echo '$(srcdir)/'`zone.c

unixded-zone.obj: zone.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -MT unixded-zone.obj -MD -MP -MF "$(DEPDIR)/unixded-zone.Tpo" -c -o unixded-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`; \
	then mv -f "$(DEPDIR)/unixded-zone.Tpo" "$(DEPDIR)/unixded-zone.Po"; else rm -f "$(DEPDIR)/unixded-zone.Tpo"; exit 1; fi
#	source='zone.c' object='unixded-zone.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(unixded_CFLAGS) $(CFLAGS) -c -o unixded-zone.obj `if test -f 'zone.c'; then $(CYGPATH_W) 'zone.c'; else $(CYGPATH_W) '$(srcdir)/zone.c'; fi`

.s.o:
	$(CCASCOMPILE) -c $<

.s.obj:
	$(CCASCOMPILE) -c `$(CYGPATH_W) '$<'`

glquake_glx-math.o: math.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-math.o `test -f 'math.s' || echo '$(srcdir)/'`math.s

glquake_glx-math.obj: math.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-math.obj `if test -f 'math.s'; then $(CYGPATH_W) 'math.s'; else $(CYGPATH_W) '$(srcdir)/math.s'; fi`

glquake_glx-worlda.o: worlda.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-worlda.o `test -f 'worlda.s' || echo '$(srcdir)/'`worlda.s

glquake_glx-worlda.obj: worlda.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-worlda.obj `if test -f 'worlda.s'; then $(CYGPATH_W) 'worlda.s'; else $(CYGPATH_W) '$(srcdir)/worlda.s'; fi`

glquake_glx-snd_mixa.o: snd_mixa.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-snd_mixa.o `test -f 'snd_mixa.s' || echo '$(srcdir)/'`snd_mixa.s

glquake_glx-snd_mixa.obj: snd_mixa.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-snd_mixa.obj `if test -f 'snd_mixa.s'; then $(CYGPATH_W) 'snd_mixa.s'; else $(CYGPATH_W) '$(srcdir)/snd_mixa.s'; fi`

glquake_glx-sys_dosa.o: sys_dosa.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-sys_dosa.o `test -f 'sys_dosa.s' || echo '$(srcdir)/'`sys_dosa.s

glquake_glx-sys_dosa.obj: sys_dosa.s
	$(CCAS) $(glquake_glx_CCASFLAGS) $(CCASFLAGS) -c -o glquake_glx-sys_dosa.obj `if test -f 'sys_dosa.s'; then $(CYGPATH_W) 'sys_dosa.s'; else $(CYGPATH_W) '$(srcdir)/sys_dosa.s'; fi`

quake_x11-d_draw.o: d_draw.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_draw.o `test -f 'd_draw.s' || echo '$(srcdir)/'`d_draw.s

quake_x11-d_draw.obj: d_draw.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_draw.obj `if test -f 'd_draw.s'; then $(CYGPATH_W) 'd_draw.s'; else $(CYGPATH_W) '$(srcdir)/d_draw.s'; fi`

quake_x11-d_draw16.o: d_draw16.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_draw16.o `test -f 'd_draw16.s' || echo '$(srcdir)/'`d_draw16.s

quake_x11-d_draw16.obj: d_draw16.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_draw16.obj `if test -f 'd_draw16.s'; then $(CYGPATH_W) 'd_draw16.s'; else $(CYGPATH_W) '$(srcdir)/d_draw16.s'; fi`

quake_x11-d_parta.o: d_parta.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_parta.o `test -f 'd_parta.s' || echo '$(srcdir)/'`d_parta.s

quake_x11-d_parta.obj: d_parta.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_parta.obj `if test -f 'd_parta.s'; then $(CYGPATH_W) 'd_parta.s'; else $(CYGPATH_W) '$(srcdir)/d_parta.s'; fi`

quake_x11-d_polysa.o: d_polysa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_polysa.o `test -f 'd_polysa.s' || echo '$(srcdir)/'`d_polysa.s

quake_x11-d_polysa.obj: d_polysa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_polysa.obj `if test -f 'd_polysa.s'; then $(CYGPATH_W) 'd_polysa.s'; else $(CYGPATH_W) '$(srcdir)/d_polysa.s'; fi`

quake_x11-d_scana.o: d_scana.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_scana.o `test -f 'd_scana.s' || echo '$(srcdir)/'`d_scana.s

quake_x11-d_scana.obj: d_scana.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_scana.obj `if test -f 'd_scana.s'; then $(CYGPATH_W) 'd_scana.s'; else $(CYGPATH_W) '$(srcdir)/d_scana.s'; fi`

quake_x11-d_spr8.o: d_spr8.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_spr8.o `test -f 'd_spr8.s' || echo '$(srcdir)/'`d_spr8.s

quake_x11-d_spr8.obj: d_spr8.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_spr8.obj `if test -f 'd_spr8.s'; then $(CYGPATH_W) 'd_spr8.s'; else $(CYGPATH_W) '$(srcdir)/d_spr8.s'; fi`

quake_x11-d_varsa.o: d_varsa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_varsa.o `test -f 'd_varsa.s' || echo '$(srcdir)/'`d_varsa.s

quake_x11-d_varsa.obj: d_varsa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-d_varsa.obj `if test -f 'd_varsa.s'; then $(CYGPATH_W) 'd_varsa.s'; else $(CYGPATH_W) '$(srcdir)/d_varsa.s'; fi`

quake_x11-math.o: math.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-math.o `test -f 'math.s' || echo '$(srcdir)/'`math.s

quake_x11-math.obj: math.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-math.obj `if test -f 'math.s'; then $(CYGPATH_W) 'math.s'; else $(CYGPATH_W) '$(srcdir)/math.s'; fi`

quake_x11-r_aliasa.o: r_aliasa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_aliasa.o `test -f 'r_aliasa.s' || echo '$(srcdir)/'`r_aliasa.s

quake_x11-r_aliasa.obj: r_aliasa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_aliasa.obj `if test -f 'r_aliasa.s'; then $(CYGPATH_W) 'r_aliasa.s'; else $(CYGPATH_W) '$(srcdir)/r_aliasa.s'; fi`

quake_x11-r_drawa.o: r_drawa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_drawa.o `test -f 'r_drawa.s' || echo '$(srcdir)/'`r_drawa.s

quake_x11-r_drawa.obj: r_drawa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_drawa.obj `if test -f 'r_drawa.s'; then $(CYGPATH_W) 'r_drawa.s'; else $(CYGPATH_W) '$(srcdir)/r_drawa.s'; fi`

quake_x11-r_edgea.o: r_edgea.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_edgea.o `test -f 'r_edgea.s' || echo '$(srcdir)/'`r_edgea.s

quake_x11-r_edgea.obj: r_edgea.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_edgea.obj `if test -f 'r_edgea.s'; then $(CYGPATH_W) 'r_edgea.s'; else $(CYGPATH_W) '$(srcdir)/r_edgea.s'; fi`

quake_x11-r_varsa.o: r_varsa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_varsa.o `test -f 'r_varsa.s' || echo '$(srcdir)/'`r_varsa.s

quake_x11-r_varsa.obj: r_varsa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_varsa.obj `if test -f 'r_varsa.s'; then $(CYGPATH_W) 'r_varsa.s'; else $(CYGPATH_W) '$(srcdir)/r_varsa.s'; fi`

quake_x11-surf16.o: surf16.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-surf16.o `test -f 'surf16.s' || echo '$(srcdir)/'`surf16.s

quake_x11-surf16.obj: surf16.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-surf16.obj `if test -f 'surf16.s'; then $(CYGPATH_W) 'surf16.s'; else $(CYGPATH_W) '$(srcdir)/surf16.s'; fi`

quake_x11-surf8.o: surf8.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-surf8.o `test -f 'surf8.s' || echo '$(srcdir)/'`surf8.s

quake_x11-surf8.obj: surf8.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-surf8.obj `if test -f 'surf8.s'; then $(CYGPATH_W) 'surf8.s'; else $(CYGPATH_W) '$(srcdir)/surf8.s'; fi`

quake_x11-worlda.o: worlda.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-worlda.o `test -f 'worlda.s' || echo '$(srcdir)/'`worlda.s

quake_x11-worlda.obj: worlda.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-worlda.obj `if test -f 'worlda.s'; then $(CYGPATH_W) 'worlda.s'; else $(CYGPATH_W) '$(srcdir)/worlda.s'; fi`

quake_x11-r_aclipa.o: r_aclipa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_aclipa.o `test -f 'r_aclipa.s' || echo '$(srcdir)/'`r_aclipa.s

quake_x11-r_aclipa.obj: r_aclipa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-r_aclipa.obj `if test -f 'r_aclipa.s'; then $(CYGPATH_W) 'r_aclipa.s'; else $(CYGPATH_W) '$(srcdir)/r_aclipa.s'; fi`

quake_x11-snd_mixa.o: snd_mixa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-snd_mixa.o `test -f 'snd_mixa.s' || echo '$(srcdir)/'`snd_mixa.s

quake_x11-snd_mixa.obj: snd_mixa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-snd_mixa.obj `if test -f 'snd_mixa.s'; then $(CYGPATH_W) 'snd_mixa.s'; else $(CYGPATH_W) '$(srcdir)/snd_mixa.s'; fi`

quake_x11-sys_dosa.o: sys_dosa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-sys_dosa.o `test -f 'sys_dosa.s' || echo '$(srcdir)/'`sys_dosa.s

quake_x11-sys_dosa.obj: sys_dosa.s
	$(CCAS) $(quake_x11_CCASFLAGS) $(CCASFLAGS) -c -o quake_x11-sys_dosa.obj `if test -f 'sys_dosa.s'; then $(CYGPATH_W) 'sys_dosa.s'; else $(CYGPATH_W) '$(srcdir)/sys_dosa.s'; fi`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(am__remove_distdir)
	mkdir $(distdir)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	-find $(distdir) -type d ! -perm -777 -exec chmod a+rwx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(SHELL) $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r $(distdir)
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bunzip2 -c $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gunzip -c $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod a+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && cd $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e '1{h;s/./=/g;p;x;}' -e '$${p;x;}'
distuninstallcheck:
	@cd $(distuninstallcheck_dir) \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am am--refresh check check-am clean \
	clean-binPROGRAMS clean-generic ctags dist dist-all dist-bzip2 \
	dist-gzip dist-shar dist-tarZ dist-zip distcheck distclean \
	distclean-compile distclean-generic distclean-tags \
	distcleancheck distdir distuninstallcheck dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
